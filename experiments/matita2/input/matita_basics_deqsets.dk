(; This file was automatically generated from Matita. ;)

DeqSet : cic.Univ (cic.type (cic.s cic.z)).

mk_DeqSet :
  cic.Term (cic.type (cic.s cic.z))
    (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z)) cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (carr : cic.Univ (cic.type cic.z) =>
        cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z)) cic.I
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             carr
             (__ : cic.Term (cic.type cic.z) carr =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I carr
                (__1 : cic.Term (cic.type cic.z) carr =>
                 matita_basics_bool.bool)))
          (eqb :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                  cic.I carr
                  (__ : cic.Term (cic.type cic.z) carr =>
                   cic.prod (cic.type cic.z) (cic.type cic.z)
                     (cic.type cic.z) cic.I carr
                     (__1 : cic.Term (cic.type cic.z) carr =>
                      matita_basics_bool.bool))) =>
           cic.prod cic.prop (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                (x : cic.Term (cic.type cic.z) carr =>
                 cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                   (y : cic.Term (cic.type cic.z) carr =>
                    matita_basics_logic.iff
                      (matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (eqb x y) matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                         x y))))
             (_eqb_true :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                     (x : cic.Term (cic.type cic.z) carr =>
                      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                        (y : cic.Term (cic.type cic.z) carr =>
                         matita_basics_logic.iff
                           (matita_basics_logic.eq
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (eqb x y) matita_basics_bool.true)
                           (matita_basics_logic.eq
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                              x y)))) =>
              matita_basics_deqsets.DeqSet)))).

def match_DeqSet :
      return_sort : cic.Sort ->
      return_type :
        (z :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
         cic.Univ return_sort) ->
      case_mk_DeqSet :
        (carr : cic.Univ (cic.type cic.z) ->
         eqb :
           cic.Term (cic.type cic.z)
             (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I carr
                (__ : cic.Term (cic.type cic.z) carr =>
                 cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__1 : cic.Term (cic.type cic.z) carr =>
                    matita_basics_bool.bool))) ->
         _eqb_true :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                (x : cic.Term (cic.type cic.z) carr =>
                 cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                   (y : cic.Term (cic.type cic.z) carr =>
                    matita_basics_logic.iff
                      (matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (eqb x y) matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                         x y)))) ->
         cic.Term return_sort
           (return_type
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
                 _eqb_true))) ->
      z : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, case_mk_DeqSet, carr, eqb, _eqb_true ]
  match_DeqSet return_sort return_type case_mk_DeqSet
    (matita_basics_deqsets.mk_DeqSet carr eqb _eqb_true) -->
  case_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
    _eqb_true.

def filter_DeqSet :
      return_sort : cic.Sort ->
      return_type :
        (z :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
      cic.Term return_sort (return_type z).

[ return_sort1, carr, eqb, _eqb_true, return_type, return ]
  filter_DeqSet return_sort1 return_type return
    (matita_basics_deqsets.mk_DeqSet carr eqb _eqb_true) -->
  return
    (matita_basics_deqsets.mk_DeqSet
       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb _eqb_true).

def DeqSet_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1439 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1439 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1439 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1439)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1439 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1439)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1439 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1439 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1439) x_1439)))).

def DeqSet_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1439 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1439 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1439 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1439)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1439 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1439)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1439 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1439 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1439) x_1439)))).

[ Q_, _H_mk_DeqSet, x_1439 ] DeqSet_ind Q_ _H_mk_DeqSet x_1439 -->
  matita_basics_deqsets.filter_DeqSet cic.prop
    (x_1439 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1439 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1439) x_1439)
    (matita_basics_deqsets.DeqSet_ind_body Q_ _H_mk_DeqSet) x_1439.

[ Q_, _H_mk_DeqSet, x_1439 ] DeqSet_ind_body Q_ _H_mk_DeqSet x_1439 -->
  matita_basics_deqsets.match_DeqSet cic.prop
    (_x_1439 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1439)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1439.

def DeqSet_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1441 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1441 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1441 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1441)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1441 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1441)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1441 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1441 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1441) x_1441)))).

def DeqSet_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1441 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1441 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1441 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1441)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1441 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1441)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1441 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1441 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1441) x_1441)))).

[ Q_, _H_mk_DeqSet, x_1441 ] DeqSet_rect_Type4 Q_ _H_mk_DeqSet x_1441 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1441 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1441 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1441) x_1441)
    (matita_basics_deqsets.DeqSet_rect_Type4_body Q_ _H_mk_DeqSet) x_1441.

[ Q_, _H_mk_DeqSet, x_1441 ]
  DeqSet_rect_Type4_body Q_ _H_mk_DeqSet x_1441 -->
  matita_basics_deqsets.match_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1441 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1441)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1441.

def DeqSet_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_deqsets.DeqSet
              (_x_1443 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1443 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1443 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1443)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1443 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1443)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (x_1443 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1443 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1443) x_1443)))).

def DeqSet_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_deqsets.DeqSet
              (_x_1443 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1443 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1443 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1443)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1443 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1443)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (x_1443 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1443 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1443) x_1443)))).

[ Q_, _H_mk_DeqSet, x_1443 ] DeqSet_rect_Type5 Q_ _H_mk_DeqSet x_1443 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1443 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1443 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1443) x_1443)
    (matita_basics_deqsets.DeqSet_rect_Type5_body Q_ _H_mk_DeqSet) x_1443.

[ Q_, _H_mk_DeqSet, x_1443 ]
  DeqSet_rect_Type5_body Q_ _H_mk_DeqSet x_1443 -->
  matita_basics_deqsets.match_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1443 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1443)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1443.

def DeqSet_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1445 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1445 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1445 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1445)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1445 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1445)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1445 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1445 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1445) x_1445)))).

def DeqSet_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1445 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1445 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1445 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1445)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1445 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1445)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1445 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1445 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1445) x_1445)))).

[ Q_, _H_mk_DeqSet, x_1445 ] DeqSet_rect_Type3 Q_ _H_mk_DeqSet x_1445 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1445 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1445 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1445) x_1445)
    (matita_basics_deqsets.DeqSet_rect_Type3_body Q_ _H_mk_DeqSet) x_1445.

[ Q_, _H_mk_DeqSet, x_1445 ]
  DeqSet_rect_Type3_body Q_ _H_mk_DeqSet x_1445 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1445 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1445)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1445.

def DeqSet_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1447 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1447 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1447 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1447)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1447 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1447)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1447 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1447 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1447) x_1447)))).

def DeqSet_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1447 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1447 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1447 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1447)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1447 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1447)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1447 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1447 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1447) x_1447)))).

[ Q_, _H_mk_DeqSet, x_1447 ] DeqSet_rect_Type2 Q_ _H_mk_DeqSet x_1447 -->
  matita_basics_deqsets.filter_DeqSet (cic.type (cic.s (cic.s cic.z)))
    (x_1447 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1447 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1447) x_1447)
    (matita_basics_deqsets.DeqSet_rect_Type2_body Q_ _H_mk_DeqSet) x_1447.

[ Q_, _H_mk_DeqSet, x_1447 ]
  DeqSet_rect_Type2_body Q_ _H_mk_DeqSet x_1447 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s (cic.s cic.z)))
    (_x_1447 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1447)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1447.

def DeqSet_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1449 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1449 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1449 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1449)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1449 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1449)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1449 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1449 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1449) x_1449)))).

def DeqSet_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1449 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1449 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1449 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1449)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1449 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1449)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1449 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1449 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1449) x_1449)))).

[ Q_, _H_mk_DeqSet, x_1449 ] DeqSet_rect_Type1 Q_ _H_mk_DeqSet x_1449 -->
  matita_basics_deqsets.filter_DeqSet (cic.type (cic.s cic.z))
    (x_1449 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1449 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1449) x_1449)
    (matita_basics_deqsets.DeqSet_rect_Type1_body Q_ _H_mk_DeqSet) x_1449.

[ Q_, _H_mk_DeqSet, x_1449 ]
  DeqSet_rect_Type1_body Q_ _H_mk_DeqSet x_1449 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s cic.z))
    (_x_1449 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1449)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1449.

def DeqSet_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1451 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1451 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1451 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1451)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1451 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1451)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1451 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1451 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1451) x_1451)))).

def DeqSet_rect_Type0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1451 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1451 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1451 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1451)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1451 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1451)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1451 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1451 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1451) x_1451)))).

[ Q_, _H_mk_DeqSet, x_1451 ] DeqSet_rect_Type0 Q_ _H_mk_DeqSet x_1451 -->
  matita_basics_deqsets.filter_DeqSet (cic.type cic.z)
    (x_1451 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1451 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1451) x_1451)
    (matita_basics_deqsets.DeqSet_rect_Type0_body Q_ _H_mk_DeqSet) x_1451.

[ Q_, _H_mk_DeqSet, x_1451 ]
  DeqSet_rect_Type0_body Q_ _H_mk_DeqSet x_1451 -->
  matita_basics_deqsets.match_DeqSet (cic.type cic.z)
    (_x_1451 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1451)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1451.

def DeqSet_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1453 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1453 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1453 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1453)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1453 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1453)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1453 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1453 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1453) x_1453)))).

def DeqSet_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1453 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1453 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1453 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1453)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1453 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1453)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1453 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1453 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1453) x_1453)))).

[ Q_, _H_mk_DeqSet, x_1453 ] DeqSet_rect_CProp4 Q_ _H_mk_DeqSet x_1453 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1453 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1453 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1453) x_1453)
    (matita_basics_deqsets.DeqSet_rect_CProp4_body Q_ _H_mk_DeqSet) x_1453.

[ Q_, _H_mk_DeqSet, x_1453 ]
  DeqSet_rect_CProp4_body Q_ _H_mk_DeqSet x_1453 -->
  matita_basics_deqsets.match_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1453 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1453)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1453.

def DeqSet_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_deqsets.DeqSet
              (_x_1455 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1455 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1455 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1455)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1455 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1455)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (x_1455 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1455 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1455) x_1455)))).

def DeqSet_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_deqsets.DeqSet
              (_x_1455 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_deqsets.DeqSet
                   (_x_1455 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1455 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1455)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1455 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1455)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (x_1455 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1455 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1455) x_1455)))).

[ Q_, _H_mk_DeqSet, x_1455 ] DeqSet_rect_CProp5 Q_ _H_mk_DeqSet x_1455 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1455 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1455 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1455) x_1455)
    (matita_basics_deqsets.DeqSet_rect_CProp5_body Q_ _H_mk_DeqSet) x_1455.

[ Q_, _H_mk_DeqSet, x_1455 ]
  DeqSet_rect_CProp5_body Q_ _H_mk_DeqSet x_1455 -->
  matita_basics_deqsets.match_DeqSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1455 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1455)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1455.

def DeqSet_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1457 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1457 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1457 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1457)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1457 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1457)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1457 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1457 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1457) x_1457)))).

def DeqSet_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1457 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1457 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1457 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1457)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1457 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1457)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1457 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1457 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1457) x_1457)))).

[ Q_, _H_mk_DeqSet, x_1457 ] DeqSet_rect_CProp3 Q_ _H_mk_DeqSet x_1457 -->
  matita_basics_deqsets.filter_DeqSet
    (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1457 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1457 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1457) x_1457)
    (matita_basics_deqsets.DeqSet_rect_CProp3_body Q_ _H_mk_DeqSet) x_1457.

[ Q_, _H_mk_DeqSet, x_1457 ]
  DeqSet_rect_CProp3_body Q_ _H_mk_DeqSet x_1457 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1457 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1457)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1457.

def DeqSet_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1459 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1459 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1459 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1459)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1459 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1459)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1459 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1459 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1459) x_1459)))).

def DeqSet_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1459 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1459 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1459 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1459)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1459 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1459)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (x_1459 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1459 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1459) x_1459)))).

[ Q_, _H_mk_DeqSet, x_1459 ] DeqSet_rect_CProp2 Q_ _H_mk_DeqSet x_1459 -->
  matita_basics_deqsets.filter_DeqSet (cic.type (cic.s (cic.s cic.z)))
    (x_1459 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1459 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1459) x_1459)
    (matita_basics_deqsets.DeqSet_rect_CProp2_body Q_ _H_mk_DeqSet) x_1459.

[ Q_, _H_mk_DeqSet, x_1459 ]
  DeqSet_rect_CProp2_body Q_ _H_mk_DeqSet x_1459 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s (cic.s cic.z)))
    (_x_1459 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1459)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1459.

def DeqSet_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1461 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1461 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1461 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1461)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1461 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1461)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1461 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1461 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1461) x_1461)))).

def DeqSet_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_deqsets.DeqSet
              (_x_1461 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1461 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1461 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1461)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1461 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1461)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1461 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1461 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1461) x_1461)))).

[ Q_, _H_mk_DeqSet, x_1461 ] DeqSet_rect_CProp1 Q_ _H_mk_DeqSet x_1461 -->
  matita_basics_deqsets.filter_DeqSet (cic.type (cic.s cic.z))
    (x_1461 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1461 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1461) x_1461)
    (matita_basics_deqsets.DeqSet_rect_CProp1_body Q_ _H_mk_DeqSet) x_1461.

[ Q_, _H_mk_DeqSet, x_1461 ]
  DeqSet_rect_CProp1_body Q_ _H_mk_DeqSet x_1461 -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s cic.z))
    (_x_1461 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1461)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1461.

def DeqSet_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1463 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1463 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1463 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1463)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1463 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1463)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1463 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1463 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1463) x_1463)))).

def DeqSet_rect_CProp0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_x_1463 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   matita_basics_deqsets.DeqSet
                   (_x_1463 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (carr : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I carr
                       (__ : cic.Term (cic.type cic.z) carr =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__1 : cic.Term (cic.type cic.z) carr =>
                           matita_basics_bool.bool)))
                    (eqb :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool))) =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          carr
                          (x : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (y : cic.Term (cic.type cic.z) carr =>
                              (_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.iff _A _B)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (eqb x y) matita_basics_bool.true)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      carr)
                                   x y))))
                       (_eqb_true :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y)))) =>
                        (_x_1463 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         Q_ _x_1463)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I carr)
                             eqb _eqb_true)))))
              (_H_mk_DeqSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      (cic.type (cic.s cic.z)) cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (carr : cic.Univ (cic.type cic.z) =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I carr
                            (__ : cic.Term (cic.type cic.z) carr =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__1 : cic.Term (cic.type cic.z) carr =>
                                matita_basics_bool.bool)))
                         (eqb :
                            cic.Term (cic.type cic.z)
                              (cic.prod (cic.type cic.z) (cic.type cic.z)
                                 (cic.type cic.z) cic.I carr
                                 (__ : cic.Term (cic.type cic.z) carr =>
                                  cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__1 : cic.Term (cic.type cic.z) carr =>
                                     matita_basics_bool.bool))) =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I carr
                               (x : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (y : cic.Term (cic.type cic.z) carr =>
                                   (_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.iff _A _B)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (eqb x y) matita_basics_bool.true)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I carr)
                                        x y))))
                            (_eqb_true :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop cic.prop
                                    cic.I carr
                                    (x : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (y : cic.Term (cic.type cic.z) carr =>
                                        (_A : cic.Univ cic.prop =>
                                         _B : cic.Univ cic.prop =>
                                         matita_basics_logic.iff _A _B)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (eqb x y)
                                             matita_basics_bool.true)
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I carr)
                                             x y)))) =>
                             (_x_1463 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              Q_ _x_1463)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I carr)
                                  eqb _eqb_true))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (x_1463 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  (_x_1463 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   Q_ _x_1463) x_1463)))).

[ Q_, _H_mk_DeqSet, x_1463 ] DeqSet_rect_CProp0 Q_ _H_mk_DeqSet x_1463 -->
  matita_basics_deqsets.filter_DeqSet (cic.type cic.z)
    (x_1463 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     (_x_1463 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      Q_ _x_1463) x_1463)
    (matita_basics_deqsets.DeqSet_rect_CProp0_body Q_ _H_mk_DeqSet) x_1463.

[ Q_, _H_mk_DeqSet, x_1463 ]
  DeqSet_rect_CProp0_body Q_ _H_mk_DeqSet x_1463 -->
  matita_basics_deqsets.match_DeqSet (cic.type cic.z)
    (_x_1463 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     Q_ _x_1463)
    (carr : cic.Univ (cic.type cic.z) =>
     eqb :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            carr
            (__ : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I carr
               (__1 : cic.Term (cic.type cic.z) carr =>
                matita_basics_bool.bool))) =>
     _eqb_true :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
            (x : cic.Term (cic.type cic.z) carr =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
               (y : cic.Term (cic.type cic.z) carr =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (eqb x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                     x y)))) =>
     _H_mk_DeqSet (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I carr) eqb
       _eqb_true)
    x_1463.

def carr :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)).

def carr_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)).

[ _xxx ] carr _xxx -->
  matita_basics_deqsets.filter_DeqSet (cic.type (cic.s cic.z))
    (_xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
    matita_basics_deqsets.carr_body _xxx.

[ _xxx ] carr_body _xxx -->
  matita_basics_deqsets.match_DeqSet (cic.type (cic.s cic.z))
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
    (yyy : cic.Univ (cic.type cic.z) =>
     __ :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            yyy
            (__ : cic.Term (cic.type cic.z) yyy =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I yyy
               (__1 : cic.Term (cic.type cic.z) yyy =>
                matita_basics_bool.bool))) =>
     _0 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I yyy
            (x : cic.Term (cic.type cic.z) yyy =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I yyy
               (y : cic.Term (cic.type cic.z) yyy =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (__ x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I yyy)
                     x y)))) =>
     yyy)
    _xxx.

def eqb :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) xxx)
              (_x_1465 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) xxx)
                 (_x_1466 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) xxx) =>
                  matita_basics_bool.bool)))).

def eqb_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) xxx)
              (_x_1465 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) xxx)
                 (_x_1466 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) xxx) =>
                  matita_basics_bool.bool)))).

[ xxx ] eqb xxx -->
  matita_basics_deqsets.filter_DeqSet (cic.type cic.z)
    (xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) xxx)
       (_x_1465 :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) xxx) =>
        cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) xxx)
          (_x_1466 :
             cic.Term (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) xxx) =>
           matita_basics_bool.bool)))
    matita_basics_deqsets.eqb_body xxx.

[ xxx ] eqb_body xxx -->
  matita_basics_deqsets.match_DeqSet (cic.type cic.z)
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) xxx0)
       (_x_1465 :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) xxx0) =>
        cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) xxx0)
          (_x_1466 :
             cic.Term (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) xxx0) =>
           matita_basics_bool.bool)))
    (__ : cic.Univ (cic.type cic.z) =>
     yyy :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            __
            (__1 : cic.Term (cic.type cic.z) __ =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I __
               (__2 : cic.Term (cic.type cic.z) __ => matita_basics_bool.bool))) =>
     _0 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I __
            (x : cic.Term (cic.type cic.z) __ =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I __
               (y : cic.Term (cic.type cic.z) __ =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (yyy x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I __)
                     x y)))) =>
     yyy)
    xxx.

def eqb_true :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) xxx)
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) xxx)
                 (y :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) xxx) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb xxx x y)
                       matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) xxx))
                       x y))))).

def eqb_true_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) xxx)
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) xxx)
                 (y :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) xxx) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb xxx x y)
                       matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) xxx))
                       x y))))).

[ xxx ] eqb_true xxx -->
  matita_basics_deqsets.filter_DeqSet cic.prop
    (xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) xxx)
       (x :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) xxx) =>
        cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) xxx)
          (y :
             cic.Term (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) xxx) =>
           (_A : cic.Univ cic.prop =>
            _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                (matita_basics_deqsets.eqb xxx x y) matita_basics_bool.true)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx))
                x y))))
    matita_basics_deqsets.eqb_true_body xxx.

[ xxx ] eqb_true_body xxx -->
  matita_basics_deqsets.match_DeqSet cic.prop
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) xxx0)
       (x :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) xxx0) =>
        cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) xxx0)
          (y :
             cic.Term (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) xxx0) =>
           (_A : cic.Univ cic.prop =>
            _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                (matita_basics_deqsets.eqb xxx0 x y) matita_basics_bool.true)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) xxx0))
                x y))))
    (__ : cic.Univ (cic.type cic.z) =>
     _0 :
       cic.Term (cic.type cic.z)
         (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
            __
            (__1 : cic.Term (cic.type cic.z) __ =>
             cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
               cic.I __
               (__2 : cic.Term (cic.type cic.z) __ => matita_basics_bool.bool))) =>
     yyy :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I __
            (x : cic.Term (cic.type cic.z) __ =>
             cic.prod (cic.type cic.z) cic.prop cic.prop cic.I __
               (y : cic.Term (cic.type cic.z) __ =>
                (_A : cic.Univ cic.prop =>
                 _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     (_0 x y) matita_basics_bool.true)
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __1)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I __)
                     x y)))) =>
     yyy)
    xxx.

def DeqSet_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (_z2666 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      (cic.type (cic.s cic.z)) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2666 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2667 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2666 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2666)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term cic.prop
                      (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop cic.prop cic.prop cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop cic.prop cic.prop cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2667 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2666 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2666)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2666 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2666) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
             (_z2666 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2667 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2666 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2666)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2667 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2666 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2666) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_ind
           (_x_1439 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift cic.prop cic.prop cic.I
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1439)
                 (_z2667 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1439) =>
                  (_z2666 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2666) _x_1439)))
           H1 Hterm).

def DeqSet_inv_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (_z2672 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I matita_basics_deqsets.DeqSet
                      (_z2672 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2673 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2672 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2672)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2673 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2672 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2672)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2672 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2672) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2672 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2673 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2672 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2672)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2673 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2672 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2672) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_Type4
           (_x_1441 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1441)
                 (_z2673 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1441) =>
                  (_z2672 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2672) _x_1441)))
           H1 Hterm).

def DeqSet_inv_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2678 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2678 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2679 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2678 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2678)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2679 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2678 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2678)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2678 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2678) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2678 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2679 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2678 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2678)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2679 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2678 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2678) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_Type3
           (_x_1445 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1445)
                 (_z2679 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1445) =>
                  (_z2678 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2678) _x_1445)))
           H1 Hterm).

def DeqSet_inv_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2684 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2684 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2685 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2684 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2684)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2685 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2684 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2684)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2684 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2684) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2684 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2685 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2684 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2684)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2685 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2684 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2684) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_Type2
           (_x_1447 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1447)
                 (_z2685 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1447) =>
                  (_z2684 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2684) _x_1447)))
           H1 Hterm).

def DeqSet_inv_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2690 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2690 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2691 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2690 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2690)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2691 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2690 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2690)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2690 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2690) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2690 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z)) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2691 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2690 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2690)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2691 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2690 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2690) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_Type1
           (_x_1449 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1449)
                 (_z2691 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1449) =>
                  (_z2690 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2690) _x_1449)))
           H1 Hterm).

def DeqSet_inv_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (_z2696 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2696 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (cic.type cic.z) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2697 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2696 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2696)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.type cic.z) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (cic.type cic.z) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2697 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2696 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2696)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2696 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2696) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
             (_z2696 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             (cic.type (cic.s cic.z)) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2697 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2696 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2696)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2697 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2696 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2696) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_Type0
           (_x_1451 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1451)
                 (_z2697 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1451) =>
                  (_z2696 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2696) _x_1451)))
           H1 Hterm).

def DeqSet_inv_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_deqsets.DeqSet
                 (_z2702 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I matita_basics_deqsets.DeqSet
                      (_z2702 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2703 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2702 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2702)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2703 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2702 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2702)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2702 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2702) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2702 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2703 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2702 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2702)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2703 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2702 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2702) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_CProp4
           (_x_1453 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1453)
                 (_z2703 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1453) =>
                  (_z2702 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2702) _x_1453)))
           H1 Hterm).

def DeqSet_inv_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2708 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2708 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2709 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2708 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2708)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2709 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2708 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2708)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2708 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2708) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2708 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2709 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2708 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2708)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2709 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2708 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2708) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_CProp3
           (_x_1457 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1457)
                 (_z2709 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1457) =>
                  (_z2708 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2708) _x_1457)))
           H1 Hterm).

def DeqSet_inv_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2714 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2714 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2715 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2714 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2714)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2715 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2714 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2714)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2714 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2714) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2714 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2715 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2714 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2714)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2715 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2714 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2714) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_CProp2
           (_x_1459 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1459)
                 (_z2715 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1459) =>
                  (_z2714 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2714) _x_1459)))
           H1 Hterm).

def DeqSet_inv_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_deqsets.DeqSet
                 (_z2720 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2720 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2721 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2720 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2720)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2721 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2720 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2720)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2720 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2720) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             matita_basics_deqsets.DeqSet
             (_z2720 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z)) cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2721 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2720 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2720)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2721 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2720 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2720) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_CProp1
           (_x_1461 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1461)
                 (_z2721 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1461) =>
                  (_z2720 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2720) _x_1461)))
           H1 Hterm).

def DeqSet_inv_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
                 (_z2726 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
                      matita_basics_deqsets.DeqSet
                      (_z2726 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (carr : cic.Univ (cic.type cic.z) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I carr
                          (__ : cic.Term (cic.type cic.z) carr =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I carr
                             (__1 : cic.Term (cic.type cic.z) carr =>
                              matita_basics_bool.bool)))
                       (eqb :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool))) =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             carr
                             (x : cic.Term (cic.type cic.z) carr =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I carr
                                (y : cic.Term (cic.type cic.z) carr =>
                                 (_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.iff _A _B)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (eqb x y) matita_basics_bool.true)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I carr)
                                      x y))))
                          (_eqb_true :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y)))) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (cic.type cic.z) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_deqsets.DeqSet)
                                Hterm
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))
                             (_z2727 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)) =>
                              (_z2726 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               P _z2726)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I carr)
                                   eqb _eqb_true))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                         (cic.type (cic.s cic.z)) cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (carr : cic.Univ (cic.type cic.z) =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I carr
                               (__ : cic.Term (cic.type cic.z) carr =>
                                cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I carr
                                  (__1 : cic.Term (cic.type cic.z) carr =>
                                   matita_basics_bool.bool)))
                            (eqb :
                               cic.Term (cic.type cic.z)
                                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                                    (cic.type cic.z) cic.I carr
                                    (__ : cic.Term (cic.type cic.z) carr =>
                                     cic.prod (cic.type cic.z)
                                       (cic.type cic.z) (cic.type cic.z)
                                       cic.I carr
                                       (__1 :
                                          cic.Term (cic.type cic.z) carr =>
                                        matita_basics_bool.bool))) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.type cic.z) cic.I
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I carr
                                  (x : cic.Term (cic.type cic.z) carr =>
                                   cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I carr
                                     (y : cic.Term (cic.type cic.z) carr =>
                                      (_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.iff _A _B)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (eqb x y) matita_basics_bool.true)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I carr)
                                           x y))))
                               (_eqb_true :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       cic.prop cic.I carr
                                       (x : cic.Term (cic.type cic.z) carr =>
                                        cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I carr
                                          (y :
                                             cic.Term (cic.type cic.z) carr =>
                                           (_A : cic.Univ cic.prop =>
                                            _B : cic.Univ cic.prop =>
                                            matita_basics_logic.iff _A _B)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (eqb x y)
                                                matita_basics_bool.true)
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I carr)
                                                x y)))) =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (cic.type cic.z) cic.I
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_deqsets.DeqSet)
                                     Hterm
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true))
                                  (_z2727 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             matita_basics_deqsets.DeqSet)
                                          Hterm
                                          (matita_basics_deqsets.mk_DeqSet
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) cic.I carr)
                                             eqb _eqb_true)) =>
                                   (_z2726 :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    P _z2726)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I carr)
                                        eqb _eqb_true)))))) =>
                  (_z2726 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2726) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
             (_z2726 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             (cic.type (cic.s cic.z)) cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (carr : cic.Univ (cic.type cic.z) =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I carr
                   (__ : cic.Term (cic.type cic.z) carr =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I carr
                      (__1 : cic.Term (cic.type cic.z) carr =>
                       matita_basics_bool.bool)))
                (eqb :
                   cic.Term (cic.type cic.z)
                     (cic.prod (cic.type cic.z) (cic.type cic.z)
                        (cic.type cic.z) cic.I carr
                        (__ : cic.Term (cic.type cic.z) carr =>
                         cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I carr
                           (__1 : cic.Term (cic.type cic.z) carr =>
                            matita_basics_bool.bool))) =>
                 cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                      (x : cic.Term (cic.type cic.z) carr =>
                       cic.prod (cic.type cic.z) cic.prop cic.prop cic.I carr
                         (y : cic.Term (cic.type cic.z) carr =>
                          (_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.iff _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (eqb x y) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I carr)
                               x y))))
                   (_eqb_true :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           carr
                           (x : cic.Term (cic.type cic.z) carr =>
                            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                              carr
                              (y : cic.Term (cic.type cic.z) carr =>
                               (_A : cic.Univ cic.prop =>
                                _B : cic.Univ cic.prop =>
                                matita_basics_logic.iff _A _B)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (eqb x y) matita_basics_bool.true)
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       carr)
                                    x y)))) =>
                    cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true))
                      (_z2727 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_deqsets.DeqSet)
                              Hterm
                              (matita_basics_deqsets.mk_DeqSet
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I carr)
                                 eqb _eqb_true)) =>
                       (_z2726 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        P _z2726)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               carr)
                            eqb _eqb_true)))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_deqsets.DeqSet)
                 Hterm Hterm)
              (_z2727 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_deqsets.DeqSet)
                      Hterm Hterm) =>
               (_z2726 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                P _z2726) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_deqsets.DeqSet)
            Hterm))
        (matita_basics_deqsets.DeqSet_rect_CProp0
           (_x_1463 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_deqsets.DeqSet)
                    Hterm _x_1463)
                 (_z2727 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_deqsets.DeqSet)
                         Hterm _x_1463) =>
                  (_z2726 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   P _z2726) _x_1463)))
           H1 Hterm).

def eqb_false :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (b :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S a b)
                       matita_basics_bool.false)
                    ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      b :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      matita_basics_logic.conj
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
            (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b)))
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a b)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.false))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
         matita_basics_logic.not_to_not
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a b)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false)
           (H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a b) =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b)
              (x_1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b) x_1) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true x_1))
              (matita_basics_logic.sym_eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb S a b) matita_basics_bool.true
                 (matita_basics_logic.proj2
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a b)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S a b)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b))
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a b) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a b)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true S a b) H1))
              matita_basics_bool.false H)
           matita_basics_bool.not_eq_true_false)
        (H :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a b)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.false)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
           (H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b)
                    matita_basics_bool.false))
              (matita_basics_logic.absurd
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a b)
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a b)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S a b)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b))
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a b) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a b)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true S a b) H1)
                 H))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
            matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    x matita_basics_bool.false))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false)
              (matita_basics_deqsets.eqb S a b) auto)
           (matita_basics_bool.true_or_false
              (matita_basics_deqsets.eqb S a b))).

def dec_eq :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (b :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a b)
                    ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a b))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      b :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)) =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a b)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
         matita_basics_logic.or_introl
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a b)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b))
           (matita_basics_logic.proj1
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a b))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a b)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         a b) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b) matita_basics_bool.true))
              (matita_basics_deqsets.eqb_true S a b) H))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
         matita_basics_logic.or_intror
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a b)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b))
           (matita_basics_logic.proj1
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b)
                    matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.false) =>
                  (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a b)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a b))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a b)) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b)
                    matita_basics_bool.false))
              (matita_basics_deqsets.eqb_false S a b) H))
        (matita_basics_bool.true_or_false (matita_basics_deqsets.eqb S a b)).

def beqb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool
           (_b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (_b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_basics_bool.bool)))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.bool)
        b2 (matita_basics_bool.notb b2) b1.

def beqb_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.beqb b1 b2)
                    matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 b2))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.beqb __ b2) matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              __ b2))
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.beqb matita_basics_bool.true __)
                 matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true __))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true matita_basics_bool.false) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false auto)
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.false) =>
               matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false auto))
           b2)
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.beqb matita_basics_bool.false __)
                 matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false __))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false auto)
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false auto))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.false))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.false) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false)
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.false) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true))
           b2)
        b1.

def DeqBool : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
      :=
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool)
        matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true.

def exhint :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true)
                    b matita_basics_bool.false)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_basics_bool.bool)
                            matita_basics_deqsets.beqb
                            matita_basics_deqsets.beqb_true)
                         b matita_basics_bool.false)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b matita_basics_bool.false)))
      :=
      b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (matita_basics_deqsets.beqb b matita_basics_bool.false)
             matita_basics_bool.true) =>
      matita_basics_logic.proj1
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb
                 (matita_basics_deqsets.mk_DeqSet
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    matita_basics_deqsets.beqb
                    matita_basics_deqsets.beqb_true)
                 b matita_basics_bool.false)
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb
                      (matita_basics_deqsets.mk_DeqSet
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         matita_basics_deqsets.beqb
                         matita_basics_deqsets.beqb_true)
                      b matita_basics_bool.false)
                   matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true)))
              b matita_basics_bool.false))
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true)))
              b matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_basics_bool.bool)
                            matita_basics_deqsets.beqb
                            matita_basics_deqsets.beqb_true)))
                   b matita_basics_bool.false) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb
                 (matita_basics_deqsets.mk_DeqSet
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    matita_basics_deqsets.beqb
                    matita_basics_deqsets.beqb_true)
                 b matita_basics_bool.false)
              matita_basics_bool.true))
        (matita_basics_deqsets.eqb_true
           (matita_basics_deqsets.mk_DeqSet
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_basics_bool.bool)
              matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
           b matita_basics_bool.false)
        H.

def eq_option :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_types.option
                  (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (_a1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_types.option
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.option
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (_a2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.option
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  matita_basics_bool.bool))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_types.option
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      a2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_types.option
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_types.match_option (cic.type cic.z)
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_types.option
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         matita_basics_bool.bool)
        (matita_basics_types.match_option (cic.type cic.z)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.option
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            matita_basics_bool.bool)
           matita_basics_bool.true
           (__ :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_bool.false)
           a2)
        (a1' :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         matita_basics_types.match_option (cic.type cic.z)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.option
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            matita_basics_bool.bool)
           matita_basics_bool.false
           (a2' :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_deqsets.eqb A a1' a2')
           a2)
        a1.

def eq_option_true :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_types.option
                  (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (a1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_types.option
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.option
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (a2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.option
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eq_option A a1 a2)
                       matita_basics_bool.true)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       a1 a2)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_types.option
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_types.match_option cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_types.option
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             matita_basics_types.option
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)))
           (a2 :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.option
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_option A __ a2)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 __ a2)))
        (_clearme0 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_types.option
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         matita_basics_types.match_option cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.option
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_option A
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    __)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (matita_basics_types.None
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 __))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_option A
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eq_option A
                            (matita_basics_types.None
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A)))
                            (matita_basics_types.None
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))))
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.option
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))))
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_option A
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eq_option A
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))))
                      matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (matita_basics_types.None
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))))
              (auto :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.option
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))))
                      (matita_basics_types.None
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A)))
                      (matita_basics_types.None
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A)))) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_option A
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))))
           (a1 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_option A
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eq_option A
                            (matita_basics_types.None
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A)))
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a1))
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.option
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))))
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_option A
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1))
                    matita_basics_bool.true))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_bool.bool_discr matita_basics_bool.false
                 matita_basics_bool.true H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1))))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.option
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))))
                      (matita_basics_types.None
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A)))
                      (matita_basics_types.Some
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a1)) =>
               matita_basics_types.option_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (matita_basics_types.None
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.true))))
           _clearme0)
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         _clearme0 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_types.option
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         matita_basics_types.match_option cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.option
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_option A
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    __)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1)
                 __))
           (matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.option
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))))
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_bool.bool_discr matita_basics_bool.false
                 matita_basics_bool.true H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1)
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.option
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))))
                      (matita_basics_types.Some
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a1)
                      (matita_basics_types.None
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A)))) =>
               matita_basics_types.option_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1)
                 (matita_basics_types.None
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.true))))
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb A a1 a2)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb A a1 a2)
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.option
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))))
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb A a1 a2)
                    matita_basics_bool.true))
              (Heq :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb A a1 a2)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 a2
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  __ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         x a2) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          x)
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a2)))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a2))
                 a1
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb A a1 a2)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb A a1 a2)
                               matita_basics_bool.true) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1 a2))
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1 a2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a1 a2) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb A a1 a2)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true A a1 a2) Heq))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.option
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))))
                      (matita_basics_types.Some
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a1)
                      (matita_basics_types.Some
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a2)) =>
               matita_basics_types.option_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1)
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb A a1 a2)
                       matita_basics_bool.true))
                 (e0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (matita_basics_logic.R0
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         a2) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a2
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            x a2) =>
                     cic.lift cic.prop cic.prop cic.I
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.option
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))))
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                x)
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a2))
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.option
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))))
                                  (matita_basics_types.Some
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     x)
                                  (matita_basics_types.Some
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     a2)) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A x a2)
                             matita_basics_bool.true)))
                    (H0 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_types.option
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))))
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a2)
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a2)) =>
                     matita_basics_logic.streicherK
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_types.option
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))))
                               (matita_basics_types.Some
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  a2)
                               (matita_basics_types.Some
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  a2)) =>
                        cic.lift cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A a2 a2)
                             matita_basics_bool.true))
                       (matita_basics_logic.proj2
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb A a2 a2)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb A a2 a2)
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a2 a2))
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a2 a2)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     a2 a2) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb A a2 a2)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true A a2 a2)
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a2))
                       H0)
                    a1 e0 H)))
           _clearme0)
        _clearme.

def DeqOption :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.DeqSet))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             matita_basics_types.option
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))))
        (matita_basics_deqsets.eq_option A)
        (matita_basics_deqsets.eq_option_true A).

def eq_pairs :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Prod
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)))
                 (_p1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        _B : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _B))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (_p2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     matita_basics_bool.bool)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      p1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      p2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_bool.andb
        (matita_basics_deqsets.eqb A
           (matita_basics_types.fst
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              p1)
           (matita_basics_types.fst
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              p2))
        (matita_basics_deqsets.eqb B
           (matita_basics_types.snd
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              p1)
           (matita_basics_types.snd
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              p2)).

def eq_pairs_true :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Prod
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)))
                 (p1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        _B : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _B))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (p2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     (_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eq_pairs A B p1 p2)
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Prod
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          p1 p2))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_types.match_Prod cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) B))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Prod
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           (p2 :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_pairs A B __ p2)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 __ p2)))
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         b1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         _clearme0 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         matita_basics_types.match_Prod cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_pairs A B
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1 b1)
                    __)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a1 b1)
                 __))
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_pairs A B
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a1 b1)
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a2 b2))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eq_pairs A B
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a1 b1)
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a2 b2))
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1 b1)
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2 b2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1 b1)
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2 b2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a1 b1)
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a2 b2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eq_pairs A B
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a1 b1)
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a2 b2))
                    matita_basics_bool.true))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eq_pairs A B
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a1 b1)
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a2 b2))
                      matita_basics_bool.true) =>
               matita_basics_logic.match_And cic.prop
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb A
                       (matita_basics_types.fst
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr B))
                             a1 b1))
                       (matita_basics_types.fst
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr B))
                             a2 b2)))
                    matita_basics_bool.true)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb B
                       (matita_basics_types.snd
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr B))
                             a1 b1))
                       (matita_basics_types.snd
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             (matita_basics_deqsets.carr B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I (matita_basics_deqsets.carr B))
                             a2 b2)))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb A
                               (matita_basics_types.fst
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a1 b1))
                               (matita_basics_types.fst
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2 b2)))
                            matita_basics_bool.true)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb B
                               (matita_basics_types.snd
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a1 b1))
                               (matita_basics_types.snd
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2 b2)))
                            matita_basics_bool.true)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1 b1)
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2 b2))
                 (eqa :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb A a1 a2)
                         matita_basics_bool.true) =>
                  eqb :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb B b1 b2)
                         matita_basics_bool.true) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a2
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            x a2) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Prod
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             x b1)
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2)))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B) =>
                        __ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               x b2) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Prod
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.mk_Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                a2 x)
                             (matita_basics_types.mk_Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                a2 b2)))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Prod
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2))
                       b1
                       (matita_basics_logic.proj1
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B b1 b2)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb B b1 b2)
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                b1 b2))
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                b1 b2)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     b1 b2) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B b1 b2)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true B b1 b2) eqb))
                    a1
                    (matita_basics_logic.proj1
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A a1 a2)
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb A a1 a2)
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a1 a2))
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a1 a2)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  a1 a2) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A a1 a2)
                             matita_basics_bool.true))
                       (matita_basics_deqsets.eqb_true A a1 a2) eqa))
                 (matita_basics_bool.andb_true
                    (matita_basics_deqsets.eqb A
                       (matita_basics_types.fst
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a1 b1))
                       (matita_basics_types.fst
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2)))
                    (matita_basics_deqsets.eqb B
                       (matita_basics_types.snd
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a1 b1))
                       (matita_basics_types.snd
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2)))
                    H))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a1 b1)
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a2 b2)) =>
               matita_basics_types.Prod_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a1 b1)
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a2 b2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eq_pairs A B
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a1 b1)
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2))
                       matita_basics_bool.true))
                 (e0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (matita_basics_logic.R0
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         a2) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a2
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            x a2) =>
                     cic.lift cic.prop cic.prop cic.I
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Prod
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.mk_Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                x b1)
                             (matita_basics_types.mk_Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                a2 b2))
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     x b1)
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2 b2)) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (matita_basics_logic.R1
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   x
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A) =>
                                    p0 :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __2 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A1)
                                            _x __2)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           x x0) =>
                                    cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   b1 a2 __)
                                b2)
                             (_e1 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     (matita_basics_logic.R1
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        x
                                        (x0 :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                A) =>
                                         p0 :
                                           cic.Term cic.prop
                                             ((A1 :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A1 =>
                                               __2 :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A1 =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A1)
                                                 _x __2)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A))
                                                x x0) =>
                                         cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        b1 a2 __)
                                     b2) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eq_pairs A B
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      x b1)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a2 b2))
                                matita_basics_bool.true))))
                    (H0 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 _B : cic.Univ (cic.type cic.z) =>
                                 matita_basics_types.Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _A)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _B))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))))
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a2 b1)
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a2 b2)) =>
                     e00 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            (matita_basics_logic.R1
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a2
                               (x0 :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A) =>
                                p0 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I A1)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             A))
                                       a2 x0) =>
                                cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b1 a2
                               (matita_basics_logic.refl
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  a2))
                            b2) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B) =>
                        __ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               x b2) =>
                        cic.lift cic.prop cic.prop cic.I
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Prod
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) cic.I _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) cic.I _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a2 x)
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a2 b2))
                             (__1 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          _B : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I _A)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I _B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) cic.I
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) cic.I
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))))
                                     (matita_basics_types.mk_Prod
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a2 x)
                                     (matita_basics_types.mk_Prod
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a2 b2)) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eq_pairs A B
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a2 x)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a2 b2))
                                matita_basics_bool.true)))
                       (H1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    _B : cic.Univ (cic.type cic.z) =>
                                    matita_basics_types.Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _A)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _B))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))))
                               (matita_basics_types.mk_Prod
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a2 b2)
                               (matita_basics_types.mk_Prod
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a2 b2)) =>
                        matita_basics_logic.streicherK
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Prod
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.mk_Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a2 b2)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2 b2)
                                  (matita_basics_types.mk_Prod
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2 b2)) =>
                           cic.lift cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eq_pairs A B
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a2 b2)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a2 b2))
                                matita_basics_bool.true))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     x matita_basics_bool.true) =>
                              cic.lift cic.prop cic.prop cic.I
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       matita_basics_bool.bool)
                                      (matita_basics_deqsets.eqb B b2 b2)
                                      matita_basics_bool.false x)
                                   matita_basics_bool.true))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 __ :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        x matita_basics_bool.true) =>
                                 cic.lift cic.prop cic.prop cic.I
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (_0 :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          matita_basics_bool.bool)
                                         x matita_basics_bool.false
                                         matita_basics_bool.true)
                                      matita_basics_bool.true))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (__ :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       matita_basics_bool.bool)
                                      matita_basics_bool.true
                                      matita_basics_bool.false
                                      matita_basics_bool.true))
                                (matita_basics_deqsets.eqb B b2 b2)
                                (matita_basics_logic.proj2
                                   (cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A1)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (matita_basics_deqsets.eqb B b2 b2)
                                         matita_basics_bool.true)
                                      (__ :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (matita_basics_deqsets.eqb B b2
                                                 b2)
                                              matita_basics_bool.true) =>
                                       (A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A1)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         b2 b2))
                                   (cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A1)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         b2 b2)
                                      (__ :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              b2 b2) =>
                                       (A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A1)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (matita_basics_deqsets.eqb B b2 b2)
                                         matita_basics_bool.true))
                                   (matita_basics_deqsets.eqb_true B b2 b2)
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      b2)))
                             (matita_basics_deqsets.eqb A a2 a2)
                             (matita_basics_logic.proj2
                                (cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (matita_basics_deqsets.eqb A a2 a2)
                                      matita_basics_bool.true)
                                   (__ :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (matita_basics_deqsets.eqb A a2 a2)
                                           matita_basics_bool.true) =>
                                    (A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a2 a2))
                                (cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a2 a2)
                                   (__ :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           a2 a2) =>
                                    (A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (matita_basics_deqsets.eqb A a2 a2)
                                      matita_basics_bool.true))
                                (matita_basics_deqsets.eqb_true A a2 a2)
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a2)))
                          H1)
                       b1 e00 H0)
                    a1 e0 H)))
           _clearme0)
        _clearme.

def DeqProd :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.DeqSet)))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Prod
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))))
        (matita_basics_deqsets.eq_pairs A B)
        (matita_basics_deqsets.eq_pairs_true A B).

def hint2 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx)
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true))
           (b1 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_deqsets.mk_DeqSet
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      matita_basics_deqsets.beqb
                      matita_basics_deqsets.beqb_true)) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx)
                 (matita_basics_deqsets.mk_DeqSet
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    matita_basics_deqsets.beqb
                    matita_basics_deqsets.beqb_true))
              (b2 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_deqsets.mk_DeqSet
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         matita_basics_deqsets.beqb
                         matita_basics_deqsets.beqb_true)) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb
                       (matita_basics_deqsets.DeqProd
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_basics_bool.bool)
                             matita_basics_deqsets.beqb
                             matita_basics_deqsets.beqb_true)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_basics_bool.bool)
                             matita_basics_deqsets.beqb
                             matita_basics_deqsets.beqb_true))
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_deqsets.beqb
                                   matita_basics_deqsets.beqb_true)))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)
                          b1 matita_basics_bool.true)
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_deqsets.beqb
                                   matita_basics_deqsets.beqb_true)))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_deqsets.beqb
                                   matita_basics_deqsets.beqb_true)))
                          matita_basics_bool.false b2))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb
                            (matita_basics_deqsets.DeqProd
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_basics_bool.bool)
                                  matita_basics_deqsets.beqb
                                  matita_basics_deqsets.beqb_true)
                               (matita_basics_deqsets.mk_DeqSet
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_basics_bool.bool)
                                  matita_basics_deqsets.beqb
                                  matita_basics_deqsets.beqb_true))
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_basics_bool.bool)
                                        matita_basics_deqsets.beqb
                                        matita_basics_deqsets.beqb_true)))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_basics_bool.bool)
                               b1 matita_basics_bool.true)
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_basics_bool.bool)
                                        matita_basics_deqsets.beqb
                                        matita_basics_deqsets.beqb_true)))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.mk_DeqSet
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_basics_bool.bool)
                                        matita_basics_deqsets.beqb
                                        matita_basics_deqsets.beqb_true)))
                               matita_basics_bool.false b2))
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_deqsets.beqb
                                   matita_basics_deqsets.beqb_true)))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             (matita_basics_deqsets.mk_DeqSet
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_basics_bool.bool)
                                matita_basics_deqsets.beqb
                                matita_basics_deqsets.beqb_true)))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       b1 matita_basics_bool.true)
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             (matita_basics_deqsets.mk_DeqSet
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_basics_bool.bool)
                                matita_basics_deqsets.beqb
                                matita_basics_deqsets.beqb_true)))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false b2)))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (matita_basics_deqsets.eqb
                (matita_basics_deqsets.DeqProd
                   (matita_basics_deqsets.mk_DeqSet
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      matita_basics_deqsets.beqb
                      matita_basics_deqsets.beqb_true)
                   (matita_basics_deqsets.mk_DeqSet
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      matita_basics_deqsets.beqb
                      matita_basics_deqsets.beqb_true))
                (matita_basics_types.mk_Prod
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_basics_bool.bool)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_basics_bool.bool)
                   b1 matita_basics_bool.true)
                (matita_basics_types.mk_Prod
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_basics_bool.bool)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false b2))
             matita_basics_bool.true) =>
      matita_basics_logic.proj1
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb
                 (matita_basics_deqsets.DeqProd
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true)
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true))
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    b1 matita_basics_bool.true)
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false b2))
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb
                      (matita_basics_deqsets.DeqProd
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_basics_bool.bool)
                            matita_basics_deqsets.beqb
                            matita_basics_deqsets.beqb_true)
                         (matita_basics_deqsets.mk_DeqSet
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_basics_bool.bool)
                            matita_basics_deqsets.beqb
                            matita_basics_deqsets.beqb_true))
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         b1 matita_basics_bool.true)
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false b2))
                   matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_deqsets.DeqProd
                       (matita_basics_deqsets.mk_DeqSet
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)
                          matita_basics_deqsets.beqb
                          matita_basics_deqsets.beqb_true)
                       (matita_basics_deqsets.mk_DeqSet
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)
                          matita_basics_deqsets.beqb
                          matita_basics_deqsets.beqb_true))))
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 b1 matita_basics_bool.true)
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 matita_basics_bool.false b2)))
        (cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_deqsets.DeqProd
                       (matita_basics_deqsets.mk_DeqSet
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)
                          matita_basics_deqsets.beqb
                          matita_basics_deqsets.beqb_true)
                       (matita_basics_deqsets.mk_DeqSet
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_basics_bool.bool)
                          matita_basics_deqsets.beqb
                          matita_basics_deqsets.beqb_true))))
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 b1 matita_basics_bool.true)
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 matita_basics_bool.false b2))
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_deqsets.DeqProd
                            (matita_basics_deqsets.mk_DeqSet
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_basics_bool.bool)
                               matita_basics_deqsets.beqb
                               matita_basics_deqsets.beqb_true)
                            (matita_basics_deqsets.mk_DeqSet
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_basics_bool.bool)
                               matita_basics_deqsets.beqb
                               matita_basics_deqsets.beqb_true))))
                   (matita_basics_types.mk_Prod
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      b1 matita_basics_bool.true)
                   (matita_basics_types.mk_Prod
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false b2)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_deqsets.eqb
                 (matita_basics_deqsets.DeqProd
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true)
                    (matita_basics_deqsets.mk_DeqSet
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_basics_bool.bool)
                       matita_basics_deqsets.beqb
                       matita_basics_deqsets.beqb_true))
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    b1 matita_basics_bool.true)
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false b2))
              matita_basics_bool.true))
        (matita_basics_deqsets.eqb_true
           (matita_basics_deqsets.DeqProd
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true))
           (matita_basics_types.mk_Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_basics_bool.bool)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_basics_bool.bool)
              b1 matita_basics_bool.true)
           (matita_basics_types.mk_Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_basics_bool.bool)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_basics_bool.bool)
              matita_basics_bool.false b2))
        H.

def eq_sum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)))
                 (_p1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        _B : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.Sum
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _B))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (_p2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     matita_basics_bool.bool)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      p1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Sum
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      p2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Sum
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_types.match_Sum (cic.type cic.z)
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) B))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Sum
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         matita_basics_bool.bool)
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         matita_basics_types.match_Sum (cic.type cic.z)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Sum
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            matita_basics_bool.bool)
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_deqsets.eqb A a1 a2)
           (b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            matita_basics_bool.false)
           p2)
        (b1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         matita_basics_types.match_Sum (cic.type cic.z)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Sum
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            matita_basics_bool.bool)
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_bool.false)
           (b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            matita_basics_deqsets.eqb B b1 b2)
           p2)
        p1.

def eq_sum_true :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)))
                 (p1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        _B : cic.Univ (cic.type cic.z) =>
                        matita_basics_types.Sum
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _A)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             _B))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (p2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     (_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eq_sum A B p1 p2)
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    cic.I _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          p1 p2))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            _B : cic.Univ (cic.type cic.z) =>
            matita_basics_types.Sum
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_types.match_Sum cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) B))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Sum
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Sum
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           (p2 :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Sum
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_sum A B __ p2)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 __ p2)))
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         _clearme0 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Sum
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         matita_basics_types.match_Sum cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Sum
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_sum A B
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1)
                    __)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a1)
                 __))
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb A a1 a2)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb A a1 a2)
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Sum
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.inl
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a1)
                         (matita_basics_types.inl
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb A a1 a2)
                    matita_basics_bool.true))
              (eqa :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb A a1 a2)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 a2
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  __ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         x a2) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          x)
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a2)))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2))
                 a1
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb A a1 a2)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb A a1 a2)
                               matita_basics_bool.true) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1 a2))
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1 a2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a1 a2) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb A a1 a2)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true A a1 a2) eqa))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))
                      (matita_basics_types.inl
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a1)
                      (matita_basics_types.inl
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a2)) =>
               matita_basics_types.Sum_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a1)
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb A a1 a2)
                       matita_basics_bool.true))
                 (e0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (matita_basics_logic.R0
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         a2) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a2
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            x a2) =>
                     cic.lift cic.prop cic.prop cic.I
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                x)
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                a2))
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Sum
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))
                                  (matita_basics_types.inl
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     x)
                                  (matita_basics_types.inl
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a2)) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A x a2)
                             matita_basics_bool.true)))
                    (H0 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 _B : cic.Univ (cic.type cic.z) =>
                                 matita_basics_types.Sum
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _A)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _B))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))))
                            (matita_basics_types.inl
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a2)
                            (matita_basics_types.inl
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a2)) =>
                     matita_basics_logic.streicherK
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    _B : cic.Univ (cic.type cic.z) =>
                                    matita_basics_types.Sum
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _A)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _B))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))))
                               (matita_basics_types.inl
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a2)
                               (matita_basics_types.inl
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a2)) =>
                        cic.lift cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb A a2 a2)
                             matita_basics_bool.true))
                       (matita_basics_logic.proj2
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb A a2 a2)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb A a2 a2)
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a2 a2))
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a2 a2)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     a2 a2) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb A a2 a2)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true A a2 a2)
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a2))
                       H0)
                    a1 e0 H)))
           (b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1)
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a1)
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Sum
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.inl
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a1)
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_bool.bool_discr matita_basics_bool.false
                 matita_basics_bool.true H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a1)
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b2))))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))
                      (matita_basics_types.inl
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a1)
                      (matita_basics_types.inr
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b2)) =>
               matita_basics_types.Sum_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a1)
                 (matita_basics_types.inr
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.true))))
           _clearme0)
        (b1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         _clearme0 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Sum
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         matita_basics_types.match_Sum cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (__ :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Sum
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_deqsets.eq_sum A B
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b1)
                    __)
                 matita_basics_bool.true)
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (matita_basics_types.inr
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b1)
                 __))
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b1)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b1)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Sum
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b1)
                         (matita_basics_types.inl
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_bool.bool_discr matita_basics_bool.false
                 matita_basics_bool.true H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b1)
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          a2))))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))
                      (matita_basics_types.inr
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b1)
                      (matita_basics_types.inl
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a2)) =>
               matita_basics_types.Sum_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.inr
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b1)
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.true))))
           (b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            matita_basics_logic.conj
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb B b1 b2)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb B b1 b2)
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b1)
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2)))
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b1)
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2))
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Sum
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b1)
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b2)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb B b1 b2)
                    matita_basics_bool.true))
              (eqb :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb B b1 b2)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 b2
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B) =>
                  __ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         x b2) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          x)
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b2)))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                              _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2))
                 b1
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb B b1 b2)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb B b1 b2)
                               matita_basics_bool.true) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b1 b2))
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b1 b2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b1 b2) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb B b1 b2)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true B b1 b2) eqb))
              (H :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Sum
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))
                      (matita_basics_types.inr
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b1)
                      (matita_basics_types.inr
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b2)) =>
               matita_basics_types.Sum_discr
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.inr
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b1)
                 (matita_basics_types.inr
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b2)
                 H
                 (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb B b1 b2)
                       matita_basics_bool.true))
                 (e0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         (matita_basics_logic.R0
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b1)
                         b2) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b2
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            x b2) =>
                     cic.lift cic.prop cic.prop cic.I
                       (cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.inr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                x)
                             (matita_basics_types.inr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                b2))
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Sum
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))
                                  (matita_basics_types.inr
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     x)
                                  (matita_basics_types.inr
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     b2)) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb B x b2)
                             matita_basics_bool.true)))
                    (H0 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 _B : cic.Univ (cic.type cic.z) =>
                                 matita_basics_types.Sum
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _A)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I _B))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))))
                            (matita_basics_types.inr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b2)
                            (matita_basics_types.inr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b2)) =>
                     matita_basics_logic.streicherK
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 cic.I _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b2)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    _B : cic.Univ (cic.type cic.z) =>
                                    matita_basics_types.Sum
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _A)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I _B))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))))
                               (matita_basics_types.inr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  b2)
                               (matita_basics_types.inr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  b2)) =>
                        cic.lift cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb B b2 b2)
                             matita_basics_bool.true))
                       (matita_basics_logic.proj2
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B b2 b2)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb B b2 b2)
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                b2 b2))
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                b2 b2)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     b2 b2) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B b2 b2)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true B b2 b2)
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             b2))
                       H0)
                    b1 e0 H)))
           _clearme0)
        _clearme.

def DeqSum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
              (_B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.DeqSet)))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Sum
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))))
        (matita_basics_deqsets.eq_sum A B)
        (matita_basics_deqsets.eq_sum_true A B).

def eq_sigma :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((A1 : cic.Univ (cic.type cic.z) =>
                   _f :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A1
                          (__ : cic.Term (cic.type cic.z) A1 =>
                           cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                   matita_basics_types.Sig
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((__ :
                           cic.Term (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A) =>
                         P __) x)))
                 (_p1 :
                    cic.Term (cic.type cic.z)
                      ((A1 : cic.Univ (cic.type cic.z) =>
                        _f :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I A1
                               (__ : cic.Term (cic.type cic.z) A1 =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                        matita_basics_types.Sig
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             A1)
                          _f)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          cic.lift cic.prop cic.prop cic.I
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              P __) x))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    ((A1 : cic.Univ (cic.type cic.z) =>
                      _f :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A1
                             (__ : cic.Term (cic.type cic.z) A1 =>
                              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                      matita_basics_types.Sig
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1)
                        _f)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((__ :
                              cic.Term (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A) =>
                            P __) x)))
                    (_p2 :
                       cic.Term (cic.type cic.z)
                         ((A1 : cic.Univ (cic.type cic.z) =>
                           _f :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I A1
                                  (__ : cic.Term (cic.type cic.z) A1 =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                           matita_basics_types.Sig
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I A1)
                             _f)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (x :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A) =>
                             cic.lift cic.prop cic.prop cic.I
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A) =>
                                 P __) x))) =>
                     matita_basics_bool.bool)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      p1 :
        cic.Term (cic.type cic.z)
          ((A1 : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I A1
                   (__ : cic.Term (cic.type cic.z) A1 =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            matita_basics_types.Sig
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              cic.lift cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  P __) x))) =>
      p2 :
        cic.Term (cic.type cic.z)
          ((A1 : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I A1
                   (__ : cic.Term (cic.type cic.z) A1 =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            matita_basics_types.Sig
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              cic.lift cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  P __) x))) =>
      matita_basics_types.match_Sig (cic.type cic.z)
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         cic.lift cic.prop cic.prop cic.I
           ((__ :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A) =>
             P __) x))
        (__ :
           cic.Term (cic.type cic.z)
             ((A1 : cic.Univ (cic.type cic.z) =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A1
                      (__ : cic.Term (cic.type cic.z) A1 =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               matita_basics_types.Sig
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (x :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) A) =>
                 cic.lift cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     P __) x))) =>
         matita_basics_bool.bool)
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         h1 :
           cic.Term cic.prop
             ((__ :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               P __) a1) =>
         matita_basics_types.match_Sig (cic.type cic.z)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (x :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            cic.lift cic.prop cic.prop cic.I
              ((__ :
                  cic.Term (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A) =>
                P __) x))
           (__ :
              cic.Term (cic.type cic.z)
                ((A1 : cic.Univ (cic.type cic.z) =>
                  _f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A1
                         (__ : cic.Term (cic.type cic.z) A1 =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                  matita_basics_types.Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (x :
                      cic.Term (cic.type cic.z)
                        ((_xxx :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          matita_basics_deqsets.carr _xxx) A) =>
                    cic.lift cic.prop cic.prop cic.I
                      ((__ :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A) =>
                        P __) x))) =>
            matita_basics_bool.bool)
           (a2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            h2 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  P __) a2) =>
            matita_basics_deqsets.eqb A a1 a2)
           p2)
        p1.

eq_sigma_true :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
       matita_basics_deqsets.DeqSet
       (A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
        cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (P :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                  cic.I
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A)
                  (__ :
                     cic.Term (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A) =>
                   cic.univ cic.prop (cic.type cic.z) cic.I)) =>
           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             ((A1 : cic.Univ (cic.type cic.z) =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A1
                      (__ : cic.Term (cic.type cic.z) A1 =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               matita_basics_types.Sig
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (x :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) A) =>
                 cic.lift cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     P __) x)))
             (p1 :
                cic.Term (cic.type cic.z)
                  ((A1 : cic.Univ (cic.type cic.z) =>
                    _f :
                      cic.Term (cic.type cic.z)
                        (cic.prod (cic.type cic.z) (cic.type cic.z)
                           (cic.type cic.z) cic.I A1
                           (__ : cic.Term (cic.type cic.z) A1 =>
                            cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                    matita_basics_types.Sig
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1)
                      _f)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                        ((_xxx :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          matita_basics_deqsets.carr _xxx) A))
                     (x :
                        cic.Term (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A) =>
                      cic.lift cic.prop cic.prop cic.I
                        ((__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          P __) x))) =>
              cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                ((A1 : cic.Univ (cic.type cic.z) =>
                  _f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A1
                         (__ : cic.Term (cic.type cic.z) A1 =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                  matita_basics_types.Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))
                   (x :
                      cic.Term (cic.type cic.z)
                        ((_xxx :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          matita_basics_deqsets.carr _xxx) A) =>
                    cic.lift cic.prop cic.prop cic.I
                      ((__ :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A) =>
                        P __) x)))
                (p2 :
                   cic.Term (cic.type cic.z)
                     ((A1 : cic.Univ (cic.type cic.z) =>
                       _f :
                         cic.Term (cic.type cic.z)
                           (cic.prod (cic.type cic.z) (cic.type cic.z)
                              (cic.type cic.z) cic.I A1
                              (__ : cic.Term (cic.type cic.z) A1 =>
                               cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                       matita_basics_types.Sig
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1)
                         _f)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A))
                        (x :
                           cic.Term (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A) =>
                         cic.lift cic.prop cic.prop cic.I
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A) =>
                             P __) x))) =>
                 (_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eq_sigma A
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          cic.lift cic.prop cic.prop cic.I (P __))
                         p1 p2)
                      matita_basics_bool.true)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((A1 : cic.Univ (cic.type cic.z) =>
                           _f :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z)
                                  (cic.type cic.z) cic.I A1
                                  (__ : cic.Term (cic.type cic.z) A1 =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                           matita_basics_types.Sig
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I A1)
                             _f)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (x :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A) =>
                             cic.lift cic.prop cic.prop cic.I
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A) =>
                                 P __) x))))
                      p1 p2)))))).

def DeqSig :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (_P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               matita_basics_deqsets.DeqSet)))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           ((A1 : cic.Univ (cic.type cic.z) =>
             _f :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A1
                    (__ : cic.Term (cic.type cic.z) A1 =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)) =>
             matita_basics_types.Sig
               (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A1) _f)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               cic.lift cic.prop cic.prop cic.I
                 ((__ :
                     cic.Term (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A) =>
                   P __) x))))
        (matita_basics_deqsets.eq_sigma A
           (__ :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            cic.lift cic.prop cic.prop cic.I (P __)))
        (matita_basics_deqsets.eq_sigma_true A
           (__ :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            cic.lift cic.prop cic.prop cic.I (P __))).


