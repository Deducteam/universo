(; This file was automatically generated from Matita. ;)

def exp :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat
              (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat))).

def exp_body :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat
              (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat))).

[ __, __1 ] exp __ __1 -->
  matita_arithmetics_nat.filter_nat (cic.type cic.z)
    (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    (matita_arithmetics_exp.exp_body __) __1.

[ __, __1 ] exp_body __ __1 -->
  matita_arithmetics_nat.match_nat (cic.type cic.z)
    (__2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
    (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.times (matita_arithmetics_exp.exp __ p) __)
    __1.

def exp_plus_times :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp n
                       (matita_arithmetics_nat.plus p q))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n p)
                       (matita_arithmetics_exp.exp n q))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.plus _x_365 q))
              (matita_arithmetics_nat.times
                 (matita_arithmetics_exp.exp n _x_365)
                 (matita_arithmetics_exp.exp n q))))
        (matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus matita_arithmetics_nat.O
              (matita_arithmetics_exp.exp n q))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_exp.exp n q) x))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp n q)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp n q) x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_exp.exp n q))
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                 (matita_arithmetics_exp.exp n q))
              (matita_arithmetics_nat.plus_O_n
                 (matita_arithmetics_exp.exp n q)))
           (matita_arithmetics_nat.plus (matita_arithmetics_exp.exp n q)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.commutative_plus
              (matita_arithmetics_exp.exp n q) matita_arithmetics_nat.O))
        (x_366 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_exp.exp n
                   (matita_arithmetics_nat.plus x_366 q))
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp n x_366)
                   (matita_arithmetics_exp.exp n q))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus q x_366)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp n x) n)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n x_366) n)
                    (matita_arithmetics_exp.exp n q))))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n q)
                 (matita_arithmetics_exp.exp n x_366))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times x n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n x_366) n)
                       (matita_arithmetics_exp.exp n q))))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n q)
                       (matita_arithmetics_exp.exp n x_366)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp n x_366) n)
                          (matita_arithmetics_exp.exp n q))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_exp.exp n x_366))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp n q)
                                (matita_arithmetics_exp.exp n x_366)))
                          (matita_arithmetics_nat.times x
                             (matita_arithmetics_exp.exp n q))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n q)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_exp.exp n x_366)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_exp.exp n q)
                                   (matita_arithmetics_exp.exp n x_366)))
                             x))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp n q)
                                (matita_arithmetics_exp.exp n x_366)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_exp.exp n q)
                                      (matita_arithmetics_exp.exp n x_366)))
                                x))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_exp.exp n q)
                                   (matita_arithmetics_exp.exp n x_366))))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp n q)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_exp.exp n x_366)))
                          (matita_arithmetics_nat.times_times
                             (matita_arithmetics_exp.exp n q) n
                             (matita_arithmetics_exp.exp n x_366)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_exp.exp n x_366))
                          (matita_arithmetics_exp.exp n q))
                       (matita_arithmetics_nat.commutative_times
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_exp.exp n x_366))
                          (matita_arithmetics_exp.exp n q)))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n x_366) n)
                    (matita_arithmetics_nat.commutative_times
                       (matita_arithmetics_exp.exp n x_366) n))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n q)
                       (matita_arithmetics_exp.exp n x_366))
                    n)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n q)
                       (matita_arithmetics_exp.exp n x_366))
                    n))
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.plus q x_366))
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp n x_366)
                    (matita_arithmetics_exp.exp n q))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp n
                          (matita_arithmetics_nat.plus q x_366))
                       x))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x_366 q)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_exp.exp n x)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp n x_366)
                             (matita_arithmetics_exp.exp n q))))
                    _x_368 (matita_arithmetics_nat.plus q x_366)
                    (matita_arithmetics_nat.commutative_plus x_366 q))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp n q)
                    (matita_arithmetics_exp.exp n x_366))
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_exp.exp n x_366)
                    (matita_arithmetics_exp.exp n q))))
           (matita_arithmetics_nat.plus x_366 q)
           (matita_arithmetics_nat.commutative_plus x_366 q))
        p.

def exp_n_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_exp.exp n matita_arithmetics_nat.O)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O).

def exp_n_1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              n
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        n
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              n x))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           n)
        (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
        (matita_arithmetics_nat.plus_n_O n).

def exp_1_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_exp.exp
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_exp.exp
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) _x_365)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (x_366 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                (matita_arithmetics_exp.exp
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) x_366)) =>
         matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.times x
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times_n_1
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           (matita_arithmetics_exp.exp
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) x_366)
           _x_368)
        n.

def exp_2 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_arithmetics_nat.times n n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        n
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times x n)
              (matita_arithmetics_nat.times n n)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times n n))
        (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
        (matita_arithmetics_nat.plus_n_O n).

def exp_exp_times :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_exp.exp n p) q)
                    (matita_arithmetics_exp.exp n
                       (matita_arithmetics_nat.times p q))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp (matita_arithmetics_exp.exp n p)
                 _x_365)
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.times p _x_365))))
        (matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            cic.lift cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_exp.exp n x_1)))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_nat.times p matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_n_O p))
        (x_366 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_exp.exp (matita_arithmetics_exp.exp n p)
                   x_366)
                (matita_arithmetics_exp.exp n
                   (matita_arithmetics_nat.times p x_366))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n p)
              (matita_arithmetics_exp.exp (matita_arithmetics_exp.exp n p)
                 x_366))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_exp.exp n
                    (matita_arithmetics_nat.times p
                       (matita_arithmetics_nat.S x_366)))))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus p
                 (matita_arithmetics_nat.times p x_366))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n p)
                       (matita_arithmetics_exp.exp
                          (matita_arithmetics_exp.exp n p) x_366))
                    (matita_arithmetics_exp.exp n x)))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp n p)
                    (matita_arithmetics_exp.exp n
                       (matita_arithmetics_nat.times p x_366)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n p)
                          (matita_arithmetics_exp.exp
                             (matita_arithmetics_exp.exp n p) x_366))
                       x))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_exp.exp n p) x_366)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp n p)
                             (matita_arithmetics_exp.exp
                                (matita_arithmetics_exp.exp n p) x_366))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp n p) x)))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n p)
                          (matita_arithmetics_exp.exp
                             (matita_arithmetics_exp.exp n p) x_366)))
                    (matita_arithmetics_exp.exp n
                       (matita_arithmetics_nat.times p x_366))
                    _x_368)
                 (matita_arithmetics_exp.exp n
                    (matita_arithmetics_nat.plus p
                       (matita_arithmetics_nat.times p x_366)))
                 (matita_arithmetics_exp.exp_plus_times n p
                    (matita_arithmetics_nat.times p x_366)))
              (matita_arithmetics_nat.times p
                 (matita_arithmetics_nat.S x_366))
              (matita_arithmetics_nat.times_n_Sm p x_366))
           (matita_arithmetics_nat.times
              (matita_arithmetics_exp.exp (matita_arithmetics_exp.exp n p)
                 x_366)
              (matita_arithmetics_exp.exp n p))
           (matita_arithmetics_nat.commutative_times
              (matita_arithmetics_exp.exp (matita_arithmetics_exp.exp n p)
                 x_366)
              (matita_arithmetics_exp.exp n p)))
        q.

def lt_O_exp :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  (__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    matita_arithmetics_nat.O (matita_arithmetics_exp.exp n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O n) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O
                 (matita_arithmetics_exp.exp n _x_365))))
        (auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop cic.prop cic.I
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                (__ :
                   cic.Term cic.prop
                     ((_n :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.le _n __)
                        (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   (matita_arithmetics_exp.exp n a))) =>
         posn :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         matita_arithmetics_nat.le_times
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_exp.exp n a)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n (Hind posn)
           posn)
        m.

def lt_m_exp_nm :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n) =>
                  (__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2) m
                    (matita_arithmetics_exp.exp n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) _x_365
              (matita_arithmetics_exp.exp n _x_365)))
        (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n0)
                (matita_arithmetics_exp.exp n n0)) =>
         matita_arithmetics_nat.transitive_le
           (matita_arithmetics_nat.S (matita_arithmetics_nat.S n0))
           (matita_arithmetics_nat.times (matita_arithmetics_nat.S n0)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n n0) n)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S n0))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S n0)
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.S n0))))
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S n0))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
              (matita_arithmetics_nat.lt_plus_Sn_r
                 (matita_arithmetics_nat.S n0) matita_arithmetics_nat.O n0)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0)
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S n0)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S n0))
                             x))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S n0))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S n0)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)))))))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S n0)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S n0))
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S n0)
                                   (matita_arithmetics_nat.plus
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_nat.S n0)))))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S n0))
                                x))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S n0)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S n0)
                             matita_arithmetics_nat.O))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S n0))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S n0)
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.S n0)))))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S n0))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S n0) x)))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.S n0))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I))
                                (cic.lift cic.prop (cic.type cic.z) cic.I
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S n0))
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.S n0)
                                         (matita_arithmetics_nat.plus
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_nat.S n0)))))
                                (cic.lift cic.prop (cic.type cic.z) cic.I
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S n0))
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.S n0)
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.S n0) x))))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S n0))
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.S n0)
                                            (matita_arithmetics_nat.plus
                                               matita_arithmetics_nat.O
                                               (matita_arithmetics_nat.S n0)))))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S n0))
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.S n0)
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.S n0)
                                               x))))))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.S n0))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            (matita_arithmetics_nat.S
                                               (matita_arithmetics_nat.S n0))
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.S n0)
                                               (matita_arithmetics_nat.plus
                                                  matita_arithmetics_nat.O
                                                  (matita_arithmetics_nat.S
                                                     n0)))))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            (matita_arithmetics_nat.S
                                               (matita_arithmetics_nat.S n0))
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.S n0)
                                               x)))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S n0)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S
                                                  (matita_arithmetics_nat.S
                                                     n0))
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.S
                                                     n0)
                                                  (matita_arithmetics_nat.plus
                                                     matita_arithmetics_nat.O
                                                     (matita_arithmetics_nat.S
                                                        n0)))))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S
                                                  (matita_arithmetics_nat.S
                                                     n0))
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.S
                                                     n0)
                                                  x)))))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S n0)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               (cic.univ (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((_n :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.le _n
                                                   __)
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        n0))
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.S
                                                        n0)
                                                     x)))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((_n :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.le _n
                                                   __)
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        n0))
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.S
                                                        n0)
                                                     (matita_arithmetics_nat.S
                                                        n0))))))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S
                                                  (matita_arithmetics_nat.S
                                                     n0))
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.S
                                                     n0)
                                                  (matita_arithmetics_nat.S
                                                     n0)))))
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.S n0))
                                      (matita_arithmetics_nat.plus_O_n
                                         (matita_arithmetics_nat.S n0)))
                                   (matita_arithmetics_nat.plus
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_nat.S n0))
                                   (matita_arithmetics_nat.plus_O_n
                                      (matita_arithmetics_nat.S n0)))
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S n0)
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.commutative_plus
                                   (matita_arithmetics_nat.S n0)
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O
                                (matita_arithmetics_nat.S n0))
                             (matita_arithmetics_nat.times_O_n
                                (matita_arithmetics_nat.S n0)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S n0)
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_nat.S n0)
                             matita_arithmetics_nat.O))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S n0)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_arithmetics_nat.times_n_Sm
                          (matita_arithmetics_nat.S n0)
                          matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (matita_arithmetics_nat.times_n_Sm
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S n0) matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.S n0))
                 (matita_arithmetics_nat.associative_plus
                    (matita_arithmetics_nat.S n0) matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S n0))))
           (matita_arithmetics_nat.le_times (matita_arithmetics_nat.S n0)
              (matita_arithmetics_exp.exp n n0)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              n Hind lt1n))
        m.

def exp_to_eq_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp n m)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_exp.exp n m)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       m matita_arithmetics_nat.O)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltin :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      eq1 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_arithmetics_nat.nat)
             (matita_arithmetics_exp.exp n m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_arithmetics_nat.le_to_le_to_eq m matita_arithmetics_nat.O
        (matita_arithmetics_nat.le_S_S_to_le m matita_arithmetics_nat.O
           (matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp n m)
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_exp.exp n m) x_1) =>
               cic.lift cic.prop cic.prop cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S m) x_1))
              (matita_arithmetics_exp.lt_m_exp_nm n m ltin)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) eq1))
        (matita_arithmetics_nat.le_O_n m).

def let_clause_1258 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)
              (lt1b :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp b n) b)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_exp.exp b n) b)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times b
                          (matita_arithmetics_exp.exp b n))
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))
      :=
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1b :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times (matita_arithmetics_exp.exp b n) b)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times (matita_arithmetics_exp.exp b n) b)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              x (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        H (matita_arithmetics_nat.times b (matita_arithmetics_exp.exp b n))
        (matita_arithmetics_nat.commutative_times
           (matita_arithmetics_exp.exp b n) b).

def injective_exp_r :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) =>
               (A : cic.Univ (cic.type cic.z) =>
                B : cic.Univ (cic.type cic.z) =>
                _f :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__1 : cic.Term (cic.type cic.z) A => B)) =>
                matita_basics_relations.injective
                  (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A)
                  (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I B) _f)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp b i))))
      :=
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1b :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) =>
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_exp.exp b __)
                 (matita_arithmetics_exp.exp b _0))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_exp.exp b __)
                      (matita_arithmetics_exp.exp b _0)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 __ _0)))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                (matita_arithmetics_exp.exp b n)) =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           n matita_arithmetics_nat.O
           (matita_arithmetics_exp.exp_to_eq_O b n lt1b
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_exp.exp b n)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp b n) x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp b n))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) H)))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp b n) b)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n) matita_arithmetics_nat.O))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp b n) b)
                 (x_1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_exp.exp b n) b)
                         x_1) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       x_1))
                 (matita_arithmetics_nat.lt_to_le_to_lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp b n) b)
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             b))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                b)))
                       lt1b
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times b
                             (matita_arithmetics_exp.exp b n))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I))
                                (cic.lift cic.prop (cic.type cic.z) cic.I
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) x b))
                                (cic.lift cic.prop (cic.type cic.z) cic.I
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         b)))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times b
                                (matita_arithmetics_exp.exp b n))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1)
                                         (matita_arithmetics_nat.times b
                                            (matita_arithmetics_exp.exp b n))
                                         b))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) x
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            b)))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times b
                                   (matita_arithmetics_exp.exp b n))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            (matita_arithmetics_nat.times b
                                               (matita_arithmetics_exp.exp b
                                                  n))
                                            b))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            (matita_arithmetics_nat.times b
                                               (matita_arithmetics_exp.exp b
                                                  n))
                                            (matita_arithmetics_nat.times x b)))))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times b
                                      (matita_arithmetics_nat.times b
                                         (matita_arithmetics_exp.exp b n)))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               (matita_arithmetics_nat.times
                                                  b
                                                  (matita_arithmetics_exp.exp
                                                     b n))
                                               b))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               (matita_arithmetics_nat.times
                                                  b
                                                  (matita_arithmetics_exp.exp
                                                     b n))
                                               x))))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      b
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               (cic.univ (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  (matita_arithmetics_nat.times
                                                     b
                                                     (matita_arithmetics_exp.exp
                                                        b n))
                                                  b))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  (matita_arithmetics_nat.times
                                                     b
                                                     (matita_arithmetics_exp.exp
                                                        b n))
                                                  x))))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               (matita_arithmetics_nat.times
                                                  b
                                                  (matita_arithmetics_exp.exp
                                                     b n))
                                               b)))
                                      (matita_arithmetics_nat.times b
                                         (matita_arithmetics_nat.times b
                                            (matita_arithmetics_exp.exp b n)))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               b
                                               (matita_arithmetics_nat.times
                                                  b x)))
                                         (matita_arithmetics_nat.times_n_1 b)
                                         (matita_arithmetics_nat.times b
                                            (matita_arithmetics_exp.exp b n))
                                         (matita_arithmetics_exp.let_clause_1258
                                            b lt1b n H)))
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_nat.times b
                                         (matita_arithmetics_exp.exp b n))
                                      b)
                                   (matita_arithmetics_nat.commutative_times
                                      (matita_arithmetics_nat.times b
                                         (matita_arithmetics_exp.exp b n))
                                      b))
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_exp.let_clause_1258 b
                                   lt1b n H))
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_exp.let_clause_1258 b lt1b n
                                H))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          (matita_arithmetics_exp.let_clause_1258 b lt1b n H)))
                    (matita_arithmetics_nat.le_times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       (matita_arithmetics_exp.exp b n) b b
                       (matita_arithmetics_exp.lt_O_exp b n
                          (matita_arithmetics_nat.lt_S_to_lt
                             matita_arithmetics_nat.O b lt1b))
                       (matita_arithmetics_nat.le_n b)))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) H)
              (matita_arithmetics_nat.not_le_Sn_n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop cic.prop cic.I
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_exp.exp b n)
                   (matita_arithmetics_exp.exp b m))
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z))) cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_exp.exp b n)
                        (matita_arithmetics_exp.exp b m)) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   n m)) =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp b n) b)
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp b m) b)) =>
         matita_basics_logic.eq_f
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.S n m
           (Hind
              (matita_arithmetics_div_and_mod.injective_times_l b
                 (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O
                    b lt1b)
                 (matita_arithmetics_exp.exp b n)
                 (matita_arithmetics_exp.exp b m) H))).

def le_exp :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O p)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O p) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1) n m)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1) n m) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2)
                          (matita_arithmetics_exp.exp p n)
                          (matita_arithmetics_exp.exp p m)))))))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    matita_arithmetics_nat.O p)
                 (__1 :
                    cic.Term cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         matita_arithmetics_nat.O p) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __2) __ _0)
                    (__2 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __2) __ _0) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __3 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __3)
                       (matita_arithmetics_exp.exp p __)
                       (matita_arithmetics_exp.exp p _0))))))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltm :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
         len :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O n) =>
         matita_arithmetics_exp.lt_O_exp m n ltm)
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
         len :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1) (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_exp.exp m (matita_arithmetics_nat.S n))
                 (matita_arithmetics_exp.exp m matita_arithmetics_nat.O)))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)
              len (matita_arithmetics_nat.not_le_Sn_O n)))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O p)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1)
                           matita_arithmetics_nat.O p) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __1) n m)
                      (__1 :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.le _n __1) n m) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2)
                         (matita_arithmetics_exp.exp p n)
                         (matita_arithmetics_exp.exp p m))))) =>
         p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         posp :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O p) =>
         lenm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         matita_arithmetics_nat.le_times (matita_arithmetics_exp.exp p n)
           (matita_arithmetics_exp.exp p m) p p
           (Hind p posp
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z) cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __)
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))))
                 (cic.lift cic.prop (cic.type cic.z) cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n m))
                 (matita_arithmetics_nat.monotonic_pred
                    (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)
                    lenm)
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) x
                                (matita_arithmetics_nat.pred
                                   (matita_arithmetics_nat.S m))))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) n m))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) n x))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) n m))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) n m)))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.pred_Sn m))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.pred_Sn n))))
           (matita_arithmetics_nat.le_n p)).

def le_exp1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O a)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O a) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1) n m)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1) n m) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2)
                          (matita_arithmetics_exp.exp n a)
                          (matita_arithmetics_exp.exp m a)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posa :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O a) =>
      lenm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) n m) =>
      matita_arithmetics_nat.le_ind
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (x_417 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) x_417) =>
         cic.lift cic.prop cic.prop cic.I
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_exp.exp n x_417)
              (matita_arithmetics_exp.exp m x_417)))
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop (cic.type cic.z) cic.I
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) n m))
           (cic.lift cic.prop (cic.type cic.z) cic.I
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_exp.exp n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_exp.exp m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           lenm
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              n
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) n m))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) x
                          (matita_arithmetics_exp.exp m
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 m
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) n m))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) n x))))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) n m)))
                 (matita_arithmetics_exp.exp m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_exp.exp_n_1 m))
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_exp.exp_n_1 n)))
        (a0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         posa0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) a0) =>
         Hind :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_exp.exp n a0)
                (matita_arithmetics_exp.exp m a0)) =>
         matita_arithmetics_nat.le_times (matita_arithmetics_exp.exp n a0)
           (matita_arithmetics_exp.exp m a0) n m Hind lenm)
        a posa.

def lt_exp :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            p) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) n m)
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) n m) =>
                        (__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3)
                          (matita_arithmetics_exp.exp p n)
                          (matita_arithmetics_exp.exp p m)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1p :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) =>
      ltnm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) n m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp p n)
           (matita_arithmetics_exp.exp p m))
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_exp.exp p n)
                   (matita_arithmetics_exp.exp p m))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_exp.exp p n)
                   (matita_arithmetics_exp.exp p m))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) (matita_arithmetics_exp.exp p n)
           (matita_arithmetics_exp.exp p m))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_exp.exp p n)
                (matita_arithmetics_exp.exp p m)) =>
         auto)
        (eqexp :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_exp.exp p n)
                (matita_arithmetics_exp.exp p m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_exp.exp p n)
                 (matita_arithmetics_exp.exp p m)))
           (matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 n m)
              (matita_arithmetics_exp.injective_exp_r p lt1p n m
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp p m)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          x (matita_arithmetics_exp.exp p m)))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp p m))
                    (matita_arithmetics_exp.exp p n) eqexp))
              (matita_arithmetics_nat.lt_to_not_eq n m ltnm)))
        (matita_arithmetics_nat.le_to_or_lt_eq
           (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m)
           (matita_arithmetics_exp.le_exp n m p
              (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O p
                 lt1p)
              (matita_arithmetics_nat.lt_to_le n m ltnm))).

def lt_exp1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O p)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O p) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) n m)
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) n m) =>
                        (__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3)
                          (matita_arithmetics_exp.exp n p)
                          (matita_arithmetics_exp.exp m p)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posp :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O p) =>
      ltnm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) n m) =>
      matita_arithmetics_nat.le_ind
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (x_417 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) x_417) =>
         cic.lift cic.prop cic.prop cic.I
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1)
              (matita_arithmetics_exp.exp n x_417)
              (matita_arithmetics_exp.exp m x_417)))
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop (cic.type cic.z) cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) n m))
           (cic.lift cic.prop (cic.type cic.z) cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_exp.exp n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_exp.exp m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           ltnm
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              n
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) n m))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x
                          (matita_arithmetics_exp.exp m
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 m
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) n m))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) n x))))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) n m)))
                 (matita_arithmetics_exp.exp m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_exp.exp_n_1 m))
              (matita_arithmetics_exp.exp n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_exp.exp_n_1 n)))
        (p0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         posp0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) p0) =>
         Hind :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_exp.exp n p0)
                (matita_arithmetics_exp.exp m p0)) =>
         matita_arithmetics_nat.lt_times (matita_arithmetics_exp.exp n p0)
           (matita_arithmetics_exp.exp m p0) n m Hind ltnm)
        p posp.

def le_exp_to_le :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            b) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_exp.exp b n)
                          (matita_arithmetics_exp.exp b m))
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1)
                               (matita_arithmetics_exp.exp b n)
                               (matita_arithmetics_exp.exp b m)) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2) n m))))))
      :=
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1b :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) =>
      leexp :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) (matita_arithmetics_exp.exp b n)
             (matita_arithmetics_exp.exp b m)) =>
      matita_basics_logic.match_Or cic.prop (matita_arithmetics_nat.le n m)
        (matita_basics_logic.Not (matita_arithmetics_nat.le n m))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) n m)
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) n m))) =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.le _n __1) n m)
        (auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) n m) =>
         auto)
        (notle :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) n m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) n m))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_exp.exp b n)
                 (matita_arithmetics_exp.exp b m))
              leexp
              (matita_arithmetics_nat.lt_to_not_le
                 (matita_arithmetics_exp.exp b m)
                 (matita_arithmetics_exp.exp b n)
                 (matita_arithmetics_exp.lt_exp m n b lt1b
                    (matita_arithmetics_nat.not_le_to_lt n m notle)))))
        (matita_arithmetics_nat.decidable_le n m).

def le_exp_to_le1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O p)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O p) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_exp.exp n p)
                          (matita_arithmetics_exp.exp m p))
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1)
                               (matita_arithmetics_exp.exp n p)
                               (matita_arithmetics_exp.exp m p)) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2) n m))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posp :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O p) =>
      leexp :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) (matita_arithmetics_exp.exp n p)
             (matita_arithmetics_exp.exp m p)) =>
      matita_arithmetics_nat.not_lt_to_le m n
        (matita_basics_logic.not_to_not
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) m n)
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1)
              (matita_arithmetics_exp.exp m p)
              (matita_arithmetics_exp.exp n p))
           (matita_arithmetics_exp.lt_exp1 m n p posp)
           (matita_arithmetics_nat.le_to_not_lt
              (matita_arithmetics_exp.exp n p)
              (matita_arithmetics_exp.exp m p) leexp)).

def lt_exp_to_lt :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O a)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O a) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2)
                          (matita_arithmetics_exp.exp a n)
                          (matita_arithmetics_exp.exp a m))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               (matita_arithmetics_exp.exp a n)
                               (matita_arithmetics_exp.exp a m)) =>
                        (__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3) n m))))))
      :=
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1a :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O a) =>
      ltexp :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_exp.exp a n)
             (matita_arithmetics_exp.exp a m)) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m)
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S n) m)
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __)
                      (matita_arithmetics_nat.S n) m))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) n m)
        (auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                m) =>
         auto)
        (H :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S n) m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) n m))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_exp.exp a n)
                 (matita_arithmetics_exp.exp a m))
              ltexp
              (matita_arithmetics_nat.le_to_not_lt
                 (matita_arithmetics_exp.exp a m)
                 (matita_arithmetics_exp.exp a n)
                 (matita_arithmetics_exp.le_exp m n a lt1a
                    (matita_arithmetics_nat.not_lt_to_le n m H)))))
        (matita_arithmetics_nat.decidable_le (matita_arithmetics_nat.S n) m).

def lt_exp_to_lt1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O a)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O a) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2)
                          (matita_arithmetics_exp.exp n a)
                          (matita_arithmetics_exp.exp m a))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               (matita_arithmetics_exp.exp n a)
                               (matita_arithmetics_exp.exp m a)) =>
                        (__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3) n m))))))
      :=
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posa :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O a) =>
      ltexp :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_exp.exp n a)
             (matita_arithmetics_exp.exp m a)) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m)
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S n) m)
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __)
                      (matita_arithmetics_nat.S n) m))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) n m)
        (auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                m) =>
         auto)
        (H :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S n) m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop cic.I
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) n m))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_exp.exp n a)
                 (matita_arithmetics_exp.exp m a))
              ltexp
              (matita_arithmetics_nat.le_to_not_lt
                 (matita_arithmetics_exp.exp m a)
                 (matita_arithmetics_exp.exp n a)
                 (matita_arithmetics_exp.le_exp1 m n a posa
                    (matita_arithmetics_nat.not_lt_to_le n m H)))))
        (matita_arithmetics_nat.decidable_le (matita_arithmetics_nat.S n) m).

def times_exp :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n p)
                       (matita_arithmetics_exp.exp m p))
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_nat.times n m) p)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_exp.exp n _x_365)
                 (matita_arithmetics_exp.exp m _x_365))
              (matita_arithmetics_exp.exp (matita_arithmetics_nat.times n m)
                 _x_365)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_exp.exp n matita_arithmetics_nat.O)
              (matita_arithmetics_exp.exp m matita_arithmetics_nat.O)))
        (p0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp n p0)
                   (matita_arithmetics_exp.exp m p0))
                (matita_arithmetics_exp.exp
                   (matita_arithmetics_nat.times n m) p0)) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times n (matita_arithmetics_exp.exp n p0))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times x
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp m p0) m))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_nat.times n m) p0)
                    (matita_arithmetics_nat.times n m))))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times m
                 (matita_arithmetics_exp.exp m p0))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_exp.exp n p0))
                       x)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp
                          (matita_arithmetics_nat.times n m) p0)
                       (matita_arithmetics_nat.times n m))))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n p0)
                       (matita_arithmetics_nat.times m
                          (matita_arithmetics_exp.exp m p0))))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp
                             (matita_arithmetics_nat.times n m) p0)
                          (matita_arithmetics_nat.times n m))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times m
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n p0)
                          (matita_arithmetics_exp.exp m p0)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n x)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp
                                (matita_arithmetics_nat.times n m) p0)
                             (matita_arithmetics_nat.times n m))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp
                          (matita_arithmetics_nat.times n m) p0)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.times m x))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp
                                   (matita_arithmetics_nat.times n m) p0)
                                (matita_arithmetics_nat.times n m))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times n m)
                             (matita_arithmetics_exp.exp
                                (matita_arithmetics_nat.times n m) p0))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_nat.times m
                                      (matita_arithmetics_exp.exp
                                         (matita_arithmetics_nat.times n m)
                                         p0)))
                                x))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.times m
                                   (matita_arithmetics_exp.exp
                                      (matita_arithmetics_nat.times n m) p0)))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times n
                                      (matita_arithmetics_nat.times m
                                         (matita_arithmetics_exp.exp
                                            (matita_arithmetics_nat.times n m)
                                            p0)))
                                   x))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_nat.times m
                                      (matita_arithmetics_exp.exp
                                         (matita_arithmetics_nat.times n m)
                                         p0))))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times n m)
                                (matita_arithmetics_exp.exp
                                   (matita_arithmetics_nat.times n m) p0))
                             (matita_arithmetics_nat.associative_times n m
                                (matita_arithmetics_exp.exp
                                   (matita_arithmetics_nat.times n m) p0)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp
                                (matita_arithmetics_nat.times n m) p0)
                             (matita_arithmetics_nat.times n m))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_exp.exp
                                (matita_arithmetics_nat.times n m) p0)
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp n p0)
                          (matita_arithmetics_exp.exp m p0))
                       Hind)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp n p0)
                       (matita_arithmetics_nat.times m
                          (matita_arithmetics_exp.exp m p0)))
                    (matita_arithmetics_nat.times_times
                       (matita_arithmetics_exp.exp n p0) m
                       (matita_arithmetics_exp.exp m p0)))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_exp.exp n p0))
                    (matita_arithmetics_nat.times m
                       (matita_arithmetics_exp.exp m p0)))
                 (matita_arithmetics_nat.associative_times n
                    (matita_arithmetics_exp.exp n p0)
                    (matita_arithmetics_nat.times m
                       (matita_arithmetics_exp.exp m p0))))
              (matita_arithmetics_nat.times (matita_arithmetics_exp.exp m p0)
                 m)
              (matita_arithmetics_nat.commutative_times
                 (matita_arithmetics_exp.exp m p0) m))
           (matita_arithmetics_nat.times (matita_arithmetics_exp.exp n p0) n)
           (matita_arithmetics_nat.commutative_times
              (matita_arithmetics_exp.exp n p0) n))
        p.


