eq :
  cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s cic.z)))
          cic.I A
          (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
             (cic.type (cic.s (cic.s cic.z))) cic.I A
             (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))).

refl :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
       cic.I
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I A
          (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x x))).

def match_eq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) ->
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      return_type :
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
         z :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                _x __) ->
         cic.Univ return_sort) ->
      case_refl :
        cic.Term return_sort
          (return_type _x
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                _x)) ->
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      z :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x __) ->
      cic.Term return_sort (return_type __ z).

[ return_sort, A, _x, return_type, case_refl ]
  match_eq return_sort A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def filter_eq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) ->
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      return_type :
        (z :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                _x __) ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                _x __) ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x __) ->
      cic.Term return_sort (return_type z).

[ return_sort1, A, x, return_type, return ]
  filter_eq return_sort1 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       x).

def eq_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_1)
                       (_x_2 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_1) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                         cic.I A
                         (x_1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_1)
                            (_x_2 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_1) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_2 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_1) =>
                      Q_ x_1 _x_2) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term cic.prop
                         ((x_1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_2 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_1) =>
                           Q_ x_1 _x_2) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       cic.prop cic.I A
                       (x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_1)
                          (x_2 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_1) =>
                           (x_11 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_2 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_11) =>
                            Q_ x_11 _x_2) x_1 x_2))))))).

def eq_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_1)
                       (_x_2 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_1) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                         cic.I A
                         (x_1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_1)
                            (_x_2 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_1) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_2 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_1) =>
                      Q_ x_1 _x_2) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term cic.prop
                         ((x_1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_2 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_1) =>
                           Q_ x_1 _x_2) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       cic.prop cic.I A
                       (x_1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_1)
                          (x_2 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_1) =>
                           (x_11 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_2 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_11) =>
                            Q_ x_11 _x_2) x_1 x_2))))))).

[ A, _x, Q_, _H_refl, x_1, x_2 ] eq_ind A _x Q_ _H_refl x_1 x_2 -->
  test.filter_eq cic.prop A _x x_1
    (x_2 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_1) =>
     (x_11 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_2 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_11) =>
      Q_ x_11 _x_2) x_1 x_2)
    (test.eq_ind_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_1)
    x_2.

[ A, _x, Q_, _H_refl, x_1, x_2 ] eq_ind_body A _x Q_ _H_refl x_1 x_2 -->
  test.match_eq cic.prop
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_11 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_2 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_11) =>
     Q_ x_11 _x_2)
    _H_refl x_1 x_2.

def eq_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I A
                    (x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_4)
                       (_x_5 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_4) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I A
                         (x_4 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_4)
                            (_x_5 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_4) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_5 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_4) =>
                      Q_ x_4 _x_5) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((x_4 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_5 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_4) =>
                           Q_ x_4 _x_5) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       A
                       (x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_4)
                          (x_5 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_4) =>
                           (x_41 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_5 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_41) =>
                            Q_ x_41 _x_5) x_4 x_5))))))).

def eq_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I A
                    (x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_4)
                       (_x_5 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_4) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I A
                         (x_4 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_4)
                            (_x_5 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_4) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_5 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_4) =>
                      Q_ x_4 _x_5) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((x_4 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_5 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_4) =>
                           Q_ x_4 _x_5) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       A
                       (x_4 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_4)
                          (x_5 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_4) =>
                           (x_41 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_5 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_41) =>
                            Q_ x_41 _x_5) x_4 x_5))))))).

[ A, _x, Q_, _H_refl, x_4, x_5 ] eq_rect_Type4 A _x Q_ _H_refl x_4 x_5 -->
  test.filter_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A _x x_4
    (x_5 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_4) =>
     (x_41 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_5 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_41) =>
      Q_ x_41 _x_5) x_4 x_5)
    (test.eq_rect_Type4_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_4)
    x_5.

[ A, _x, Q_, _H_refl, x_4, x_5 ]
  eq_rect_Type4_body A _x Q_ _H_refl x_4 x_5 -->
  test.match_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_41 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_5 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_41) =>
     Q_ x_41 _x_5)
    _H_refl x_4 x_5.

def eq_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    cic.I A
                    (x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_7)
                       (_x_8 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_7) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         cic.I A
                         (x_7 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_7)
                            (_x_8 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_7) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               cic.I))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    ((x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_8 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_7) =>
                      Q_ x_7 _x_8) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((x_7 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_8 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_7) =>
                           Q_ x_7 _x_8) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I A
                       (x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_7)
                          (x_8 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_7) =>
                           (x_71 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_8 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_71) =>
                            Q_ x_71 _x_8) x_7 x_8))))))).

def eq_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    cic.I A
                    (x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_7)
                       (_x_8 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_7) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         cic.I A
                         (x_7 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_7)
                            (_x_8 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_7) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               cic.I))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    ((x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_8 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_7) =>
                      Q_ x_7 _x_8) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((x_7 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_8 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_7) =>
                           Q_ x_7 _x_8) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I A
                       (x_7 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_7)
                          (x_8 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_7) =>
                           (x_71 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_8 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_71) =>
                            Q_ x_71 _x_8) x_7 x_8))))))).

[ A, _x, Q_, _H_refl, x_7, x_8 ] eq_rect_Type5 A _x Q_ _H_refl x_7 x_8 -->
  test.filter_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A _x x_7
    (x_8 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_7) =>
     (x_71 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_8 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_71) =>
      Q_ x_71 _x_8) x_7 x_8)
    (test.eq_rect_Type5_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_7)
    x_8.

[ A, _x, Q_, _H_refl, x_7, x_8 ]
  eq_rect_Type5_body A _x Q_ _H_refl x_7 x_8 -->
  test.match_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_71 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_8 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_71) =>
     Q_ x_71 _x_8)
    _H_refl x_7 x_8.

def eq_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                    (x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_10)
                       (_x_11 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_10) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I A
                         (x_10 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_10)
                            (_x_11 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_10) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_11 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_10) =>
                      Q_ x_10 _x_11) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((x_10 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_11 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_10) =>
                           Q_ x_10 _x_11) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                       (x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_10)
                          (x_11 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_10) =>
                           (x_101 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_11 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_101) =>
                            Q_ x_101 _x_11) x_10 x_11))))))).

def eq_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                    (x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_10)
                       (_x_11 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_10) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I A
                         (x_10 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_10)
                            (_x_11 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_10) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_11 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_10) =>
                      Q_ x_10 _x_11) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((x_10 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_11 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_10) =>
                           Q_ x_10 _x_11) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                       (x_10 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_10)
                          (x_11 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_10) =>
                           (x_101 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_11 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_101) =>
                            Q_ x_101 _x_11) x_10 x_11))))))).

[ A, _x, Q_, _H_refl, x_10, x_11 ]
  eq_rect_Type3 A _x Q_ _H_refl x_10 x_11 -->
  test.filter_eq (cic.type (cic.s (cic.s (cic.s cic.z)))) A _x
    x_10
    (x_11 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_10) =>
     (x_101 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_11 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_101) =>
      Q_ x_101 _x_11) x_10 x_11)
    (test.eq_rect_Type3_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_10)
    x_11.

[ A, _x, Q_, _H_refl, x_10, x_11 ]
  eq_rect_Type3_body A _x Q_ _H_refl x_10 x_11 -->
  test.match_eq (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_101 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_11 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_101) =>
     Q_ x_101 _x_11)
    _H_refl x_10 x_11.

def eq_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_13)
                       (_x_14 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_13) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (x_13 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_13)
                            (_x_14 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_13) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_14 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_13) =>
                      Q_ x_13 _x_14) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((x_13 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_14 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_13) =>
                           Q_ x_13 _x_14) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_13)
                          (x_14 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_13) =>
                           (x_131 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_14 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_131) =>
                            Q_ x_131 _x_14) x_13 x_14))))))).

def eq_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_13)
                       (_x_14 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_13) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (x_13 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_13)
                            (_x_14 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_13) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_14 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_13) =>
                      Q_ x_13 _x_14) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((x_13 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_14 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_13) =>
                           Q_ x_13 _x_14) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_13 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_13)
                          (x_14 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_13) =>
                           (x_131 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_14 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_131) =>
                            Q_ x_131 _x_14) x_13 x_14))))))).

[ A, _x, Q_, _H_refl, x_13, x_14 ]
  eq_rect_Type2 A _x Q_ _H_refl x_13 x_14 -->
  test.filter_eq (cic.type (cic.s (cic.s cic.z))) A _x x_13
    (x_14 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_13) =>
     (x_131 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_14 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_131) =>
      Q_ x_131 _x_14) x_13 x_14)
    (test.eq_rect_Type2_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_13)
    x_14.

[ A, _x, Q_, _H_refl, x_13, x_14 ]
  eq_rect_Type2_body A _x Q_ _H_refl x_13 x_14 -->
  test.match_eq (cic.type (cic.s (cic.s cic.z)))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_131 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_14 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_131) =>
     Q_ x_131 _x_14)
    _H_refl x_13 x_14.

def eq_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_16)
                       (_x_17 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_16) =>
                        cic.univ (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_16 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_16)
                            (_x_17 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_16) =>
                             cic.univ (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_17 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_16) =>
                      Q_ x_16 _x_17) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s cic.z))
                         ((x_16 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_17 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_16) =>
                           Q_ x_16 _x_17) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_16)
                          (x_17 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_16) =>
                           (x_161 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_17 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_161) =>
                            Q_ x_161 _x_17) x_16 x_17))))))).

def eq_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_16)
                       (_x_17 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_16) =>
                        cic.univ (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_16 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_16)
                            (_x_17 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_16) =>
                             cic.univ (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_17 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_16) =>
                      Q_ x_16 _x_17) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s cic.z))
                         ((x_16 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_17 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_16) =>
                           Q_ x_16 _x_17) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_16 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_16)
                          (x_17 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_16) =>
                           (x_161 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_17 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_161) =>
                            Q_ x_161 _x_17) x_16 x_17))))))).

[ A, _x, Q_, _H_refl, x_16, x_17 ]
  eq_rect_Type1 A _x Q_ _H_refl x_16 x_17 -->
  test.filter_eq (cic.type (cic.s cic.z)) A _x x_16
    (x_17 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_16) =>
     (x_161 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_17 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_161) =>
      Q_ x_161 _x_17) x_16 x_17)
    (test.eq_rect_Type1_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_16)
    x_17.

[ A, _x, Q_, _H_refl, x_16, x_17 ]
  eq_rect_Type1_body A _x Q_ _H_refl x_16 x_17 -->
  test.match_eq (cic.type (cic.s cic.z))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_161 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_17 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_161) =>
     Q_ x_161 _x_17)
    _H_refl x_16 x_17.

def eq_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_19)
                       (_x_20 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_19) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_19 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_19)
                            (_x_20 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_19) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_20 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_19) =>
                      Q_ x_19 _x_20) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         ((x_19 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_20 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_19) =>
                           Q_ x_19 _x_20) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_19)
                          (x_20 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_19) =>
                           (x_191 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_20 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_191) =>
                            Q_ x_191 _x_20) x_19 x_20))))))).

def eq_rect_Type0_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_19)
                       (_x_20 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_19) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_19 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_19)
                            (_x_20 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_19) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_20 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_19) =>
                      Q_ x_19 _x_20) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         ((x_19 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_20 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_19) =>
                           Q_ x_19 _x_20) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_19)
                          (x_20 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_19) =>
                           (x_191 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_20 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_191) =>
                            Q_ x_191 _x_20) x_19 x_20))))))).

[ A, _x, Q_, _H_refl, x_19, x_20 ]
  eq_rect_Type0 A _x Q_ _H_refl x_19 x_20 -->
  test.filter_eq (cic.type cic.z) A _x x_19
    (x_20 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_19) =>
     (x_191 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_20 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_191) =>
      Q_ x_191 _x_20) x_19 x_20)
    (test.eq_rect_Type0_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_19)
    x_20.

[ A, _x, Q_, _H_refl, x_19, x_20 ]
  eq_rect_Type0_body A _x Q_ _H_refl x_19 x_20 -->
  test.match_eq (cic.type cic.z)
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_191 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_20 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_191) =>
     Q_ x_191 _x_20)
    _H_refl x_19 x_20.

def eq_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I A
                    (x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_22)
                       (_x_23 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_22) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I A
                         (x_22 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_22)
                            (_x_23 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_22) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_23 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_22) =>
                      Q_ x_22 _x_23) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((x_22 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_23 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_22) =>
                           Q_ x_22 _x_23) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       A
                       (x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_22)
                          (x_23 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_22) =>
                           (x_221 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_23 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_221) =>
                            Q_ x_221 _x_23) x_22 x_23))))))).

def eq_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I A
                    (x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_22)
                       (_x_23 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_22) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I A
                         (x_22 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_22)
                            (_x_23 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_22) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_23 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_22) =>
                      Q_ x_22 _x_23) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((x_22 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_23 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_22) =>
                           Q_ x_22 _x_23) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       A
                       (x_22 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_22)
                          (x_23 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_22) =>
                           (x_221 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_23 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_221) =>
                            Q_ x_221 _x_23) x_22 x_23))))))).

[ A, _x, Q_, _H_refl, x_22, x_23 ]
  eq_rect_CProp4 A _x Q_ _H_refl x_22 x_23 -->
  test.filter_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A _x x_22
    (x_23 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_22) =>
     (x_221 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_23 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_221) =>
      Q_ x_221 _x_23) x_22 x_23)
    (test.eq_rect_CProp4_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_22)
    x_23.

[ A, _x, Q_, _H_refl, x_22, x_23 ]
  eq_rect_CProp4_body A _x Q_ _H_refl x_22 x_23 -->
  test.match_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_221 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_23 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_221) =>
     Q_ x_221 _x_23)
    _H_refl x_22 x_23.

def eq_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    cic.I A
                    (x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_25)
                       (_x_26 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_25) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         cic.I A
                         (x_25 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_25)
                            (_x_26 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_25) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               cic.I))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    ((x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_26 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_25) =>
                      Q_ x_25 _x_26) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((x_25 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_26 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_25) =>
                           Q_ x_25 _x_26) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I A
                       (x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_25)
                          (x_26 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_25) =>
                           (x_251 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_26 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_251) =>
                            Q_ x_251 _x_26) x_25 x_26))))))).

def eq_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    cic.I A
                    (x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_25)
                       (_x_26 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_25) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          cic.I)))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         cic.I A
                         (x_25 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_25)
                            (_x_26 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_25) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               cic.I))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I
                    ((x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_26 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_25) =>
                      Q_ x_25 _x_26) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((x_25 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_26 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_25) =>
                           Q_ x_25 _x_26) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       cic.I A
                       (x_25 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_25)
                          (x_26 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_25) =>
                           (x_251 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_26 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_251) =>
                            Q_ x_251 _x_26) x_25 x_26))))))).

[ A, _x, Q_, _H_refl, x_25, x_26 ]
  eq_rect_CProp5 A _x Q_ _H_refl x_25 x_26 -->
  test.filter_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A _x x_25
    (x_26 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_25) =>
     (x_251 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_26 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_251) =>
      Q_ x_251 _x_26) x_25 x_26)
    (test.eq_rect_CProp5_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_25)
    x_26.

[ A, _x, Q_, _H_refl, x_25, x_26 ]
  eq_rect_CProp5_body A _x Q_ _H_refl x_25 x_26 -->
  test.match_eq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_251 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_26 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_251) =>
     Q_ x_251 _x_26)
    _H_refl x_25 x_26.

def eq_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                    (x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_28)
                       (_x_29 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_28) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I A
                         (x_28 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_28)
                            (_x_29 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_28) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_29 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_28) =>
                      Q_ x_28 _x_29) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((x_28 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_29 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_28) =>
                           Q_ x_28 _x_29) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                       (x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_28)
                          (x_29 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_28) =>
                           (x_281 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_29 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_281) =>
                            Q_ x_281 _x_29) x_28 x_29))))))).

def eq_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                    (x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_28)
                       (_x_29 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_28) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I A
                         (x_28 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_28)
                            (_x_29 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_28) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_29 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_28) =>
                      Q_ x_28 _x_29) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((x_28 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_29 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_28) =>
                           Q_ x_28 _x_29) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                       (x_28 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_28)
                          (x_29 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_28) =>
                           (x_281 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_29 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_281) =>
                            Q_ x_281 _x_29) x_28 x_29))))))).

[ A, _x, Q_, _H_refl, x_28, x_29 ]
  eq_rect_CProp3 A _x Q_ _H_refl x_28 x_29 -->
  test.filter_eq (cic.type (cic.s (cic.s (cic.s cic.z)))) A _x
    x_28
    (x_29 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_28) =>
     (x_281 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_29 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_281) =>
      Q_ x_281 _x_29) x_28 x_29)
    (test.eq_rect_CProp3_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_28)
    x_29.

[ A, _x, Q_, _H_refl, x_28, x_29 ]
  eq_rect_CProp3_body A _x Q_ _H_refl x_28 x_29 -->
  test.match_eq (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_281 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_29 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_281) =>
     Q_ x_281 _x_29)
    _H_refl x_28 x_29.

def eq_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_31)
                       (_x_32 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_31) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (x_31 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_31)
                            (_x_32 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_31) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_32 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_31) =>
                      Q_ x_31 _x_32) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((x_31 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_32 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_31) =>
                           Q_ x_31 _x_32) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_31)
                          (x_32 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_31) =>
                           (x_311 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_32 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_311) =>
                            Q_ x_311 _x_32) x_31 x_32))))))).

def eq_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_31)
                       (_x_32 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_31) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (x_31 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_31)
                            (_x_32 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_31) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_32 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_31) =>
                      Q_ x_31 _x_32) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((x_31 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_32 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_31) =>
                           Q_ x_31 _x_32) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_31 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_31)
                          (x_32 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_31) =>
                           (x_311 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_32 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_311) =>
                            Q_ x_311 _x_32) x_31 x_32))))))).

[ A, _x, Q_, _H_refl, x_31, x_32 ]
  eq_rect_CProp2 A _x Q_ _H_refl x_31 x_32 -->
  test.filter_eq (cic.type (cic.s (cic.s cic.z))) A _x x_31
    (x_32 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_31) =>
     (x_311 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_32 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_311) =>
      Q_ x_311 _x_32) x_31 x_32)
    (test.eq_rect_CProp2_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_31)
    x_32.

[ A, _x, Q_, _H_refl, x_31, x_32 ]
  eq_rect_CProp2_body A _x Q_ _H_refl x_31 x_32 -->
  test.match_eq (cic.type (cic.s (cic.s cic.z)))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_311 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_32 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_311) =>
     Q_ x_311 _x_32)
    _H_refl x_31 x_32.

def eq_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_34)
                       (_x_35 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_34) =>
                        cic.univ (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_34 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_34)
                            (_x_35 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_34) =>
                             cic.univ (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_35 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_34) =>
                      Q_ x_34 _x_35) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s cic.z))
                         ((x_34 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_35 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_34) =>
                           Q_ x_34 _x_35) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_34)
                          (x_35 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_34) =>
                           (x_341 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_35 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_341) =>
                            Q_ x_341 _x_35) x_34 x_35))))))).

def eq_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_34)
                       (_x_35 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_34) =>
                        cic.univ (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_34 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_34)
                            (_x_35 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_34) =>
                             cic.univ (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_35 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_34) =>
                      Q_ x_34 _x_35) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type (cic.s cic.z))
                         ((x_34 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_35 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_34) =>
                           Q_ x_34 _x_35) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x_34 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_34)
                          (x_35 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_34) =>
                           (x_341 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_35 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_341) =>
                            Q_ x_341 _x_35) x_34 x_35))))))).

[ A, _x, Q_, _H_refl, x_34, x_35 ]
  eq_rect_CProp1 A _x Q_ _H_refl x_34 x_35 -->
  test.filter_eq (cic.type (cic.s cic.z)) A _x x_34
    (x_35 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_34) =>
     (x_341 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_35 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_341) =>
      Q_ x_341 _x_35) x_34 x_35)
    (test.eq_rect_CProp1_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_34)
    x_35.

[ A, _x, Q_, _H_refl, x_34, x_35 ]
  eq_rect_CProp1_body A _x Q_ _H_refl x_34 x_35 -->
  test.match_eq (cic.type (cic.s cic.z))
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_341 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_35 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_341) =>
     Q_ x_341 _x_35)
    _H_refl x_34 x_35.

def eq_rect_CProp0 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_37)
                       (_x_38 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_37) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_37 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_37)
                            (_x_38 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_37) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_38 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_37) =>
                      Q_ x_37 _x_38) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         ((x_37 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_38 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_37) =>
                           Q_ x_37 _x_38) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_37)
                          (x_38 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_37) =>
                           (x_371 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_38 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_371) =>
                            Q_ x_371 _x_38) x_37 x_38))))))).

def eq_rect_CProp0_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x1 __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x x_37)
                       (_x_38 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_37) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_37 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x1 __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x x_37)
                            (_x_38 :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x1 __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x x_37) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      _x_38 :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_37) =>
                      Q_ x_37 _x_38) _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         ((x_37 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           _x_38 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_37) =>
                           Q_ x_37 _x_38) _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_37 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x1 __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x x_37)
                          (x_38 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x1 __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x x_37) =>
                           (x_371 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            _x_38 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x x_371) =>
                            Q_ x_371 _x_38) x_37 x_38))))))).

[ A, _x, Q_, _H_refl, x_37, x_38 ]
  eq_rect_CProp0 A _x Q_ _H_refl x_37 x_38 -->
  test.filter_eq (cic.type cic.z) A _x x_37
    (x_38 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
             _x1 __)
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_37) =>
     (x_371 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      _x_38 :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             _x x_371) =>
      Q_ x_371 _x_38) x_37 x_38)
    (test.eq_rect_CProp0_body
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) cic.I A)
       _x Q_ _H_refl x_37)
    x_38.

[ A, _x, Q_, _H_refl, x_37, x_38 ]
  eq_rect_CProp0_body A _x Q_ _H_refl x_37 x_38 -->
  test.match_eq (cic.type cic.z)
    (cic.lift (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) cic.I A)
    _x
    (x_371 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
     _x_38 :
       cic.Term cic.prop
         (test.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x x_371) =>
     Q_ x_371 _x_38)
    _H_refl x_37 x_38.

def eq_rect_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                 (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      test.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x a)
                    (p :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x a) =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       (cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I A
                          (x0 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             cic.I
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               test.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                 _x __)
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                x0 a)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    test.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     x0 a) =>
                              cic.univ
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                cic.I)))
                       (P :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod (cic.type (cic.s (cic.s cic.z)))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I A
                               (x0 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  cic.I
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    test.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A1)
                                      _x __)
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     x0 a)
                                  (__ :
                                     cic.Term cic.prop
                                       ((A1 :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         test.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A1)
                                           _x __)
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          x0 a) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     cic.I))) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((x0 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x0 a) =>
                            P x0 __) a
                             (test.refl
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                a))
                          (__ :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((x0 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I A)
                                        x0 a) =>
                                 P x0 __) a
                                  (test.refl
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     a)) =>
                           (x0 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x0 a) =>
                            P x0 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x a) =>
      test.match_eq
        (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   test.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    x0 __)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __) =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)))
           (P :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                   (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                               _x __1)
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              x0 __) =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                P x0 __1) __
                 (test.refl
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    __))
              (__1 :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x0 __) =>
                     P x0 __1) __
                      (test.refl
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         __)) =>
               (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                P x0 __2) x _0)))
        (P :
           cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.prod (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           x0 x) =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))) =>
         auto :
           cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
             ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ :
                 cic.Term cic.prop
                   (test.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x) =>
               P x0 __) x
                (test.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x)) =>
         auto)
        a p.

def eq_ind_r :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I
              A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop
                 cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          x a)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                         cic.I A
                         (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    x a) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a) =>
                      P x __) a
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          a))
                    (__ :
                       cic.Term cic.prop
                         ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           P x __) a
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               a)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       cic.prop cic.I A
                       (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a)
                          (p :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           (x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x1 a) =>
                            P x1 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
             (cic.type (cic.s (cic.s cic.z))) cic.I A
             (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  test.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       test.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        x a) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))) =>
      p :
        cic.Term cic.prop
          ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ :
              cic.Term cic.prop
                (test.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a) =>
            P x __) a
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                a)) =>
      x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p0 :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x0 a) =>
      test.eq_rect_r
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        a x0 p0
        (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x a) =>
         cic.lift cic.prop (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (P x __))
        p.

def eq_rect_Type0_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          x a)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    x a) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a) =>
                      P x __) a
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          a))
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           P x __) a
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               a)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a)
                          (p :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           (x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x1 a) =>
                            P x1 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s cic.z))) cic.I A
             (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z)) cic.I
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  test.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       test.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        x a) =>
                 cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))) =>
      H :
        cic.Term (cic.type cic.z)
          ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ :
              cic.Term cic.prop
                (test.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a) =>
            P x __) a
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                a)) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x a) =>
      test.match_eq (cic.type (cic.s (cic.s cic.z)))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I
              A
              (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   test.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    x0 __)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __) =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
           (f :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                   cic.I A
                   (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                               _x __1)
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              x0 __) =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I))) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __1) __
                 (test.refl
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    __))
              (__1 :
                 cic.Term (cic.type cic.z)
                   ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x0 __) =>
                     f x0 __1) __
                      (test.refl
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         __)) =>
               (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __2) x _0)))
        (f :
           cic.Term (cic.type (cic.s (cic.s cic.z)))
             (cic.prod (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                cic.I A
                (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           x0 x) =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))) =>
         auto :
           cic.Term (cic.type cic.z)
             ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ :
                 cic.Term cic.prop
                   (test.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x) =>
               f x0 __) x
                (test.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x)) =>
         auto)
        a p
        (x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x1 a) =>
         cic.lift (cic.type cic.z) (cic.type cic.z) cic.I (P x1 __))
        H.

def eq_rect_Type1_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A
                    (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          x a)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a) =>
                        cic.univ (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I)))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    x a) =>
                             cic.univ (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a) =>
                      P x __) a
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          a))
                    (__ :
                       cic.Term (cic.type (cic.s cic.z))
                         ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           P x __) a
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               a)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a)
                          (p :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           (x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x1 a) =>
                            P x1 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I A
             (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  test.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       test.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        x a) =>
                 cic.univ (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
      H :
        cic.Term (cic.type (cic.s cic.z))
          ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ :
              cic.Term cic.prop
                (test.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a) =>
            P x __) a
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                a)) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x a) =>
      test.match_eq (cic.type (cic.s (cic.s cic.z)))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   test.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    x0 __)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __) =>
                  cic.univ (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I)))
           (f :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A
                   (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                               _x __1)
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              x0 __) =>
                       cic.univ (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __1) __
                 (test.refl
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    __))
              (__1 :
                 cic.Term (cic.type (cic.s cic.z))
                   ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x0 __) =>
                     f x0 __1) __
                      (test.refl
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         __)) =>
               (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __2) x _0)))
        (f :
           cic.Term (cic.type (cic.s (cic.s cic.z)))
             (cic.prod (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A
                (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           x0 x) =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I))) =>
         auto :
           cic.Term (cic.type (cic.s cic.z))
             ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ :
                 cic.Term cic.prop
                   (test.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x) =>
               f x0 __) x
                (test.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x)) =>
         auto)
        a p
        (x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x1 a) =>
         cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
           (P x1 __))
        H.

def eq_rect_Type2_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          x a)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    x a) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a) =>
                      P x __) a
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          a))
                    (__ :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           P x __) a
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               a)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a)
                          (p :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           (x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x1 a) =>
                            P x1 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
             (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  test.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       test.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        x a) =>
                 cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
      H :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ :
              cic.Term cic.prop
                (test.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a) =>
            P x __) a
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                a)) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x a) =>
      test.match_eq (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   test.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    x0 __)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __) =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)))
           (f :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                   (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                               _x __1)
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              x0 __) =>
                       cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __1) __
                 (test.refl
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    __))
              (__1 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x0 __) =>
                     f x0 __1) __
                      (test.refl
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         __)) =>
               (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __2) x _0)))
        (f :
           cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           x0 x) =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))) =>
         auto :
           cic.Term (cic.type (cic.s (cic.s cic.z)))
             ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ :
                 cic.Term cic.prop
                   (test.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x) =>
               f x0 __) x
                (test.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x)) =>
         auto)
        a p
        (x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x1 a) =>
         cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I (P x1 __))
        H.

def eq_rect_Type3_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                    (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         test.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          x a)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          cic.I)))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I A
                         (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              test.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               x a)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   test.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    x a) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               cic.I))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ :
                        cic.Term cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a) =>
                      P x __) a
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          a))
                    (__ :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           P x __) a
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               a)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                       (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x a)
                          (p :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x a) =>
                           (x1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term cic.prop
                                (test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   x1 a) =>
                            P x1 __1) x p)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      a : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
             (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.prod cic.prop
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  test.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       test.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        x a) =>
                 cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))) =>
      H :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          ((x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ :
              cic.Term cic.prop
                (test.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x a) =>
            P x __) a
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                a)) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      p :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x a) =>
      test.match_eq
        (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
              (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   test.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    x0 __)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __) =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)))
           (f :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                   (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                          _x __1)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         x0 __)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                               _x __1)
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              x0 __) =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __1) __
                 (test.refl
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    __))
              (__1 :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x0 __) =>
                     f x0 __1) __
                      (test.refl
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I A)
                         __)) =>
               (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 :
                  cic.Term cic.prop
                    (test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x0 __) =>
                f x0 __2) x _0)))
        (f :
           cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.prod (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I A
                (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     test.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          test.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           x0 x) =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))) =>
         auto :
           cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
             ((x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ :
                 cic.Term cic.prop
                   (test.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      x0 x) =>
               f x0 __) x
                (test.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I A)
                   x)) =>
         auto)
        a p
        (x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x1 a) =>
         cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I (P x1 __))
        H.

def rewrite_l :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.univ (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      P __) x)
                    (__ :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((__ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           P __) x) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             x y)
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  x y) =>
                           (__2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            P __2) y)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
             (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      Hx :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          ((__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A => P __) x) =>
      y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      Heq :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x y) =>
      test.match_eq (cic.type (cic.s (cic.s cic.z)))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         (__1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A => P __1) __)
        Hx y Heq.

def sym_eq :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
           cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I
              A
              (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop
                 cic.I A
                 (y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      test.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __)
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       x y)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                             _x __)
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            x y) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      test.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                        _x __1)
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       y x)))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      Heq :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             x y) =>
      test.rewrite_l
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (z : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             test.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A1)
               _x __)
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              z x))
        (test.refl
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A)
           x)
        y
        (test.rewrite_l
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A)
           x
           (x0 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                test.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 x x0))
           (test.refl
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              x)
           y Heq).

def rewrite_r :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
              (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
                 (P :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.univ (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      P __) x)
                    (__ :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((__ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           P __) x) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A
                       (y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            test.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             y x)
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 test.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  y x) =>
                           (__2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            P __2) y)))))))
      :=
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I A
             (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      Hx :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          ((__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A => P __) x) =>
      y : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      Heq :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            test.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) cic.I A)
             y x) =>
      test.match_eq (cic.type (cic.s (cic.s cic.z)))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I A)
        x
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               test.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                x __) =>
         (__1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A => P __1) __)
        Hx y
        (test.sym_eq
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A)
           y x Heq).