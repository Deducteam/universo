eq :
  cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.type (cic.s (cic.s cic.z)))
       (cic.univ (cic.type (cic.s (cic.s cic.z))))
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A
          (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z) A
             (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.univ cic.prop)))).

refl :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop
       (cic.univ (cic.type (cic.s (cic.s cic.z))))
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
          (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             x x))).

def match_eq_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                    A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type cic.z)
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ cic.prop)))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type cic.z) A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type cic.z)
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ cic.prop))) =>
                  cic.prod cic.prop cic.prop
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term cic.prop
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Prop A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (return_type :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type5 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                 (return_type :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type4 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type3 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type2 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type1 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s cic.z)))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type (cic.s cic.z))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term (cic.type (cic.s cic.z))
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z)) A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type1 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def match_eq_Type0 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) A
                    (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type cic.z))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z)) A
                         (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type cic.z)))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (return_type _x
                       (test.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x))
                    (case_refl :
                       cic.Term (cic.type cic.z)
                         (return_type _x
                            (test.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) A
                       (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z)
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type __ z))))))).

[ A, _x, return_type, case_refl ]
  match_eq_Type0 A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def filter_eq_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod cic.prop (cic.type cic.z)
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ cic.prop))
                    (return_type :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z)
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ cic.prop)) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop cic.prop
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Prop (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type5 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type4 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                    (return_type :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type3 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type2 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type1 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type (cic.s cic.z))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type (cic.s cic.z)))) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.prod cic.prop (cic.type (cic.s cic.z))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z))
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type1 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def filter_eq_Type0 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s (cic.s cic.z))))
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) A
                 (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    (cic.prod cic.prop (cic.type (cic.s cic.z))
                       (test.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                       (z :
                          cic.Term cic.prop
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __) =>
                        cic.univ (cic.type cic.z)))
                    (return_type :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod cic.prop (cic.type (cic.s cic.z))
                            (test.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                            (z :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __) =>
                             cic.univ (cic.type cic.z))) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.prod cic.prop (cic.type cic.z)
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type cic.z)
                            (cic.prod cic.prop (cic.type cic.z)
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                               (z :
                                  cic.Term cic.prop
                                    (test.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (test.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                          (z :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __) =>
                           return_type z))))))).

[ A, x, return_type, return ]
  filter_eq_Type0 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.lift (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) A)
       x).

def match_eq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) ->
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      return_type :
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
         z :
           cic.Term cic.prop
             (test.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __) ->
         cic.Univ return_sort) ->
      case_refl :
        cic.Term return_sort
          (return_type _x
             (test.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x)) ->
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      z :
        cic.Term cic.prop
          (test.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __) ->
      cic.Term return_sort (return_type __ z).

(;
[  ] match_eq cic.prop --> test.match_eq_Prop.
;)
[  ] match_eq (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  test.match_eq_Type5.

(;
[  ] match_eq (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  test.match_eq_Type4.

[  ] match_eq (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  test.match_eq_Type3.

[  ] match_eq (cic.type (cic.s (cic.s cic.z))) -->
  test.match_eq_Type2.

[  ] match_eq (cic.type (cic.s cic.z)) -->
  test.match_eq_Type1.

[  ] match_eq (cic.type cic.z) --> test.match_eq_Type0.

[ return_sort, A, _x, return_type, case_refl ]
  match_eq return_sort A _x return_type case_refl _x
    (test.refl A _x) -->
  case_refl.
;)