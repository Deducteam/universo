(; This file was automatically generated from Matita. ;)

FinSet : cic.Univ (cic.type (cic.s cic.z)).

mk_FinSet :
  cic.Term (cic.type (cic.s cic.z))
    (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
       matita_basics_deqsets.DeqSet
       (FinSetcarr :
          cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
        cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
          (matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                (matita_basics_deqsets.carr FinSetcarr)))
          (enum :
             cic.Term (cic.type cic.z)
               (matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                     (matita_basics_deqsets.carr FinSetcarr))) =>
           cic.prod cic.prop (cic.type (cic.s cic.z))
             (matita_basics_logic.eq
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                matita_basics_bool.true)
             (_enum_unique :
                cic.Term cic.prop
                  (matita_basics_logic.eq
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_bool.bool)
                     (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                     matita_basics_bool.true) =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                (cic.prod (cic.type cic.z) cic.prop
                   (matita_basics_deqsets.carr FinSetcarr)
                   (x :
                      cic.Term (cic.type cic.z)
                        (matita_basics_deqsets.carr FinSetcarr) =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb FinSetcarr x enum)
                      matita_basics_bool.true))
                (_enum_complete :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop
                        (matita_basics_deqsets.carr FinSetcarr)
                        (x :
                           cic.Term (cic.type cic.z)
                             (matita_basics_deqsets.carr FinSetcarr) =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb FinSetcarr x enum)
                           matita_basics_bool.true)) =>
                 matita_basics_finset.FinSet))))).

def match_FinSet_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ cic.prop))
           (return_type :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) cic.prop
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) cic.prop
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Prop return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (return_type :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type5 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (return_type :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type4 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type3 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type2 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type1 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def match_FinSet_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (return_type :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             (matita_basics_deqsets.carr FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_deqsets.carr FinSetcarr) =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           return_type
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (case_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              (matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    (matita_basics_deqsets.carr FinSetcarr))) =>
                          cic.prod cic.prop (cic.type cic.z)
                            (matita_basics_logic.eq
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  (matita_basics_deqsets.carr FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       (matita_basics_deqsets.carr FinSetcarr) =>
                                   matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       (matita_basics_deqsets.carr FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            (matita_basics_deqsets.carr
                                               FinSetcarr) =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                return_type
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique, _enum_complete ]
  match_FinSet_Type0 return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def filter_FinSet_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ cic.prop))
           (return_type :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Prop return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (return_type :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type5 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (return_type :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type4 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type3 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type2 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type1 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def filter_FinSet_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (z :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (return_type :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (z :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_finset.FinSet
                      (z :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (z :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  return_type z)))).

[ FinSetcarr, enum, _enum_unique, _enum_complete, return_type, return ]
  filter_FinSet_Type0 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def match_FinSet :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet ->
         cic.Univ return_sort) ->
      case_mk_FinSet :
        (FinSetcarr :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet ->
         enum :
           cic.Term (cic.type cic.z)
             (matita_basics_lists_list.list
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   (matita_basics_deqsets.carr FinSetcarr))) ->
         _enum_unique :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                matita_basics_bool.true) ->
         _enum_complete :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                (matita_basics_deqsets.carr FinSetcarr)
                (x :
                   cic.Term (cic.type cic.z)
                     (matita_basics_deqsets.carr FinSetcarr) =>
                 matita_basics_logic.eq
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb FinSetcarr x enum)
                   matita_basics_bool.true)) ->
         cic.Term return_sort
           (return_type
              (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
                 _enum_complete))) ->
      z : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet ->
      cic.Term return_sort (return_type z).

[  ] match_FinSet cic.prop --> matita_basics_finset.match_FinSet_Prop.

[  ]
  match_FinSet (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_finset.match_FinSet_Type5.

[  ] match_FinSet (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_finset.match_FinSet_Type4.

[  ] match_FinSet (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_finset.match_FinSet_Type3.

[  ] match_FinSet (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_finset.match_FinSet_Type2.

[  ] match_FinSet (cic.type (cic.s cic.z)) -->
  matita_basics_finset.match_FinSet_Type1.

[  ] match_FinSet (cic.type cic.z) -->
  matita_basics_finset.match_FinSet_Type0.

[ return_sort, return_type, case_mk_FinSet, FinSetcarr, enum, _enum_unique,
  _enum_complete ]
  match_FinSet return_sort return_type case_mk_FinSet
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  case_mk_FinSet FinSetcarr enum _enum_unique _enum_complete.

def filter_FinSet :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet ->
      cic.Term return_sort (return_type z).

[  ] filter_FinSet cic.prop --> matita_basics_finset.filter_FinSet_Prop.

[  ]
  filter_FinSet (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_finset.filter_FinSet_Type5.

[  ] filter_FinSet (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_finset.filter_FinSet_Type4.

[  ] filter_FinSet (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_finset.filter_FinSet_Type3.

[  ] filter_FinSet (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_finset.filter_FinSet_Type2.

[  ] filter_FinSet (cic.type (cic.s cic.z)) -->
  matita_basics_finset.filter_FinSet_Type1.

[  ] filter_FinSet (cic.type cic.z) -->
  matita_basics_finset.filter_FinSet_Type0.

[ return_sort1, FinSetcarr, enum, _enum_unique, _enum_complete, return_type,
  return ]
  filter_FinSet return_sort1 return_type return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete) -->
  return
    (matita_basics_finset.mk_FinSet FinSetcarr enum _enum_unique
       _enum_complete).

def FinSet_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_finset.FinSet
              (_x_1467 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ cic.prop))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   matita_basics_finset.FinSet
                   (_x_1467 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1467 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1467)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) cic.prop
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1467 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1467)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_finset.FinSet
                 (x_1467 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1467 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1467) x_1467)))).

def FinSet_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_finset.FinSet
              (_x_1467 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ cic.prop))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                   matita_basics_finset.FinSet
                   (_x_1467 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1467 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1467)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s cic.z)) cic.prop
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) cic.prop
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1467 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1467)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_finset.FinSet
                 (x_1467 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1467 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1467) x_1467)))).

[ Q_, _H_mk_FinSet, x_1467 ] FinSet_ind Q_ _H_mk_FinSet x_1467 -->
  matita_basics_finset.filter_FinSet cic.prop
    (x_1467 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1467 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1467) x_1467)
    (matita_basics_finset.FinSet_ind_body Q_ _H_mk_FinSet) x_1467.

[ Q_, _H_mk_FinSet, x_1467 ] FinSet_ind_body Q_ _H_mk_FinSet x_1467 -->
  matita_basics_finset.match_FinSet cic.prop
    (_x_1467 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1467)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1467.

def FinSet_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (_x_1469 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (_x_1469 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1469 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1469)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1469 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1469)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (x_1469 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1469 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1469) x_1469)))).

def FinSet_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (_x_1469 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (_x_1469 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1469 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1469)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1469 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1469)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (x_1469 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1469 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1469) x_1469)))).

[ Q_, _H_mk_FinSet, x_1469 ] FinSet_rect_Type4 Q_ _H_mk_FinSet x_1469 -->
  matita_basics_finset.filter_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1469 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1469 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1469) x_1469)
    (matita_basics_finset.FinSet_rect_Type4_body Q_ _H_mk_FinSet) x_1469.

[ Q_, _H_mk_FinSet, x_1469 ]
  FinSet_rect_Type4_body Q_ _H_mk_FinSet x_1469 -->
  matita_basics_finset.match_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1469 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1469)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1469.

def FinSet_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (_x_1471 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (_x_1471 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1471 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1471)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1471 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1471)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (x_1471 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1471 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1471) x_1471)))).

def FinSet_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (_x_1471 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (_x_1471 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1471 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1471)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1471 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1471)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (x_1471 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1471 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1471) x_1471)))).

[ Q_, _H_mk_FinSet, x_1471 ] FinSet_rect_Type5 Q_ _H_mk_FinSet x_1471 -->
  matita_basics_finset.filter_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1471 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1471 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1471) x_1471)
    (matita_basics_finset.FinSet_rect_Type5_body Q_ _H_mk_FinSet) x_1471.

[ Q_, _H_mk_FinSet, x_1471 ]
  FinSet_rect_Type5_body Q_ _H_mk_FinSet x_1471 -->
  matita_basics_finset.match_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1471 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1471)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1471.

def FinSet_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (_x_1473 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (_x_1473 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1473 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1473)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1473 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1473)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (x_1473 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1473 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1473) x_1473)))).

def FinSet_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (_x_1473 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (_x_1473 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1473 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1473)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1473 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1473)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (x_1473 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1473 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1473) x_1473)))).

[ Q_, _H_mk_FinSet, x_1473 ] FinSet_rect_Type3 Q_ _H_mk_FinSet x_1473 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1473 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1473 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1473) x_1473)
    (matita_basics_finset.FinSet_rect_Type3_body Q_ _H_mk_FinSet) x_1473.

[ Q_, _H_mk_FinSet, x_1473 ]
  FinSet_rect_Type3_body Q_ _H_mk_FinSet x_1473 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1473 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1473)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1473.

def FinSet_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (_x_1475 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (_x_1475 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1475 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1475)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1475 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1475)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (x_1475 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1475 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1475) x_1475)))).

def FinSet_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (_x_1475 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (_x_1475 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1475 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1475)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1475 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1475)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (x_1475 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1475 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1475) x_1475)))).

[ Q_, _H_mk_FinSet, x_1475 ] FinSet_rect_Type2 Q_ _H_mk_FinSet x_1475 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s (cic.s cic.z)))
    (x_1475 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1475 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1475) x_1475)
    (matita_basics_finset.FinSet_rect_Type2_body Q_ _H_mk_FinSet) x_1475.

[ Q_, _H_mk_FinSet, x_1475 ]
  FinSet_rect_Type2_body Q_ _H_mk_FinSet x_1475 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s (cic.s cic.z)))
    (_x_1475 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1475)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1475.

def FinSet_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (_x_1477 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (_x_1477 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1477 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1477)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1477 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1477)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (x_1477 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1477 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1477) x_1477)))).

def FinSet_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (_x_1477 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (_x_1477 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1477 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1477)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1477 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1477)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (x_1477 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1477 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1477) x_1477)))).

[ Q_, _H_mk_FinSet, x_1477 ] FinSet_rect_Type1 Q_ _H_mk_FinSet x_1477 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s cic.z))
    (x_1477 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1477 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1477) x_1477)
    (matita_basics_finset.FinSet_rect_Type1_body Q_ _H_mk_FinSet) x_1477.

[ Q_, _H_mk_FinSet, x_1477 ]
  FinSet_rect_Type1_body Q_ _H_mk_FinSet x_1477 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s cic.z))
    (_x_1477 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1477)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1477.

def FinSet_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_x_1479 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (_x_1479 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1479 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1479)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1479 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1479)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (x_1479 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1479 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1479) x_1479)))).

def FinSet_rect_Type0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_x_1479 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (_x_1479 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1479 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1479)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1479 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1479)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (x_1479 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1479 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1479) x_1479)))).

[ Q_, _H_mk_FinSet, x_1479 ] FinSet_rect_Type0 Q_ _H_mk_FinSet x_1479 -->
  matita_basics_finset.filter_FinSet (cic.type cic.z)
    (x_1479 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1479 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1479) x_1479)
    (matita_basics_finset.FinSet_rect_Type0_body Q_ _H_mk_FinSet) x_1479.

[ Q_, _H_mk_FinSet, x_1479 ]
  FinSet_rect_Type0_body Q_ _H_mk_FinSet x_1479 -->
  matita_basics_finset.match_FinSet (cic.type cic.z)
    (_x_1479 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1479)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1479.

def FinSet_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (_x_1481 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (_x_1481 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1481 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1481)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1481 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1481)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (x_1481 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1481 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1481) x_1481)))).

def FinSet_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_finset.FinSet
              (_x_1481 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_finset.FinSet
                   (_x_1481 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1481 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1481)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1481 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1481)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (x_1481 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1481 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1481) x_1481)))).

[ Q_, _H_mk_FinSet, x_1481 ] FinSet_rect_CProp4 Q_ _H_mk_FinSet x_1481 -->
  matita_basics_finset.filter_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1481 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1481 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1481) x_1481)
    (matita_basics_finset.FinSet_rect_CProp4_body Q_ _H_mk_FinSet) x_1481.

[ Q_, _H_mk_FinSet, x_1481 ]
  FinSet_rect_CProp4_body Q_ _H_mk_FinSet x_1481 -->
  matita_basics_finset.match_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1481 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1481)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1481.

def FinSet_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (_x_1483 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (_x_1483 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1483 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1483)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1483 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1483)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (x_1483 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1483 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1483) x_1483)))).

def FinSet_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_finset.FinSet
              (_x_1483 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_finset.FinSet
                   (_x_1483 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1483 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1483)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1483 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1483)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (x_1483 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1483 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1483) x_1483)))).

[ Q_, _H_mk_FinSet, x_1483 ] FinSet_rect_CProp5 Q_ _H_mk_FinSet x_1483 -->
  matita_basics_finset.filter_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1483 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1483 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1483) x_1483)
    (matita_basics_finset.FinSet_rect_CProp5_body Q_ _H_mk_FinSet) x_1483.

[ Q_, _H_mk_FinSet, x_1483 ]
  FinSet_rect_CProp5_body Q_ _H_mk_FinSet x_1483 -->
  matita_basics_finset.match_FinSet
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1483 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1483)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1483.

def FinSet_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (_x_1485 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (_x_1485 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1485 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1485)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1485 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1485)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (x_1485 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1485 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1485) x_1485)))).

def FinSet_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_finset.FinSet
              (_x_1485 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_finset.FinSet
                   (_x_1485 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1485 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1485)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1485 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1485)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (x_1485 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1485 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1485) x_1485)))).

[ Q_, _H_mk_FinSet, x_1485 ] FinSet_rect_CProp3 Q_ _H_mk_FinSet x_1485 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1485 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1485 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1485) x_1485)
    (matita_basics_finset.FinSet_rect_CProp3_body Q_ _H_mk_FinSet) x_1485.

[ Q_, _H_mk_FinSet, x_1485 ]
  FinSet_rect_CProp3_body Q_ _H_mk_FinSet x_1485 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1485 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1485)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1485.

def FinSet_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (_x_1487 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (_x_1487 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1487 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1487)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1487 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1487)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (x_1487 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1487 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1487) x_1487)))).

def FinSet_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_finset.FinSet
              (_x_1487 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_finset.FinSet
                   (_x_1487 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1487 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1487)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1487 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1487)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (x_1487 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1487 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1487) x_1487)))).

[ Q_, _H_mk_FinSet, x_1487 ] FinSet_rect_CProp2 Q_ _H_mk_FinSet x_1487 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s (cic.s cic.z)))
    (x_1487 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1487 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1487) x_1487)
    (matita_basics_finset.FinSet_rect_CProp2_body Q_ _H_mk_FinSet) x_1487.

[ Q_, _H_mk_FinSet, x_1487 ]
  FinSet_rect_CProp2_body Q_ _H_mk_FinSet x_1487 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s (cic.s cic.z)))
    (_x_1487 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1487)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1487.

def FinSet_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (_x_1489 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (_x_1489 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1489 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1489)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1489 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1489)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (x_1489 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1489 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1489) x_1489)))).

def FinSet_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
              (_x_1489 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_finset.FinSet
                   (_x_1489 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1489 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1489)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1489 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1489)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (x_1489 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1489 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1489) x_1489)))).

[ Q_, _H_mk_FinSet, x_1489 ] FinSet_rect_CProp1 Q_ _H_mk_FinSet x_1489 -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s cic.z))
    (x_1489 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1489 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1489) x_1489)
    (matita_basics_finset.FinSet_rect_CProp1_body Q_ _H_mk_FinSet) x_1489.

[ Q_, _H_mk_FinSet, x_1489 ]
  FinSet_rect_CProp1_body Q_ _H_mk_FinSet x_1489 -->
  matita_basics_finset.match_FinSet (cic.type (cic.s cic.z))
    (_x_1489 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1489)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1489.

def FinSet_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_x_1491 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (_x_1491 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1491 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1491)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1491 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1491)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (x_1491 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1491 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1491) x_1491)))).

def FinSet_rect_CProp0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_x_1491 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet
                   (_x_1491 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_deqsets.DeqSet
                 (FinSetcarr :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) FinSetcarr)))
                    (enum :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                          matita_basics_bool.true)
                       (_enum_unique :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb FinSetcarr x
                                   enum)
                                matita_basics_bool.true))
                          (_enum_complete :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true)) =>
                           (_x_1491 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            Q_ _x_1491)
                             (matita_basics_finset.mk_FinSet FinSetcarr enum
                                _enum_unique _enum_complete))))))
              (_H_mk_FinSet :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_deqsets.DeqSet
                      (FinSetcarr :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) FinSetcarr)))
                         (enum :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx)
                                       FinSetcarr))) =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb FinSetcarr
                                  enum)
                               matita_basics_bool.true)
                            (_enum_unique :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (matita_basics_lists_listb.uniqueb
                                       FinSetcarr enum)
                                    matita_basics_bool.true) =>
                             cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        FinSetcarr x enum)
                                     matita_basics_bool.true))
                               (_enum_complete :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr)
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               FinSetcarr) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             FinSetcarr x enum)
                                          matita_basics_bool.true)) =>
                                (_x_1491 :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_finset.FinSet =>
                                 Q_ _x_1491)
                                  (matita_basics_finset.mk_FinSet FinSetcarr
                                     enum _enum_unique _enum_complete)))))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (x_1491 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  (_x_1491 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   Q_ _x_1491) x_1491)))).

[ Q_, _H_mk_FinSet, x_1491 ] FinSet_rect_CProp0 Q_ _H_mk_FinSet x_1491 -->
  matita_basics_finset.filter_FinSet (cic.type cic.z)
    (x_1491 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_x_1491 :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      Q_ _x_1491) x_1491)
    (matita_basics_finset.FinSet_rect_CProp0_body Q_ _H_mk_FinSet) x_1491.

[ Q_, _H_mk_FinSet, x_1491 ]
  FinSet_rect_CProp0_body Q_ _H_mk_FinSet x_1491 -->
  matita_basics_finset.match_FinSet (cic.type cic.z)
    (_x_1491 :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     Q_ _x_1491)
    (FinSetcarr :
       cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     enum :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
     _enum_unique :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb FinSetcarr enum)
            matita_basics_bool.true) =>
     _enum_complete :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) FinSetcarr)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) FinSetcarr) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb FinSetcarr x enum)
               matita_basics_bool.true)) =>
     _H_mk_FinSet FinSetcarr enum _enum_unique _enum_complete)
    x_1491.

def FinSetcarr :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            matita_basics_deqsets.DeqSet)).

def FinSetcarr_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            matita_basics_deqsets.DeqSet)).

[ _xxx ] FinSetcarr _xxx -->
  matita_basics_finset.filter_FinSet (cic.type (cic.s cic.z))
    (_xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     matita_basics_deqsets.DeqSet)
    matita_basics_finset.FinSetcarr_body _xxx.

[ _xxx ] FinSetcarr_body _xxx -->
  matita_basics_finset.match_FinSet (cic.type (cic.s cic.z))
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     matita_basics_deqsets.DeqSet)
    (yyy : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     __ :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx1 :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx1) yyy))) =>
     _0 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __1)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb yyy __)
            matita_basics_bool.true) =>
     _1 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx1 :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx1) yyy)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx1) yyy) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __1)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb yyy x __)
               matita_basics_bool.true)) =>
     yyy)
    _xxx.

def enum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            (_A : cic.Univ (cic.type cic.z) =>
             matita_basics_lists_list.list
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr xxx))))).

def enum_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            (_A : cic.Univ (cic.type cic.z) =>
             matita_basics_lists_list.list
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr xxx))))).

[ xxx ] enum xxx -->
  matita_basics_finset.filter_FinSet (cic.type cic.z)
    (xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_A : cic.Univ (cic.type cic.z) =>
      matita_basics_lists_list.list
        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
       (cic.lift (cic.type cic.z) (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_finset.FinSetcarr xxx))))
    matita_basics_finset.enum_body xxx.

[ xxx ] enum_body xxx -->
  matita_basics_finset.match_FinSet (cic.type cic.z)
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (_A : cic.Univ (cic.type cic.z) =>
      matita_basics_lists_list.list
        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
       (cic.lift (cic.type cic.z) (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_finset.FinSetcarr xxx0))))
    (__ : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     yyy :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) __))) =>
     _0 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __1)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb __ yyy)
            matita_basics_bool.true) =>
     _1 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) __)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) __) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __1)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb __ x yyy)
               matita_basics_bool.true)) =>
     yyy)
    xxx.

def enum_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb
                 (matita_basics_finset.FinSetcarr xxx)
                 (matita_basics_finset.enum xxx))
              matita_basics_bool.true)).

def enum_unique_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb
                 (matita_basics_finset.FinSetcarr xxx)
                 (matita_basics_finset.enum xxx))
              matita_basics_bool.true)).

[ xxx ] enum_unique xxx -->
  matita_basics_finset.filter_FinSet cic.prop
    (xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      matita_basics_logic.eq
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) A)
        _x __)
       (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
          matita_basics_bool.bool)
       (matita_basics_lists_listb.uniqueb
          (matita_basics_finset.FinSetcarr xxx)
          (matita_basics_finset.enum xxx))
       matita_basics_bool.true)
    matita_basics_finset.enum_unique_body xxx.

[ xxx ] enum_unique_body xxx -->
  matita_basics_finset.match_FinSet cic.prop
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
      matita_basics_logic.eq
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) A)
        _x __)
       (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
          matita_basics_bool.bool)
       (matita_basics_lists_listb.uniqueb
          (matita_basics_finset.FinSetcarr xxx0)
          (matita_basics_finset.enum xxx0))
       matita_basics_bool.true)
    (__ : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     _0 :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) __))) =>
     yyy :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __1)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb __ _0) matita_basics_bool.true) =>
     _1 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) __)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) __) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __1)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb __ x _0)
               matita_basics_bool.true)) =>
     yyy)
    xxx.

def enum_complete :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx)
                 (matita_basics_finset.FinSetcarr xxx))
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.FinSetcarr xxx)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb
                    (matita_basics_finset.FinSetcarr xxx) x
                    (matita_basics_finset.enum xxx))
                 matita_basics_bool.true))).

def enum_complete_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx)
                 (matita_basics_finset.FinSetcarr xxx))
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.FinSetcarr xxx)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb
                    (matita_basics_finset.FinSetcarr xxx) x
                    (matita_basics_finset.enum xxx))
                 matita_basics_bool.true))).

[ xxx ] enum_complete xxx -->
  matita_basics_finset.filter_FinSet cic.prop
    (xxx : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     cic.prod (cic.type cic.z) cic.prop
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx)
          (matita_basics_finset.FinSetcarr xxx))
       (x :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx)
               (matita_basics_finset.FinSetcarr xxx)) =>
        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         matita_basics_logic.eq
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A)
           _x __)
          (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_bool.bool)
          (matita_basics_lists_listb.memb
             (matita_basics_finset.FinSetcarr xxx) x
             (matita_basics_finset.enum xxx))
          matita_basics_bool.true))
    matita_basics_finset.enum_complete_body xxx.

[ xxx ] enum_complete_body xxx -->
  matita_basics_finset.match_FinSet cic.prop
    (xxx0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
     cic.prod (cic.type cic.z) cic.prop
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx)
          (matita_basics_finset.FinSetcarr xxx0))
       (x :
          cic.Term (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx)
               (matita_basics_finset.FinSetcarr xxx0)) =>
        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
         matita_basics_logic.eq
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) A)
           _x __)
          (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_bool.bool)
          (matita_basics_lists_listb.memb
             (matita_basics_finset.FinSetcarr xxx0) x
             (matita_basics_finset.enum xxx0))
          matita_basics_bool.true))
    (__ : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
     _0 :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) __))) =>
     _1 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __1)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (matita_basics_lists_listb.uniqueb __ _0) matita_basics_bool.true) =>
     yyy :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) __)
            (x :
               cic.Term (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) __) =>
             (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
              _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              matita_basics_logic.eq
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                _x __1)
               (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_bool.bool)
               (matita_basics_lists_listb.memb __ x _0)
               matita_basics_bool.true)) =>
     yyy)
    xxx.

def FinSet_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 matita_basics_finset.FinSet
                 (_z2732 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ cic.prop))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                      matita_basics_finset.FinSet
                      (_z2732 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ cic.prop)) =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type (cic.s cic.z)) cic.prop
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop cic.prop
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2733 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2732 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2732)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term cic.prop
                      (cic.prod (cic.type (cic.s cic.z)) cic.prop
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z) cic.prop
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2733 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2732 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2732)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2732 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2732) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             matita_basics_finset.FinSet
             (_z2732 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ cic.prop)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type (cic.s cic.z)) cic.prop
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2733 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2732 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2732)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2733 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2732 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2732) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_ind
           (_x_1467 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1467)
                 (_z2733 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1467) =>
                  (_z2732 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2732) _x_1467)))
           H1 Hterm).

def FinSet_inv_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (_z2738 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_finset.FinSet
                      (_z2738 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2739 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2738 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2738)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2739 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2738 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2738)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2738 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2738) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             matita_basics_finset.FinSet
             (_z2738 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2739 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2738 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2738)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2739 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2738 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2738) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_Type4
           (_x_1469 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1469)
                 (_z2739 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1469) =>
                  (_z2738 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2738) _x_1469)))
           H1 Hterm).

def FinSet_inv_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (_z2744 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_finset.FinSet
                      (_z2744 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2745 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2744 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2744)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2745 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2744 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2744)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2744 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2744) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_finset.FinSet
             (_z2744 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2745 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2744 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2744)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2745 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2744 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2744) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_Type3
           (_x_1473 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1473)
                 (_z2745 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1473) =>
                  (_z2744 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2744) _x_1473)))
           H1 Hterm).

def FinSet_inv_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (_z2750 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_finset.FinSet
                      (_z2750 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2751 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2750 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2750)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2751 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2750 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2750)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2750 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2750) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_finset.FinSet
             (_z2750 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2751 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2750 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2750)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2751 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2750 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2750) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_Type2
           (_x_1475 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1475)
                 (_z2751 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1475) =>
                  (_z2750 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2750) _x_1475)))
           H1 Hterm).

def FinSet_inv_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (_z2756 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s cic.z))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_finset.FinSet
                      (_z2756 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s cic.z)))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2757 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2756 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2756)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2757 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2756 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2756)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2756 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2756) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_finset.FinSet
             (_z2756 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s cic.z)))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type (cic.s cic.z))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2757 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2756 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2756)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2757 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2756 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2756) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_Type1
           (_x_1477 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1477)
                 (_z2757 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1477) =>
                  (_z2756 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2756) _x_1477)))
           H1 Hterm).

def FinSet_inv_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (_z2762 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type cic.z)))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_finset.FinSet
                      (_z2762 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type cic.z))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2763 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2762 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2762)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop (cic.type cic.z)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2763 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2762 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2762)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2762 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2762) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             matita_basics_finset.FinSet
             (_z2762 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type cic.z))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type cic.z)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type cic.z)
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type cic.z)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2763 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2762 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2762)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2763 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2762 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2762) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_Type0
           (_x_1479 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1479)
                 (_z2763 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1479) =>
                  (_z2762 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2762) _x_1479)))
           H1 Hterm).

def FinSet_inv_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_finset.FinSet
                 (_z2768 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_finset.FinSet
                      (_z2768 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2769 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2768 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2768)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2769 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2768 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2768)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2768 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2768) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             matita_basics_finset.FinSet
             (_z2768 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2769 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2768 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2768)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2769 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2768 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2768) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_CProp4
           (_x_1481 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1481)
                 (_z2769 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1481) =>
                  (_z2768 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2768) _x_1481)))
           H1 Hterm).

def FinSet_inv_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_finset.FinSet
                 (_z2774 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_finset.FinSet
                      (_z2774 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2775 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2774 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2774)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2775 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2774 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2774)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2774 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2774) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_finset.FinSet
             (_z2774 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2775 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2774 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2774)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2775 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2774 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2774) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_CProp3
           (_x_1485 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1485)
                 (_z2775 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1485) =>
                  (_z2774 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2774) _x_1485)))
           H1 Hterm).

def FinSet_inv_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_finset.FinSet
                 (_z2780 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_finset.FinSet
                      (_z2780 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2781 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2780 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2780)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2781 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2780 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2780)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2780 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2780) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_finset.FinSet
             (_z2780 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2781 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2780 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2780)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2781 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2780 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2780) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_CProp2
           (_x_1487 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1487)
                 (_z2781 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1487) =>
                  (_z2780 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2780) _x_1487)))
           H1 Hterm).

def FinSet_inv_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet
                 (_z2786 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type (cic.s cic.z))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_finset.FinSet
                      (_z2786 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type (cic.s cic.z)))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2787 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2786 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2786)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2787 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2786 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2786)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2786 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2786) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
             matita_basics_finset.FinSet
             (_z2786 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type (cic.s cic.z)))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type (cic.s cic.z))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2787 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2786 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2786)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2787 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2786 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2786) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_CProp1
           (_x_1489 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1489)
                 (_z2787 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1489) =>
                  (_z2786 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2786) _x_1489)))
           H1 Hterm).

def FinSet_inv_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (Hterm :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 matita_basics_finset.FinSet
                 (_z2792 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  cic.univ (cic.type cic.z)))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) matita_basics_finset.FinSet
                      (_z2792 :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_finset.FinSet =>
                       cic.univ (cic.type cic.z))) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    matita_basics_deqsets.DeqSet
                    (FinSetcarr :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) FinSetcarr)))
                       (enum :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr))) =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb FinSetcarr
                                enum)
                             matita_basics_bool.true)
                          (_enum_unique :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (cic.prod (cic.type cic.z) cic.prop
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) FinSetcarr)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb FinSetcarr
                                      x enum)
                                   matita_basics_bool.true))
                             (_enum_complete :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true)) =>
                              cic.prod cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_finset.FinSet)
                                   Hterm
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete))
                                (_z2793 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete)) =>
                                 (_z2792 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  P _z2792)
                                   (matita_basics_finset.mk_FinSet FinSetcarr
                                      enum _enum_unique _enum_complete)))))))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                         matita_basics_deqsets.DeqSet
                         (FinSetcarr :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     FinSetcarr)))
                            (enum :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          FinSetcarr))) =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb
                                     FinSetcarr enum)
                                  matita_basics_bool.true)
                               (_enum_unique :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.uniqueb
                                          FinSetcarr enum)
                                       matita_basics_bool.true) =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) cic.prop
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        FinSetcarr)
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           FinSetcarr x enum)
                                        matita_basics_bool.true))
                                  (_enum_complete :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             FinSetcarr)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  FinSetcarr) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                FinSetcarr x enum)
                                             matita_basics_bool.true)) =>
                                   cic.prod cic.prop (cic.type cic.z)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_finset.FinSet)
                                        Hterm
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))
                                     (_z2793 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_finset.FinSet)
                                             Hterm
                                             (matita_basics_finset.mk_FinSet
                                                FinSetcarr enum _enum_unique
                                                _enum_complete)) =>
                                      (_z2792 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       P _z2792)
                                        (matita_basics_finset.mk_FinSet
                                           FinSetcarr enum _enum_unique
                                           _enum_complete))))))) =>
                  (_z2792 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2792) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             matita_basics_finset.FinSet
             (_z2792 :
                cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
              cic.univ (cic.type cic.z))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
             matita_basics_deqsets.DeqSet
             (FinSetcarr :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              cic.prod (cic.type cic.z) (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) FinSetcarr)))
                (enum :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) FinSetcarr))) =>
                 cic.prod cic.prop (cic.type cic.z)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                      matita_basics_bool.true)
                   (_enum_unique :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb FinSetcarr enum)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop (cic.type cic.z)
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) FinSetcarr)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb FinSetcarr x enum)
                            matita_basics_bool.true))
                      (_enum_complete :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) FinSetcarr)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      FinSetcarr) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (matita_basics_lists_listb.memb FinSetcarr x
                                    enum)
                                 matita_basics_bool.true)) =>
                       cic.prod cic.prop (cic.type cic.z)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_finset.FinSet)
                            Hterm
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))
                         (_z2793 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_finset.FinSet)
                                 Hterm
                                 (matita_basics_finset.mk_FinSet FinSetcarr
                                    enum _enum_unique _enum_complete)) =>
                          (_z2792 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           P _z2792)
                            (matita_basics_finset.mk_FinSet FinSetcarr enum
                               _enum_unique _enum_complete))))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_finset.FinSet)
                 Hterm Hterm)
              (_z2793 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_finset.FinSet)
                      Hterm Hterm) =>
               (_z2792 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                P _z2792) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_finset.FinSet)
            Hterm))
        (matita_basics_finset.FinSet_rect_CProp0
           (_x_1491 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_finset.FinSet)
                    Hterm _x_1491)
                 (_z2793 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_finset.FinSet)
                         Hterm _x_1491) =>
                  (_z2792 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   P _z2792) _x_1491)))
           H1 Hterm).

def FinSetcarr__o__carr :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (x0 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.univ (cic.type cic.z)))
      :=
      x0 : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      (_xxx :
         cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
       matita_basics_deqsets.carr _xxx) (matita_basics_finset.FinSetcarr x0).

def bool_enum_unique :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.uniqueb
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_deqsets.mk_DeqSet
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             matita_basics_bool.bool)
                          matita_basics_deqsets.beqb
                          matita_basics_deqsets.beqb_true)))
                 matita_basics_bool.true
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                matita_basics_bool.bool)
                             matita_basics_deqsets.beqb
                             matita_basics_deqsets.beqb_true)))
                    matita_basics_bool.false
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             (matita_basics_deqsets.mk_DeqSet
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   matita_basics_bool.bool)
                                matita_basics_deqsets.beqb
                                matita_basics_deqsets.beqb_true)))))))
           matita_basics_bool.true)
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        (matita_basics_lists_listb.uniqueb
           (matita_basics_deqsets.mk_DeqSet
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_basics_bool.bool)
              matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
           (matita_basics_lists_list.cons
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_bool.false
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_basics_bool.bool))))).

def bool_enum_complete :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_basics_bool.bool
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb
                 (matita_basics_deqsets.mk_DeqSet
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_basics_bool.bool)
                    matita_basics_deqsets.beqb
                    matita_basics_deqsets.beqb_true)
                 x
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.mk_DeqSet
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                matita_basics_bool.bool)
                             matita_basics_deqsets.beqb
                             matita_basics_deqsets.beqb_true)))
                    matita_basics_bool.true
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             (matita_basics_deqsets.mk_DeqSet
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   matita_basics_bool.bool)
                                matita_basics_deqsets.beqb
                                matita_basics_deqsets.beqb_true)))
                       matita_basics_bool.false
                       (matita_basics_lists_list.nil
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.mk_DeqSet
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      matita_basics_bool.bool)
                                   matita_basics_deqsets.beqb
                                   matita_basics_deqsets.beqb_true)))))))
              matita_basics_bool.true))
      :=
      _clearme : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
              __
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_basics_bool.bool)))))
           matita_basics_bool.true)
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
              matita_basics_bool.true
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_basics_bool.bool))))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.mk_DeqSet
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_deqsets.beqb matita_basics_deqsets.beqb_true)
              matita_basics_bool.false
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_basics_bool.bool))))))
        _clearme.

def FinBool : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet
      :=
      matita_basics_finset.mk_FinSet matita_basics_deqsets.DeqBool
        (matita_basics_lists_list.cons
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx)
                 matita_basics_deqsets.DeqBool))
           matita_basics_bool.true
           (matita_basics_lists_list.cons
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    matita_basics_deqsets.DeqBool))
              matita_basics_bool.false
              (matita_basics_lists_list.nil
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       matita_basics_deqsets.DeqBool)))))
        matita_basics_finset.bool_enum_unique
        matita_basics_finset.bool_enum_complete.

def eqbnat_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.iff _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb n m) matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n m))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.conj
        (cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb n m) matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n m) matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n m))
        (cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n m)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   n m) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb n m) matita_basics_bool.true))
        (matita_arithmetics_nat.eqb_true_to_eq n m)
        (matita_arithmetics_nat.eq_to_eqb_true n m).

def DeqNat : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet
      :=
      matita_basics_deqsets.mk_DeqSet
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.eqb matita_basics_finset.eqbnat_true.

def lt_to_le :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) n m)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) n m) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) n m))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) n m) =>
      matita_arithmetics_nat.lt_to_le n m auto.

def enumnaux :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) n n0)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) n n0) =>
                  (_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((A : cic.Univ (cic.type cic.z) =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__1 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_types.Sig
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) x n0)))))))).

def enumnaux_body :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) n n0)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) n n0) =>
                  (_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((A : cic.Univ (cic.type cic.z) =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__1 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_types.Sig
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) x n0)))))))).

[ n ] enumnaux n -->
  matita_arithmetics_nat.filter_nat (cic.type cic.z)
    (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
       (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod cic.prop (cic.type cic.z)
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) n n0)
          (__ :
             cic.Term cic.prop
               ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.le _n __) n n0) =>
           (_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((A : cic.Univ (cic.type cic.z) =>
                  _f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__1 : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_types.Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (x :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) x n0)))))))
    matita_basics_finset.enumnaux_body n.

[ n ] enumnaux_body n -->
  m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat (cic.type cic.z)
    (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     cic.prod cic.prop (cic.type cic.z)
       ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le _n __) n0 m)
       (__ :
          cic.Term cic.prop
            ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.le _n __) n0 m) =>
        (_A : cic.Univ (cic.type cic.z) =>
         matita_basics_lists_list.list
           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             ((A : cic.Univ (cic.type cic.z) =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_types.Sig
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __1 __2) x m))))))
    (h :
       cic.Term cic.prop
         ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O m) =>
     matita_basics_lists_list.nil
       (cic.lift (cic.type cic.z) (cic.type cic.z)
          ((A : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                   (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
            matita_basics_types.Sig
              (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat)
             (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.lift cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) x m)))))
    (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     h :
       cic.Term cic.prop
         ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.lt __ __1) p m) =>
     matita_basics_lists_list.cons
       (cic.lift (cic.type cic.z) (cic.type cic.z)
          ((A : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                   (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
            matita_basics_types.Sig
              (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat)
             (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.lift cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) x m))))
       (matita_basics_types.mk_Sig
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat)
          (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.lift cic.prop cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) x m))
          p h)
       (matita_basics_finset.enumnaux p m
          (matita_basics_finset.lt_to_le p m h)))
    n.

def enumn :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (_A : cic.Univ (cic.type cic.z) =>
             matita_basics_lists_list.list
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((A : cic.Univ (cic.type cic.z) =>
                   _f :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_types.Sig
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x n))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_finset.enumnaux n n (matita_arithmetics_nat.le_n n).

def Nat_to :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_basics_deqsets.DeqSet))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_deqsets.DeqSig matita_basics_finset.DeqNat
        (i :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
         cic.lift cic.prop cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) i n)).

def memb_enumn :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat)
           (m :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   matita_basics_finset.DeqNat) =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat)
              (n :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      matita_basics_finset.DeqNat) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    matita_basics_finset.DeqNat)
                 (i :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         matita_basics_finset.DeqNat) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n m)
                    (h :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) n m) =>
                     cic.prod cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i m)
                       (k :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m) =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) n i)
                          (__ :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __) n i) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb
                                   (matita_basics_finset.Nat_to m)
                                   (matita_basics_types.mk_Sig
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            matita_basics_finset.DeqNat))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              matita_basics_finset.DeqNat) =>
                                       cic.lift cic.prop cic.prop
                                         ((__1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __1 __2)
                                            x m))
                                      i k)
                                   (matita_basics_finset.enumnaux n m h)))
                             matita_basics_bool.true)))))))
      :=
      m :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
      n :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat)
              (i :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      matita_basics_finset.DeqNat) =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) _x_365 m)
                 (h :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) _x_365 m) =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i m)
                    (k :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) _x_365 i)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) _x_365 i) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.notb
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.Nat_to m)
                                (matita_basics_types.mk_Sig
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         matita_basics_finset.DeqNat))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat) =>
                                    cic.lift cic.prop cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) x
                                         m))
                                   i k)
                                (matita_basics_finset.enumnaux _x_365 m h)))
                          matita_basics_bool.true))))))
        (i :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
         h :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O m) =>
         k :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i m) =>
         auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O i) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_bool.notb
              (matita_basics_lists_listb.memb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    i k)
                 (matita_basics_finset.enumnaux matita_arithmetics_nat.O m h))))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   matita_basics_finset.DeqNat)
                (i :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx)
                        matita_basics_finset.DeqNat) =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) n0 m)
                   (h :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) n0 m) =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m)
                      (k :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i m) =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) n0 i)
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) n0 i) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.notb
                               (matita_basics_lists_listb.memb
                                  (matita_basics_finset.Nat_to m)
                                  (matita_basics_types.mk_Sig
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat))
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             matita_basics_finset.DeqNat) =>
                                      cic.lift cic.prop cic.prop
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           x m))
                                     i k)
                                  (matita_basics_finset.enumnaux n0 m h)))
                            matita_basics_bool.true))))) =>
         i :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
         ltm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n0)
                m) =>
         k :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i m) =>
         ltni :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n0)
                i) =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (matita_basics_bool.notb
              (matita_basics_lists_listb.memb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    i k)
                 (matita_basics_finset.enumnaux (matita_arithmetics_nat.S n0)
                    m ltm)))
           (matita_basics_bool.noteq_to_eqnot matita_basics_bool.true
              (matita_basics_lists_listb.memb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    i k)
                 (matita_basics_finset.enumnaux (matita_arithmetics_nat.S n0)
                    m ltm))
              (matita_basics_logic.sym_not_eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb
                    (matita_basics_finset.Nat_to m)
                    (matita_basics_types.mk_Sig
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             matita_basics_finset.DeqNat))
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               matita_basics_finset.DeqNat) =>
                        cic.lift cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) x m))
                       i k)
                    (matita_basics_finset.enumnaux
                       (matita_arithmetics_nat.S n0) m ltm))
                 matita_basics_bool.true
                 (matita_basics_logic.nmk
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb
                          (matita_basics_finset.Nat_to m)
                          (matita_basics_types.mk_Sig
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx)
                                   matita_basics_finset.DeqNat))
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     matita_basics_finset.DeqNat) =>
                              cic.lift cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) x m))
                             i k)
                          (matita_basics_finset.enumnaux
                             (matita_arithmetics_nat.S n0) m ltm))
                       matita_basics_bool.true)
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb
                               (matita_basics_finset.Nat_to m)
                               (matita_basics_types.mk_Sig
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        matita_basics_finset.DeqNat))
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx)
                                          matita_basics_finset.DeqNat) =>
                                   cic.lift cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) x m))
                                  i k)
                               (matita_basics_finset.enumnaux
                                  (matita_arithmetics_nat.S n0) m ltm))
                            matita_basics_bool.true) =>
                     matita_basics_logic.match_Or cic.prop
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb
                             (matita_basics_finset.Nat_to m)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr
                                      matita_basics_finset.DeqNat))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     (matita_basics_deqsets.carr
                                        matita_basics_finset.DeqNat) =>
                                 cic.lift cic.prop cic.prop
                                   (matita_arithmetics_nat.lt x m))
                                i k)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   matita_arithmetics_nat.nat)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop cic.prop
                                   (matita_arithmetics_nat.lt x m))
                                n0 ltm))
                          matita_basics_bool.true)
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb
                             (matita_basics_finset.Nat_to m)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr
                                      matita_basics_finset.DeqNat))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     (matita_basics_deqsets.carr
                                        matita_basics_finset.DeqNat) =>
                                 cic.lift cic.prop cic.prop
                                   (matita_arithmetics_nat.lt x m))
                                i k)
                             (matita_basics_finset.enumnaux n0 m
                                (matita_basics_finset.lt_to_le n0 m ltm)))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.Or _A _B)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb
                                     (matita_basics_finset.Nat_to m)
                                     (matita_basics_types.mk_Sig
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              matita_basics_finset.DeqNat))
                                        (x :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                matita_basics_finset.DeqNat) =>
                                         cic.lift cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              x m))
                                        i k)
                                     (matita_basics_types.mk_Sig
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat)
                                        (x :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.lift cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              x m))
                                        n0 ltm))
                                  matita_basics_bool.true)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_finset.Nat_to m)
                                     (matita_basics_types.mk_Sig
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              matita_basics_finset.DeqNat))
                                        (x :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                matita_basics_finset.DeqNat) =>
                                         cic.lift cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              x m))
                                        i k)
                                     (matita_basics_finset.enumnaux n0 m
                                        (matita_basics_finset.lt_to_le n0 m
                                           ltm)))
                                  matita_basics_bool.true)) =>
                        matita_basics_logic.False)
                       (H1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_arithmetics_nat.eqb i n0)
                               matita_basics_bool.true) =>
                        matita_basics_logic.absurd
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S n0) i)
                          ltni
                          (matita_arithmetics_nat.le_to_not_lt i n0
                             (matita_basics_logic.eq_ind_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n0
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_arithmetics_nat.nat)
                                        x n0) =>
                                 cic.lift cic.prop cic.prop
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __1) x n0))
                                (matita_arithmetics_nat.le_n n0) i
                                (matita_arithmetics_nat.eqb_true_to_eq i n0
                                   H1))))
                       (matita_basics_logic.eq_ind
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.notb
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb
                                   (matita_basics_finset.Nat_to m)
                                   (matita_basics_types.mk_Sig
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            matita_basics_finset.DeqNat))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              matita_basics_finset.DeqNat) =>
                                       cic.lift cic.prop cic.prop
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            x m))
                                      i k)
                                   (matita_basics_finset.enumnaux n0 m
                                      (matita_basics_finset.lt_to_le n0 m ltm)))))
                          (x_1 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           _x_2 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.notb
                                     (matita_basics_bool.notb
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_finset.Nat_to m)
                                           (matita_basics_types.mk_Sig
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    matita_basics_finset.DeqNat))
                                              (x :
                                                 cic.Term (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      matita_basics_finset.DeqNat) =>
                                               cic.lift cic.prop cic.prop
                                                 ((__ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __ __1)
                                                    x m))
                                              i k)
                                           (matita_basics_finset.enumnaux n0
                                              m
                                              (matita_basics_finset.lt_to_le
                                                 n0 m ltm)))))
                                  x_1) =>
                           cic.lift cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x_1 matita_basics_bool.true)
                                (__ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        x_1 matita_basics_bool.true) =>
                                 matita_basics_logic.False)))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     x matita_basics_bool.true) =>
                              cic.lift cic.prop cic.prop
                                (cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_bool.notb x)
                                      matita_basics_bool.true)
                                   (__1 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __1 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __1)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_bool.notb x)
                                           matita_basics_bool.true) =>
                                    matita_basics_logic.False)))
                             (auto :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     matita_basics_bool.false
                                     matita_basics_bool.true) =>
                              matita_basics_logic.absurd
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   matita_basics_bool.false)
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         matita_basics_bool.true x))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      matita_basics_bool.true)
                                   matita_basics_bool.false auto)
                                matita_basics_bool.not_eq_true_false)
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb
                                   (matita_basics_finset.Nat_to m)
                                   (matita_basics_types.mk_Sig
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            matita_basics_finset.DeqNat))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              matita_basics_finset.DeqNat) =>
                                       cic.lift cic.prop cic.prop
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            x m))
                                      i k)
                                   (matita_basics_finset.enumnaux n0 m
                                      (matita_basics_finset.lt_to_le n0 m ltm))))
                             (Hind i (matita_basics_finset.lt_to_le n0 m ltm)
                                k (matita_basics_finset.lt_to_le n0 i ltni)))
                          (matita_basics_lists_listb.memb
                             (matita_basics_finset.Nat_to m)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      matita_basics_finset.DeqNat))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        matita_basics_finset.DeqNat) =>
                                 cic.lift cic.prop cic.prop
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) x m))
                                i k)
                             (matita_basics_finset.enumnaux n0 m
                                (matita_basics_finset.lt_to_le n0 m ltm)))
                          (matita_basics_bool.notb_notb
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.Nat_to m)
                                (matita_basics_types.mk_Sig
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         matita_basics_finset.DeqNat))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat) =>
                                    cic.lift cic.prop cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) x m))
                                   i k)
                                (matita_basics_finset.enumnaux n0 m
                                   (matita_basics_finset.lt_to_le n0 m ltm)))))
                       (matita_basics_bool.orb_true_l
                          (matita_basics_deqsets.eqb
                             (matita_basics_finset.Nat_to m)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      matita_basics_finset.DeqNat))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        matita_basics_finset.DeqNat) =>
                                 cic.lift cic.prop cic.prop
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) x m))
                                i k)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   matita_arithmetics_nat.nat)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop cic.prop
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) x m))
                                n0 ltm))
                          (matita_basics_lists_listb.memb
                             (matita_basics_finset.Nat_to m)
                             (matita_basics_types.mk_Sig
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx)
                                      matita_basics_finset.DeqNat))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx)
                                        matita_basics_finset.DeqNat) =>
                                 cic.lift cic.prop cic.prop
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) x m))
                                i k)
                             (matita_basics_finset.enumnaux n0 m
                                (matita_basics_finset.lt_to_le n0 m ltm)))
                          H))))))
        n.

def enumn_unique_aux :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) n m)
                 (h :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) n m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb
                       (matita_basics_finset.Nat_to m)
                       (matita_basics_finset.enumnaux n m h))
                    matita_basics_bool.true))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) _x_365 m)
                 (h :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) _x_365 m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb
                       (matita_basics_finset.Nat_to m)
                       (matita_basics_finset.enumnaux _x_365 m h))
                    matita_basics_bool.true))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         h :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O m) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.uniqueb (matita_basics_finset.Nat_to m)
              (matita_basics_finset.enumnaux matita_arithmetics_nat.O m h)))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) n0 m)
                   (h :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) n0 m) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb
                         (matita_basics_finset.Nat_to m)
                         (matita_basics_finset.enumnaux n0 m h))
                      matita_basics_bool.true))) =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         h :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n0)
                m) =>
         matita_basics_bool.true_to_andb_true
           (matita_basics_bool.notb
              (matita_basics_lists_listb.memb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    n0 h)
                 (matita_basics_finset.enumnaux n0 m
                    (matita_basics_finset.lt_to_le n0 m h))))
           (matita_basics_lists_listb.uniqueb (matita_basics_finset.Nat_to m)
              (matita_basics_finset.enumnaux n0 m
                 (matita_basics_finset.lt_to_le n0 m h)))
           (matita_basics_finset.memb_enumn m n0 n0
              (matita_basics_finset.lt_to_le n0 m h) h
              (matita_arithmetics_nat.le_n n0))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.uniqueb
                 (matita_basics_finset.Nat_to m)
                 (matita_basics_finset.enumnaux n0 m
                    (matita_basics_finset.lt_to_le n0 m h)))
              (Hind m (matita_basics_finset.lt_to_le n0 m h))))
        n.

def enumn_unique :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb
                 (matita_basics_finset.Nat_to n)
                 (matita_basics_finset.enumn n))
              matita_basics_bool.true))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_finset.enumn_unique_aux n n
        (matita_arithmetics_nat.le_n n).

def enumn_complete_aux :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n m)
                    (h :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) n m) =>
                     cic.prod cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i m)
                       (k :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m) =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.Nat_to m)
                                (matita_basics_types.mk_Sig
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         matita_basics_finset.DeqNat))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat) =>
                                    cic.lift cic.prop cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) x
                                         m))
                                   i k)
                                (matita_basics_finset.enumnaux n m h))
                             matita_basics_bool.true)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) _x_365 m)
                    (h :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) _x_365 m) =>
                     cic.prod cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i m)
                       (k :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m) =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i _x_365)
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i _x_365) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.Nat_to m)
                                (matita_basics_types.mk_Sig
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         matita_basics_finset.DeqNat))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat) =>
                                    cic.lift cic.prop cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) x
                                         m))
                                   i k)
                                (matita_basics_finset.enumnaux _x_365 m h))
                             matita_basics_bool.true)))))))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O n0) =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1) (matita_arithmetics_nat.S i)
                n0) =>
         Hfalse :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1) (matita_arithmetics_nat.S i)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_nat.S i) matita_arithmetics_nat.O)
              Hfalse (matita_arithmetics_nat.not_le_Sn_O i)))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) n0 m)
                      (h :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.le _n __) n0 m) =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m)
                         (k :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i m) =>
                          cic.prod cic.prop cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n0)
                            (__ :
                               cic.Term cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) i n0) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb
                                  (matita_basics_finset.Nat_to m)
                                  (matita_basics_types.mk_Sig
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           matita_basics_finset.DeqNat))
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             matita_basics_finset.DeqNat) =>
                                      cic.lift cic.prop cic.prop
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           x m))
                                     i k)
                                  (matita_basics_finset.enumnaux n0 m h))
                               matita_basics_bool.true)))))) =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         h :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n0)
                m) =>
         k :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i m) =>
         lein :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i
                (matita_arithmetics_nat.S n0)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt i n0)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              i n0)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n0)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      i n0)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_listb.memb
                    (matita_basics_finset.Nat_to m)
                    (matita_basics_types.mk_Sig
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             matita_basics_finset.DeqNat))
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               matita_basics_finset.DeqNat) =>
                        cic.lift cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) x m))
                       i k)
                    (matita_basics_finset.enumnaux n0 m
                       (matita_basics_finset.lt_to_le n0 m h)))
                 (matita_basics_deqsets.eqb (matita_basics_finset.Nat_to m)
                    (matita_basics_types.mk_Sig
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             matita_basics_finset.DeqNat))
                       (x :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               matita_basics_finset.DeqNat) =>
                        cic.lift cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) x m))
                       i k)
                    (matita_basics_types.mk_Sig
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) x m))
                       n0 h)))
              matita_basics_bool.true)
           (ltin :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i n0) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb
                          (matita_basics_finset.Nat_to m)
                          (matita_basics_types.mk_Sig
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx)
                                   matita_basics_finset.DeqNat))
                             (x0 :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     matita_basics_finset.DeqNat) =>
                              cic.lift cic.prop cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) x0 m))
                             i k)
                          (matita_basics_finset.enumnaux n0 m
                             (matita_basics_finset.lt_to_le n0 m h)))
                       x)
                    matita_basics_bool.true))
              (Hind m i (matita_basics_finset.lt_to_le n0 m h) k ltin)
              (matita_basics_deqsets.eqb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    i k)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    n0 h))
              (matita_arithmetics_nat.not_eq_to_eqb_false i n0
                 (matita_arithmetics_nat.lt_to_not_eq i n0 ltin)))
           (eqin :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   i n0) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb
                          (matita_basics_finset.Nat_to m)
                          (matita_basics_types.mk_Sig
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx)
                                   matita_basics_finset.DeqNat))
                             (x0 :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     matita_basics_finset.DeqNat) =>
                              cic.lift cic.prop cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) x0 m))
                             i k)
                          (matita_basics_finset.enumnaux n0 m
                             (matita_basics_finset.lt_to_le n0 m h)))
                       x)
                    matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb
                       (matita_basics_finset.Nat_to m)
                       (matita_basics_types.mk_Sig
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                matita_basics_finset.DeqNat))
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  matita_basics_finset.DeqNat) =>
                           cic.lift cic.prop cic.prop
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) x m))
                          i k)
                       (matita_basics_finset.enumnaux n0 m
                          (matita_basics_finset.lt_to_le n0 m h)))
                    matita_basics_bool.true))
              (matita_basics_deqsets.eqb (matita_basics_finset.Nat_to m)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    i k)
                 (matita_basics_types.mk_Sig
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            matita_basics_finset.DeqNat) =>
                     cic.lift cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) x m))
                    n0 h))
              (matita_arithmetics_nat.eq_to_eqb_true i n0
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n0
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x n0))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n0)
                    i eqin)))
           (matita_arithmetics_nat.le_to_or_lt_eq i n0
              (matita_arithmetics_nat.le_S_S_to_le i n0 lein)))
        n.

def enumn_complete :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx)
                 (matita_basics_finset.Nat_to n))
              (i :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.Nat_to n)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb
                    (matita_basics_finset.Nat_to n) i
                    (matita_basics_finset.enumn n))
                 matita_basics_bool.true)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((A : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                   (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
            matita_basics_types.Sig
              (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   matita_basics_finset.DeqNat))
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx)
                     matita_basics_finset.DeqNat) =>
              cic.lift cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) x n))) =>
      matita_basics_types.match_Sig cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat))
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
         cic.lift cic.prop cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) x n))
        (__ :
           cic.Term (cic.type cic.z)
             ((A : cic.Univ (cic.type cic.z) =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_types.Sig
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _f)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      matita_basics_finset.DeqNat))
                (x :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx)
                        matita_basics_finset.DeqNat) =>
                 cic.lift cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) x n))) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb (matita_basics_finset.Nat_to n) __
              (matita_basics_finset.enumn n))
           matita_basics_bool.true)
        (i :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat) =>
         ltin :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i n) =>
         matita_basics_finset.enumn_complete_aux n n i
           (matita_arithmetics_nat.le_n n) ltin ltin)
        _clearme.

def initN :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_basics_finset.FinSet))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_finset.mk_FinSet (matita_basics_finset.Nat_to n)
        (matita_basics_finset.enumn n) (matita_basics_finset.enumn_unique n)
        (matita_basics_finset.enumn_complete n).

def tipa :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0)
                    (matita_basics_finset.initN (matita_arithmetics_nat.S n))))
              (x :
                 cic.Term (cic.type cic.z)
                   ((x0 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_finset.FinSet =>
                     matita_basics_finset.FinSetcarr__o__carr x0)
                      (matita_basics_finset.initN
                         (matita_arithmetics_nat.S n))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          matita_basics_finset.DeqNat))
                    (matita_basics_types.pi1
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             matita_basics_finset.DeqNat))
                       (x0 :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               matita_basics_finset.DeqNat) =>
                        cic.lift cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) x0
                             (matita_arithmetics_nat.S n)))
                       x)
                    n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.ex_intro
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((x0 :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
             matita_basics_finset.FinSetcarr__o__carr x0)
              (matita_basics_finset.initN (matita_arithmetics_nat.S n))))
        (x :
           cic.Term (cic.type cic.z)
             ((x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0)
                (matita_basics_finset.initN (matita_arithmetics_nat.S n))) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    matita_basics_finset.DeqNat))
              (matita_basics_types.pi1
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       matita_basics_finset.DeqNat))
                 (x0 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         matita_basics_finset.DeqNat) =>
                  cic.lift cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) x0
                       (matita_arithmetics_nat.S n)))
                 x)
              n))
        (matita_basics_types.mk_Sig
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat))
           (x :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   matita_basics_finset.DeqNat) =>
            cic.lift cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) x
                 (matita_arithmetics_nat.S n)))
           n (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S n)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) matita_basics_finset.DeqNat))
           n).

def enum_option :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (_l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               (_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_lists_list.cons
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_A : cic.Univ (cic.type cic.z) =>
             matita_basics_types.option
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))))
        (matita_basics_types.None
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A)))
        (matita_basics_lists_list.map
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_types.option
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))))
           (matita_basics_types.Some
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)))
           l).

def enum_option_def :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr A))))
              (l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_finset.FinSetcarr A)))) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx)
                                   (matita_basics_finset.FinSetcarr A)))))))
                 (matita_basics_finset.enum_option
                    (matita_basics_finset.FinSetcarr A) l)
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.option
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_finset.FinSetcarr A)))))
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((x0 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            matita_basics_finset.FinSetcarr__o__carr x0) A)))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((x0 :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_finset.FinSet =>
                            matita_basics_finset.FinSetcarr__o__carr x0) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((x0 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  matita_basics_finset.FinSetcarr__o__carr x0)
                                   A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((x0 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_finset.FinSet =>
                               matita_basics_finset.FinSetcarr__o__carr x0) A)))
                       l)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_finset.FinSetcarr A)))) =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           ((_A : cic.Univ (cic.type cic.z) =>
             matita_basics_lists_list.list
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.option
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr A)))))))
        (matita_basics_finset.enum_option (matita_basics_finset.FinSetcarr A)
           l).

def enum_option_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb A l)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb A l)
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb
                       (matita_basics_deqsets.DeqOption A)
                       (matita_basics_finset.enum_option A l))
                    matita_basics_bool.true))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      uA :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_basics_lists_listb.uniqueb A l) matita_basics_bool.true) =>
      matita_basics_bool.true_to_andb_true
        (matita_basics_bool.notb
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.DeqOption A)
              (matita_basics_types.None
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (matita_basics_lists_list.map
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.option
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))))
                 (matita_basics_types.Some
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 l)))
        (matita_basics_lists_listb.uniqueb
           (matita_basics_deqsets.DeqOption A)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.option
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))))
              (matita_basics_types.Some
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              l))
        (matita_basics_lists_list.list_ind
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (_x_716 :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            cic.lift cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.notb
                    (matita_basics_lists_listb.memb
                       (matita_basics_deqsets.DeqOption A)
                       (matita_basics_types.None
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.option
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))))
                          (matita_basics_types.Some
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A)))
                          _x_716)))
                 matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb
                    (matita_basics_deqsets.DeqOption A)
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_lists_list.nil
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))))))
           (a :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            tl :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A))) =>
            Hind :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_bool.notb
                      (matita_basics_lists_listb.memb
                         (matita_basics_deqsets.DeqOption A)
                         (matita_basics_types.None
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)))
                         (matita_basics_lists_list.map
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_types.option
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))))
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A)))
                            tl)))
                   matita_basics_bool.true) =>
            matita_basics_logic.sym_eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb
                    (matita_basics_deqsets.DeqOption A)
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a tl))))
              (matita_basics_bool.noteq_to_eqnot matita_basics_bool.true
                 (matita_basics_lists_listb.memb
                    (matita_basics_deqsets.DeqOption A)
                    (matita_basics_types.None
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.option
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))))
                       (matita_basics_types.Some
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a tl)))
                 (matita_basics_logic.nmk
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb
                          (matita_basics_deqsets.DeqOption A)
                          (matita_basics_types.None
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A)))
                          (matita_basics_lists_list.map
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.option
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))))
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a tl))))
                    (H :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            matita_basics_bool.true
                            (matita_basics_lists_listb.memb
                               (matita_basics_deqsets.DeqOption A)
                               (matita_basics_types.None
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A)))
                               (matita_basics_lists_list.map
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.option
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))))
                                  (matita_basics_types.Some
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A)))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     a tl)))) =>
                     matita_basics_logic.match_Or cic.prop
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb
                             (matita_basics_deqsets.DeqOption A)
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A)))
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A))
                                a))
                          matita_basics_bool.true)
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqOption A)
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A)))
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_types.option
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      (matita_basics_deqsets.carr A)))
                                tl))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.Or _A _B)
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb
                                     (matita_basics_deqsets.DeqOption A)
                                     (matita_basics_types.None
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A)))
                                     (matita_basics_types.Some
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        a))
                                  matita_basics_bool.true)
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_deqsets.DeqOption A)
                                     (matita_basics_types.None
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A)))
                                     (matita_basics_lists_list.map
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_types.option
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))))
                                        (matita_basics_types.Some
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A)))
                                        tl))
                                  matita_basics_bool.true)) =>
                        matita_basics_logic.False)
                       (H1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb
                                  (matita_basics_deqsets.DeqOption A)
                                  (matita_basics_types.None
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A)))
                                  (matita_basics_types.Some
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     a))
                               matita_basics_bool.true) =>
                        matita_basics_logic.absurd
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.option
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))))
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A)))
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a))
                          (matita_basics_logic.proj1
                             (cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_deqsets.eqb
                                      (matita_basics_deqsets.DeqOption A)
                                      (matita_basics_types.None
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A)))
                                      (matita_basics_types.Some
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         a))
                                   matita_basics_bool.true)
                                (__ :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_deqsets.eqb
                                           (matita_basics_deqsets.DeqOption A)
                                           (matita_basics_types.None
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A)))
                                           (matita_basics_types.Some
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              a))
                                        matita_basics_bool.true) =>
                                 (A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_deqsets.DeqOption A)))
                                   (matita_basics_types.None
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A)))
                                   (matita_basics_types.Some
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a)))
                             (cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_deqsets.DeqOption A)))
                                   (matita_basics_types.None
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A)))
                                   (matita_basics_types.Some
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a))
                                (__ :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              (matita_basics_deqsets.DeqOption
                                                 A)))
                                        (matita_basics_types.None
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A)))
                                        (matita_basics_types.Some
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           a)) =>
                                 (A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_deqsets.eqb
                                      (matita_basics_deqsets.DeqOption A)
                                      (matita_basics_types.None
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A)))
                                      (matita_basics_types.Some
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         a))
                                   matita_basics_bool.true))
                             (matita_basics_deqsets.eqb_true
                                (matita_basics_deqsets.DeqOption A)
                                (matita_basics_types.None
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a))
                             H1)
                          (matita_basics_logic.nmk
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.option
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))))
                                (matita_basics_types.None
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a))
                             (H2 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.option
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))))
                                     (matita_basics_types.None
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A)))
                                     (matita_basics_types.Some
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        a)) =>
                              matita_basics_types.option_discr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (matita_basics_types.None
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a)
                                H2
                                (cic.lift cic.prop (cic.type (cic.s cic.z))
                                   matita_basics_logic.False))))
                       (H0 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb
                                  (matita_basics_deqsets.DeqOption A)
                                  (matita_basics_types.None
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A)))
                                  (matita_basics_lists_list.map
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.option
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))))
                                     (matita_basics_types.Some
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A)))
                                     tl))
                               matita_basics_bool.true) =>
                        matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  x matita_basics_bool.true) =>
                           cic.lift cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.notb x)
                                   matita_basics_bool.true)
                                (__1 :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_bool.notb x)
                                        matita_basics_bool.true) =>
                                 matita_basics_logic.False)))
                          (auto :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  matita_basics_bool.true) =>
                           matita_basics_logic.absurd
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                matita_basics_bool.false)
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      matita_basics_bool.true x))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true)
                                matita_basics_bool.false auto)
                             matita_basics_bool.not_eq_true_false)
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqOption A)
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A)))
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.option
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                tl))
                          H0 Hind)
                       (matita_basics_bool.orb_true_l
                          (matita_basics_deqsets.eqb
                             (matita_basics_deqsets.DeqOption A)
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A)))
                             (matita_basics_types.Some
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a))
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqOption A)
                             (matita_basics_types.None
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A)))
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.option
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))))
                                (matita_basics_types.Some
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                tl))
                          (matita_basics_logic.sym_eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb
                                (matita_basics_deqsets.DeqOption A)
                                (matita_basics_types.None
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A)))
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.option
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))))
                                   (matita_basics_types.Some
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a tl)))
                             H))))))
           l)
        (matita_basics_lists_listb.unique_map_inj A
           (matita_basics_deqsets.DeqOption A)
           (matita_basics_types.Some
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)))
           l
           (a :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            a1 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A) =>
            H :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_deqsets.DeqOption A)))
                   (matita_basics_types.Some
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a)
                   (matita_basics_types.Some
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a1)) =>
            matita_basics_types.option_discr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (matita_basics_types.Some
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 a)
              (matita_basics_types.Some
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 a1)
              H
              (cic.lift cic.prop (cic.type (cic.s cic.z))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a a1))
              (e0 :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (matita_basics_logic.R0
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a)
                      a1) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 a1
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  __ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         x a1) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.DeqOption A)))
                          (matita_basics_types.Some
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             x)
                          (matita_basics_types.Some
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a1))
                       (__1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.DeqOption A)))
                               (matita_basics_types.Some
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  x)
                               (matita_basics_types.Some
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  a1)) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __2 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          x a1)))
                 (H0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_deqsets.DeqOption A)))
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)
                         (matita_basics_types.Some
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a1)) =>
                  matita_basics_logic.streicherK
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.DeqOption A)))
                    (matita_basics_types.Some
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  (matita_basics_deqsets.DeqOption A)))
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a1)
                            (matita_basics_types.Some
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               a1)) =>
                     cic.lift cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          a1 a1))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    H0)
                 a e0 H))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.uniqueb A l) uA)).

def enum_option_complete :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type cic.z) cic.prop
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A x l)
                       matita_basics_bool.true))
                 (__ :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A)
                         (x :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb A x l)
                            matita_basics_bool.true)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_deqsets.DeqOption A))
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_deqsets.DeqOption A)) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb
                          (matita_basics_deqsets.DeqOption A) x
                          (matita_basics_finset.enum_option A l))
                       matita_basics_bool.true)))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      Hl :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb A x l)
                matita_basics_bool.true)) =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_deqsets.DeqOption A)) =>
      matita_basics_types.match_option cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           (matita_basics_deqsets.carr A))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_types.option
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A1)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.DeqOption A) __
              (matita_basics_finset.enum_option A l))
           matita_basics_bool.true)
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.DeqOption A)
              (matita_basics_types.None
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (matita_basics_finset.enum_option A l)))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         matita_basics_lists_listb.memb_cons
           (matita_basics_deqsets.DeqOption A)
           (matita_basics_types.Some
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              a)
           (matita_basics_types.None
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A)))
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.option
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))))
              (matita_basics_types.Some
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              l)
           (matita_basics_lists_listb.memb_map A
              (matita_basics_deqsets.DeqOption A)
              (matita_basics_types.Some
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              a l (Hl a)))
        _clearme.

def FinOption :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            matita_basics_finset.FinSet))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      matita_basics_finset.mk_FinSet
        (matita_basics_deqsets.DeqOption (matita_basics_finset.FinSetcarr A))
        (matita_basics_finset.enum_option (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.enum A))
        (matita_basics_finset.enum_option_unique
           (matita_basics_finset.FinSetcarr A) (matita_basics_finset.enum A)
           (matita_basics_finset.enum_unique A))
        (matita_basics_finset.enum_option_complete
           (matita_basics_finset.FinSetcarr A) (matita_basics_finset.enum A)
           (matita_basics_finset.enum_complete A)).

def enum_sum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (_l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (_l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     (_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_lists_list.append
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Sum
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))))
        (matita_basics_lists_list.map
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                _B : cic.Univ (cic.type cic.z) =>
                matita_basics_types.Sum
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))))
           (matita_basics_types.inl
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           l1)
        (matita_basics_lists_list.map
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B))
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                _B : cic.Univ (cic.type cic.z) =>
                matita_basics_types.Sum
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))))
           (matita_basics_types.inr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           l2).

def enum_sum_def :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_finset.FinSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr A))))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_finset.FinSetcarr A)))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx)
                             (matita_basics_finset.FinSetcarr B))))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  (matita_basics_finset.FinSetcarr B)))) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_finset.FinSetcarr A)))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_finset.FinSetcarr B)))))))
                       (matita_basics_finset.enum_sum
                          (matita_basics_finset.FinSetcarr A)
                          (matita_basics_finset.FinSetcarr B) l1 l2)
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      B))))
                          (matita_basics_lists_list.map
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((x0 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  matita_basics_finset.FinSetcarr__o__carr x0)
                                   A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         B))))
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      B)))
                             l1)
                          (matita_basics_lists_list.map
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((x0 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  matita_basics_finset.FinSetcarr__o__carr x0)
                                   B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         B))))
                             (matita_basics_types.inr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((x0 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_finset.FinSet =>
                                     matita_basics_finset.FinSetcarr__o__carr
                                       x0)
                                      B)))
                             l2)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_finset.FinSetcarr A)))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_finset.FinSetcarr B)))) =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           ((_A : cic.Univ (cic.type cic.z) =>
             matita_basics_lists_list.list
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr A)))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr B)))))))
        (matita_basics_finset.enum_sum (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) l1 l2).

def enum_sum_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb A l1)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb A l1)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb B l2)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb B l2)
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb
                                (matita_basics_deqsets.DeqSum A B)
                                (matita_basics_finset.enum_sum A B l1 l2))
                             matita_basics_bool.true)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb A _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb A _x_716)
                      matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb B l2)
                    matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb B l2)
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb
                       (matita_basics_deqsets.DeqSum A B)
                       (matita_basics_finset.enum_sum A B _x_716 l2))
                    matita_basics_bool.true))))
        (__ :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.nil
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))))
                matita_basics_bool.true) =>
         ul2 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __1)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb B l2)
                matita_basics_bool.true) =>
         matita_basics_lists_listb.unique_map_inj B
           (matita_basics_deqsets.DeqSum A B)
           (matita_basics_types.inr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           l2
           (b1 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            b2 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B) =>
            Hinr :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_deqsets.DeqSum A B)))
                   (matita_basics_types.inr
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      b1)
                   (matita_basics_types.inr
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      b2)) =>
            matita_basics_types.Sum_discr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              (matita_basics_types.inr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 b1)
              (matita_basics_types.inr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 b2)
              Hinr
              (cic.lift cic.prop (cic.type (cic.s cic.z))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    b1 b2))
              (e0 :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      (matita_basics_logic.R0
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b1)
                      b2) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 b2
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B) =>
                  _0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         x b2) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.DeqSum A B)))
                          (matita_basics_types.inr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             x)
                          (matita_basics_types.inr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             b2))
                       (__1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.DeqSum A B)))
                               (matita_basics_types.inr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  x)
                               (matita_basics_types.inr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  b2)) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __2 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          x b2)))
                 (Hinr0 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_deqsets.DeqSum A B)))
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b2)
                         (matita_basics_types.inr
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            b2)) =>
                  matita_basics_logic.streicherK
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.DeqSum A B)))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2)
                    (_0 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  (matita_basics_deqsets.DeqSum A B)))
                            (matita_basics_types.inr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b2)
                            (matita_basics_types.inr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b2)) =>
                     cic.lift cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b2 b2))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b2)
                    Hinr0)
                 b1 e0 Hinr))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.uniqueb B l2) ul2))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb A tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A1)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.uniqueb A tl)
                        matita_basics_bool.true) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb B l2)
                      matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb B l2)
                           matita_basics_bool.true) =>
                    (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __2)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb
                         (matita_basics_deqsets.DeqSum A B)
                         (matita_basics_finset.enum_sum A B tl l2))
                      matita_basics_bool.true))) =>
         uA :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a tl))
                matita_basics_bool.true) =>
         uB :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb B l2)
                matita_basics_bool.true) =>
         matita_basics_bool.true_to_andb_true
           (matita_basics_bool.notb
              (matita_basics_lists_listb.memb
                 (matita_basics_deqsets.DeqSum A B)
                 (matita_basics_types.inl
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a)
                 (matita_basics_lists_list.append
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inl
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B)))
                       tl)
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_types.inr
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B)))
                       l2))))
           (matita_basics_lists_listb.uniqueb
              (matita_basics_deqsets.DeqSum A B)
              (matita_basics_lists_list.append
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Sum
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    tl)
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Sum
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.inr
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    l2)))
           (matita_basics_logic.sym_eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb
                    (matita_basics_deqsets.DeqSum A B)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a)
                    (matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.inl
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))
                          tl)
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.inr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))
                          l2))))
              (matita_basics_bool.noteq_to_eqnot matita_basics_bool.true
                 (matita_basics_lists_listb.memb
                    (matita_basics_deqsets.DeqSum A B)
                    (matita_basics_types.inl
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a)
                    (matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Sum
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))))
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.inl
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))
                          tl)
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               _B : cic.Univ (cic.type cic.z) =>
                               matita_basics_types.Sum
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A)
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))))
                          (matita_basics_types.inr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))
                          l2)))
                 (matita_basics_logic.nmk
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb
                          (matita_basics_deqsets.DeqSum A B)
                          (matita_basics_types.inl
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a)
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Sum
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B)))
                                tl)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Sum
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))
                                (matita_basics_types.inr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B)))
                                l2))))
                    (H :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            matita_basics_bool.true
                            (matita_basics_lists_listb.memb
                               (matita_basics_deqsets.DeqSum A B)
                               (matita_basics_types.inl
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a)
                               (matita_basics_lists_list.append
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Sum
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))
                                  (matita_basics_lists_list.map
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          _B : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.Sum
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))))
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B)))
                                     tl)
                                  (matita_basics_lists_list.map
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          _B : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.Sum
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))))
                                     (matita_basics_types.inr
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B)))
                                     l2)))) =>
                     matita_basics_logic.match_Or cic.prop
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqSum A B)
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr B))
                                a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_types.Sum
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))))
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      (matita_basics_deqsets.carr A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      (matita_basics_deqsets.carr B)))
                                tl))
                          matita_basics_bool.true)
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqSum A B)
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr B))
                                a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_types.Sum
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))))
                                (matita_basics_types.inr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      (matita_basics_deqsets.carr A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      (matita_basics_deqsets.carr B)))
                                l2))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.Or _A _B)
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_deqsets.DeqSum A B)
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a)
                                     (matita_basics_lists_list.map
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             _B :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_types.Sum
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))))
                                        (matita_basics_types.inl
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B)))
                                        tl))
                                  matita_basics_bool.true)
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_deqsets.DeqSum A B)
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a)
                                     (matita_basics_lists_list.map
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             _B :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_types.Sum
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))))
                                        (matita_basics_types.inr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B)))
                                        l2))
                                  matita_basics_bool.true)) =>
                        matita_basics_logic.False)
                       (H1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb
                                  (matita_basics_deqsets.DeqSum A B)
                                  (matita_basics_types.inl
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     a)
                                  (matita_basics_lists_list.map
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          _B : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.Sum
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))))
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B)))
                                     tl))
                               matita_basics_bool.true) =>
                        matita_basics_logic.absurd
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A a tl)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.memb_map_inj A
                             (matita_basics_deqsets.DeqSum A B)
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B)))
                             tl a
                             (a1 :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              a2 :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              Hinl :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx)
                                           (matita_basics_deqsets.DeqSum A B)))
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a1)
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a2)) =>
                              matita_basics_types.Sum_discr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a1)
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a2)
                                Hinl
                                (cic.lift cic.prop (cic.type (cic.s cic.z))
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a1 a2))
                                (e0 :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (matita_basics_logic.R0
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           a1)
                                        a2) =>
                                 matita_basics_logic.eq_ind_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a2
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A) =>
                                    __ :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           x a2) =>
                                    cic.lift cic.prop cic.prop
                                      (cic.prod cic.prop cic.prop
                                         ((A1 :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  (matita_basics_deqsets.DeqSum
                                                     A B)))
                                            (matita_basics_types.inl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               x)
                                            (matita_basics_types.inl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               a2))
                                         (__1 :
                                            cic.Term cic.prop
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       (matita_basics_deqsets.DeqSum
                                                          A B)))
                                                 (matita_basics_types.inl
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    x)
                                                 (matita_basics_types.inl
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a2)) =>
                                          (A1 :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            x a2)))
                                   (Hinl0 :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 (matita_basics_deqsets.DeqSum
                                                    A B)))
                                           (matita_basics_types.inl
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a2)
                                           (matita_basics_types.inl
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a2)) =>
                                    matita_basics_logic.streicherK
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            (matita_basics_deqsets.DeqSum A B)))
                                      (matita_basics_types.inl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a2)
                                      (__ :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    (matita_basics_deqsets.DeqSum
                                                       A B)))
                                              (matita_basics_types.inl
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a2)
                                              (matita_basics_types.inl
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a2)) =>
                                       cic.lift cic.prop
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         ((A1 :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            a2 a2))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         a2)
                                      Hinl0)
                                   a1 e0 Hinl))
                             H1)
                          (matita_basics_logic.eq_ind
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb A a tl))
                             (x_1 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              _x_2 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.notb
                                        (matita_basics_lists_listb.memb A a
                                           tl))
                                     x_1) =>
                              cic.lift cic.prop cic.prop
                                ((_A : cic.Univ cic.prop =>
                                  matita_basics_logic.Not _A)
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a tl)
                                      x_1)))
                             (matita_basics_bool.eqnot_to_noteq
                                (matita_basics_lists_listb.memb A a tl)
                                (matita_basics_bool.notb
                                   (matita_basics_lists_listb.memb A a tl))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a tl)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb A a
                                            tl)
                                         x))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a tl))
                                   (matita_basics_bool.notb
                                      (matita_basics_bool.notb
                                         (matita_basics_lists_listb.memb A a
                                            tl)))
                                   (matita_basics_bool.notb_notb
                                      (matita_basics_lists_listb.memb A a tl))))
                             matita_basics_bool.true
                             (matita_basics_bool.andb_true_l
                                (matita_basics_bool.notb
                                   (matita_basics_lists_listb.memb A a tl))
                                (matita_basics_lists_listb.uniqueb A tl) uA)))
                       (matita_basics_lists_list.list_ind
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (_x_716 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))) =>
                           cic.lift cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb
                                      (matita_basics_deqsets.DeqSum A B)
                                      (matita_basics_types.inl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a)
                                      (matita_basics_lists_list.map
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              _B :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_types.Sum
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))))
                                         (matita_basics_types.inr
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B)))
                                         _x_716))
                                   matita_basics_bool.true)
                                (__ :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_deqsets.DeqSum A B)
                                           (matita_basics_types.inl
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a)
                                           (matita_basics_lists_list.map
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Sum
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_types.inr
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B)))
                                              _x_716))
                                        matita_basics_bool.true) =>
                                 matita_basics_logic.False)))
                          (H0 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  matita_basics_bool.true) =>
                           matita_basics_bool.bool_discr
                             matita_basics_bool.false matita_basics_bool.true
                             H0
                             (cic.lift cic.prop (cic.type (cic.s cic.z))
                                matita_basics_logic.False))
                          (b :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B) =>
                           tlB :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))) =>
                           Hind0 :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        (matita_basics_deqsets.DeqSum A B)
                                        (matita_basics_types.inl
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           a)
                                        (matita_basics_lists_list.map
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Sum
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))))
                                           (matita_basics_types.inr
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B)))
                                           tlB))
                                     matita_basics_bool.true)
                                  (__ :
                                     cic.Term cic.prop
                                       ((A1 :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             (matita_basics_deqsets.DeqSum A
                                                B)
                                             (matita_basics_types.inl
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      B))
                                                a)
                                             (matita_basics_lists_list.map
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      B))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_A :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     _B :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     matita_basics_types.Sum
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _A)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _B))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            A))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            B))))
                                                (matita_basics_types.inr
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_xxx :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            matita_basics_deqsets.DeqSet =>
                                                        matita_basics_deqsets.carr
                                                          _xxx)
                                                         A))
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_xxx :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            matita_basics_deqsets.DeqSet =>
                                                        matita_basics_deqsets.carr
                                                          _xxx)
                                                         B)))
                                                tlB))
                                          matita_basics_bool.true) =>
                                   matita_basics_logic.False)) =>
                           membH :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_deqsets.DeqSum A B)
                                     (matita_basics_types.inl
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a)
                                     (matita_basics_lists_list.map
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             _B :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_types.Sum
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))))
                                        (matita_basics_types.inr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B)))
                                        (matita_basics_lists_list.cons
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           b tlB)))
                                  matita_basics_bool.true) =>
                           matita_basics_logic.match_Or cic.prop
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb
                                   (matita_basics_deqsets.DeqSum A B)
                                   (matita_basics_types.inl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      a)
                                   (matita_basics_types.inr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      b))
                                matita_basics_bool.true)
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqSum A B)
                                   (matita_basics_types.inl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      a)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_types.Sum
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr B))))
                                      (matita_basics_types.inr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_deqsets.carr A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_deqsets.carr B)))
                                      tlB))
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.Or _A _B)
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_deqsets.eqb
                                           (matita_basics_deqsets.DeqSum A B)
                                           (matita_basics_types.inl
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a)
                                           (matita_basics_types.inr
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              b))
                                        matita_basics_bool.true)
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_deqsets.DeqSum A B)
                                           (matita_basics_types.inl
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a)
                                           (matita_basics_lists_list.map
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Sum
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_types.inr
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B)))
                                              tlB))
                                        matita_basics_bool.true)) =>
                              matita_basics_logic.False)
                             (H0 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb
                                        (matita_basics_deqsets.DeqSum A B)
                                        (matita_basics_types.inl
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           a)
                                        (matita_basics_types.inr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           b))
                                     matita_basics_bool.true) =>
                              matita_basics_types.Sum_discr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a)
                                (matita_basics_types.inr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   b)
                                (matita_basics_logic.proj1
                                   (cic.prod cic.prop cic.prop
                                      ((A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_deqsets.eqb
                                            (matita_basics_deqsets.DeqSum A B)
                                            (matita_basics_types.inl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               a)
                                            (matita_basics_types.inr
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               b))
                                         matita_basics_bool.true)
                                      (__ :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (matita_basics_deqsets.eqb
                                                 (matita_basics_deqsets.DeqSum
                                                    A B)
                                                 (matita_basics_types.inl
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a)
                                                 (matita_basics_types.inr
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    b))
                                              matita_basics_bool.true) =>
                                       (A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               (matita_basics_deqsets.DeqSum
                                                  A B)))
                                         (matita_basics_types.inl
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            a)
                                         (matita_basics_types.inr
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            b)))
                                   (cic.prod cic.prop cic.prop
                                      ((A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               (matita_basics_deqsets.DeqSum
                                                  A B)))
                                         (matita_basics_types.inl
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            a)
                                         (matita_basics_types.inr
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            b))
                                      (__ :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    (matita_basics_deqsets.DeqSum
                                                       A B)))
                                              (matita_basics_types.inl
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a)
                                              (matita_basics_types.inr
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 b)) =>
                                       (A1 :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1 =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_deqsets.eqb
                                            (matita_basics_deqsets.DeqSum A B)
                                            (matita_basics_types.inl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               a)
                                            (matita_basics_types.inr
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               b))
                                         matita_basics_bool.true))
                                   (matita_basics_deqsets.eqb_true
                                      (matita_basics_deqsets.DeqSum A B)
                                      (matita_basics_types.inl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a)
                                      (matita_basics_types.inr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         b))
                                   H0)
                                (cic.lift cic.prop (cic.type (cic.s cic.z))
                                   matita_basics_logic.False))
                             Hind0
                             (matita_basics_bool.orb_true_l
                                (matita_basics_deqsets.eqb
                                   (matita_basics_deqsets.DeqSum A B)
                                   (matita_basics_types.inl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a)
                                   (matita_basics_types.inr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      b))
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqSum A B)
                                   (matita_basics_types.inl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Sum
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_types.inr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B)))
                                      tlB))
                                membH))
                          l2)
                       (matita_basics_lists_listb.memb_append
                          (matita_basics_deqsets.DeqSum A B)
                          (matita_basics_types.inl
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             a)
                          (matita_basics_lists_list.map
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.inl
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B)))
                             tl)
                          (matita_basics_lists_list.map
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Sum
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_types.inr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B)))
                             l2)
                          (matita_basics_logic.sym_eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb
                                (matita_basics_deqsets.DeqSum A B)
                                (matita_basics_types.inl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a)
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Sum
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))))
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Sum
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_types.inl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B)))
                                      tl)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Sum
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_types.inr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B)))
                                      l2)))
                             H))))))
           (Hind
              (matita_basics_bool.andb_true_r
                 (matita_basics_bool.notb
                    (matita_basics_lists_listb.memb A a tl))
                 (matita_basics_lists_listb.uniqueb A tl) uA)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.uniqueb B l2) uB)))
        l1.

def enum_sum_complete :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A x l1)
                             matita_basics_bool.true))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)
                               (x :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A) =>
                                (A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb A x l1)
                                  matita_basics_bool.true)) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb B x l2)
                                matita_basics_bool.true))
                          (__1 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) B) =>
                                   (A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb B x l2)
                                     matita_basics_bool.true)) =>
                           cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.DeqSum A B))
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.DeqSum A B)) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqSum A B) x
                                   (matita_basics_finset.enum_sum A B l1 l2))
                                matita_basics_bool.true))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      Hl1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb A x l1)
                matita_basics_bool.true)) =>
      Hl2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B)
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) B) =>
              (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb B x l2)
                matita_basics_bool.true)) =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_deqsets.DeqSum A B)) =>
      matita_basics_types.match_Sum cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           (matita_basics_deqsets.carr A))
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           (matita_basics_deqsets.carr B))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Sum
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A1)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb (matita_basics_deqsets.DeqSum A B)
              __ (matita_basics_finset.enum_sum A B l1 l2))
           matita_basics_bool.true)
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         matita_basics_lists_listb.memb_append_l1
           (matita_basics_deqsets.DeqSum A B)
           (matita_basics_types.inl
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              a)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))))
              (matita_basics_types.inl
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              l1)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))))
              (matita_basics_types.inr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              l2)
           (matita_basics_lists_listb.memb_map A
              (matita_basics_deqsets.DeqSum A B)
              (matita_basics_types.inl
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              a l1 (Hl1 a)))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         matita_basics_lists_listb.memb_append_l2
           (matita_basics_deqsets.DeqSum A B)
           (matita_basics_types.inr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              b)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))))
              (matita_basics_types.inl
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              l1)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Sum
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))))
              (matita_basics_types.inr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              l2)
           (matita_basics_lists_listb.memb_map B
              (matita_basics_deqsets.DeqSum A B)
              (matita_basics_types.inr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              b l2 (Hl2 b)))
        _clearme.

def FinSum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSet)))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      matita_basics_finset.mk_FinSet
        (matita_basics_deqsets.DeqSum (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B))
        (matita_basics_finset.enum_sum (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B))
        (matita_basics_finset.enum_sum_unique
           (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B) (matita_basics_finset.enum_unique A)
           (matita_basics_finset.enum_unique B))
        (matita_basics_finset.enum_sum_complete
           (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B)
           (matita_basics_finset.enum_complete A)
           (matita_basics_finset.enum_complete B)).

def enum_prod :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (_l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (_l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     (_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            _B : cic.Univ (cic.type cic.z) =>
                            matita_basics_types.Prod
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B)))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      matita_basics_lists_list.compose
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) B))
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Prod
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))))
        (matita_basics_types.mk_Prod
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B)))
        l1 l2.

def enum_prod_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb A l1)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb A l1)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb B l2)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb B l2)
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb
                                (matita_basics_deqsets.DeqProd A B)
                                (matita_basics_finset.enum_prod A B l1 l2))
                             matita_basics_bool.true)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))) =>
               cic.prod cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb A _x_716)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb A _x_716)
                         matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb B l2)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb B l2)
                            matita_basics_bool.true) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb
                          (matita_basics_deqsets.DeqProd A B)
                          (matita_basics_finset.enum_prod A B _x_716 l2))
                       matita_basics_bool.true)))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         auto :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.nil
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))))
                matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb B l2)
                matita_basics_bool.true) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.uniqueb
              (matita_basics_deqsets.DeqProd A B)
              (matita_basics_finset.enum_prod A B
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 l2)))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) B))) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb A tl)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb A tl)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb B l2)
                         matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A1)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (matita_basics_lists_listb.uniqueb B l2)
                              matita_basics_bool.true) =>
                       (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb
                            (matita_basics_deqsets.DeqProd A B)
                            (matita_basics_finset.enum_prod A B tl l2))
                         matita_basics_bool.true)))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         H1 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a tl))
                matita_basics_bool.true) =>
         H2 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb B l2)
                matita_basics_bool.true) =>
         matita_basics_lists_listb.uniqueb_append
           (matita_basics_deqsets.DeqProd A B)
           (matita_basics_lists_list.map
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   _B : cic.Univ (cic.type cic.z) =>
                   matita_basics_types.Prod
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))))
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 a)
              l2)
           (matita_basics_lists_list.foldr
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))))
              (i :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               acc :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           _B : cic.Univ (cic.type cic.z) =>
                           matita_basics_types.Prod
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))))) =>
               matita_basics_lists_list.append
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       i)
                    l2)
                 acc)
              (matita_basics_lists_list.nil
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))))
              tl)
           (matita_basics_lists_listb.unique_map_inj B
              (matita_basics_deqsets.DeqProd A B)
              (matita_basics_types.mk_Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 a)
              l2
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B) =>
               y :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B) =>
               Heq :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_deqsets.DeqProd A B)))
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a x)
                      (matita_basics_types.mk_Prod
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         a y)) =>
               matita_basics_logic.eq_f
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      _B : cic.Univ (cic.type cic.z) =>
                      matita_basics_types.Prod
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))))
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (matita_basics_types.snd
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)))
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a x)
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a y)
                 Heq)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.uniqueb B l2) H2))
           (Hind l2
              (matita_basics_bool.andb_true_r
                 (matita_basics_bool.notb
                    (matita_basics_lists_listb.memb A a tl))
                 (matita_basics_lists_listb.uniqueb A tl) H1)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.uniqueb B l2) H2))
           (p :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_deqsets.DeqProd A B)) =>
            H3 :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb
                      (matita_basics_deqsets.DeqProd A B) p
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              _B : cic.Univ (cic.type cic.z) =>
                              matita_basics_types.Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _B))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))))
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a)
                         l2))
                   matita_basics_bool.true) =>
            matita_basics_logic.match_ex cic.prop
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 (matita_basics_deqsets.carr B))
              (a1 :
                 cic.Term (cic.type cic.z) (matita_basics_deqsets.carr B) =>
               cic.lift cic.prop cic.prop
                 (matita_basics_logic.And
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb B a1 l2)
                       matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_deqsets.carr
                             (matita_basics_deqsets.DeqProd A B)))
                       (matita_basics_types.mk_Prod
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr B))
                          a a1)
                       p)))
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                            (__ : cic.Term (cic.type cic.z) A1 =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      (a0 :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) B) =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb B a0 l2)
                               matita_basics_bool.true)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.DeqProd A B)))
                               (matita_basics_types.mk_Prod
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  a a0)
                               p)))) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb
                       (matita_basics_deqsets.DeqProd A B) p
                       (matita_basics_lists_list.foldr
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Prod
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))))
                          (i :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A) =>
                           acc :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       _B : cic.Univ (cic.type cic.z) =>
                                       matita_basics_types.Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _B))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))))) =>
                           matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Prod
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))))
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Prod
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   i)
                                l2)
                             acc)
                          (matita_basics_lists_list.nil
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  _B : cic.Univ (cic.type cic.z) =>
                                  matita_basics_types.Prod
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B)))))
                          tl))
                    matita_basics_bool.true))
              (b :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B) =>
               _clearme :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb B b l2)
                         matita_basics_bool.true)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_deqsets.DeqProd A B)))
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a b)
                         p)) =>
               matita_basics_logic.match_And cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb B b l2)
                    matita_basics_bool.true)
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.DeqProd A B)))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a b)
                    p)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb B b l2)
                            matita_basics_bool.true)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  (matita_basics_deqsets.DeqProd A B)))
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a b)
                            p)) =>
                  (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb
                          (matita_basics_deqsets.DeqProd A B) p
                          (matita_basics_lists_list.foldr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Prod
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))))))
                             (i :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              acc :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          _B : cic.Univ (cic.type cic.z) =>
                                          matita_basics_types.Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))))) =>
                              matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Prod
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))))
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Prod
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))))
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      i)
                                   l2)
                                acc)
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     _B : cic.Univ (cic.type cic.z) =>
                                     matita_basics_types.Prod
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B)))))
                             tl))
                       matita_basics_bool.true))
                 (Hmemb :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb B b l2)
                         matita_basics_bool.true) =>
                  eqp :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_deqsets.DeqProd A B)))
                         (matita_basics_types.mk_Prod
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            a b)
                         p) =>
                  matita_basics_logic.eq_ind
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_deqsets.DeqProd A B)))
                    (matita_basics_types.mk_Prod
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       a b)
                    (x_1 :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_deqsets.DeqProd A B)) =>
                     _x_2 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx)
                                  (matita_basics_deqsets.DeqProd A B)))
                            (matita_basics_types.mk_Prod
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               a b)
                            x_1) =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb
                                (matita_basics_deqsets.DeqProd A B) x_1
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              _B :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_types.Prod
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))))))
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A) =>
                                    acc :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))))) =>
                                    matita_basics_lists_list.append
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_lists_list.map
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              _B :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_types.Prod
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))))
                                         (matita_basics_types.mk_Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            i)
                                         l2)
                                      acc)
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B)))))
                                   tl))
                             matita_basics_bool.true)))
                    (matita_basics_logic.not_to_not
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb
                             (matita_basics_deqsets.DeqProd A B)
                             (matita_basics_types.mk_Prod
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                a b)
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))))
                                (i :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A) =>
                                 acc :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             _B :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_types.Prod
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))))) =>
                                 matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Prod
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))))
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         i)
                                      l2)
                                   acc)
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Prod
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B)))))
                                tl))
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a tl)
                          matita_basics_bool.true)
                       (matita_basics_lists_list.list_ind
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (_x_716 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))) =>
                           cic.lift cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb
                                      (matita_basics_deqsets.DeqProd A B)
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a b)
                                      (matita_basics_lists_list.foldr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_lists_list.list
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_A :
                                                      cic.Univ
                                                        (cic.type cic.z) =>
                                                    _B :
                                                      cic.Univ
                                                        (cic.type cic.z) =>
                                                    matita_basics_types.Prod
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z) _A)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z) _B))
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        ((_xxx :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              matita_basics_deqsets.DeqSet =>
                                                          matita_basics_deqsets.carr
                                                            _xxx)
                                                           A))
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        ((_xxx :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              matita_basics_deqsets.DeqSet =>
                                                          matita_basics_deqsets.carr
                                                            _xxx)
                                                           B))))))
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A) =>
                                          acc :
                                            cic.Term (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))) =>
                                          matita_basics_lists_list.append
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_A :
                                                   cic.Univ (cic.type cic.z) =>
                                                 _B :
                                                   cic.Univ (cic.type cic.z) =>
                                                 matita_basics_types.Prod
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z) _A)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z) _B))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        B))))
                                            (matita_basics_lists_list.map
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_A :
                                                      cic.Univ
                                                        (cic.type cic.z) =>
                                                    _B :
                                                      cic.Univ
                                                        (cic.type cic.z) =>
                                                    matita_basics_types.Prod
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z) _A)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z) _B))
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        ((_xxx :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              matita_basics_deqsets.DeqSet =>
                                                          matita_basics_deqsets.carr
                                                            _xxx)
                                                           A))
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        ((_xxx :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              matita_basics_deqsets.DeqSet =>
                                                          matita_basics_deqsets.carr
                                                            _xxx)
                                                           B))))
                                               (matita_basics_types.mk_Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        B))
                                                  i)
                                               l2)
                                            acc)
                                         (matita_basics_lists_list.nil
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_A :
                                                   cic.Univ (cic.type cic.z) =>
                                                 _B :
                                                   cic.Univ (cic.type cic.z) =>
                                                 matita_basics_types.Prod
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z) _A)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z) _B))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        B)))))
                                         _x_716))
                                   matita_basics_bool.true)
                                (__ :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_deqsets.DeqProd A B)
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a b)
                                           (matita_basics_lists_list.foldr
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_lists_list.list
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_A :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         _B :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         matita_basics_types.Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _A)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _B))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))))))
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A) =>
                                               acc :
                                                 cic.Term (cic.type cic.z)
                                                   ((_A :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     matita_basics_lists_list.list
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _A))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_A :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           _B :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           matita_basics_types.Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _A)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _B))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  A))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  B))))) =>
                                               matita_basics_lists_list.append
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))
                                                 (matita_basics_lists_list.map
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_A :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         _B :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         matita_basics_types.Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _A)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _B))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))))
                                                    (matita_basics_types.mk_Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       i)
                                                    l2)
                                                 acc)
                                              (matita_basics_lists_list.nil
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B)))))
                                              _x_716))
                                        matita_basics_bool.true) =>
                                 (A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a _x_716)
                                   matita_basics_bool.true)))
                          (auto :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  matita_basics_bool.true) =>
                           matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true)
                             matita_basics_bool.false auto)
                          (a1 :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A) =>
                           tl1 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))) =>
                           Hind2 :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        (matita_basics_deqsets.DeqProd A B)
                                        (matita_basics_types.mk_Prod
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           a b)
                                        (matita_basics_lists_list.foldr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))))
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   A) =>
                                            acc :
                                              cic.Term (cic.type cic.z)
                                                ((_A :
                                                    cic.Univ (cic.type cic.z) =>
                                                  matita_basics_lists_list.list
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z) _A))
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_A :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        _B :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        matita_basics_types.Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _A)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _B))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               A))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               B))))) =>
                                            matita_basics_lists_list.append
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_lists_list.map
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    i)
                                                 l2)
                                              acc)
                                           (matita_basics_lists_list.nil
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B)))))
                                           tl1))
                                     matita_basics_bool.true)
                                  (__ :
                                     cic.Term cic.prop
                                       ((A1 :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb
                                             (matita_basics_deqsets.DeqProd A
                                                B)
                                             (matita_basics_types.mk_Prod
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      B))
                                                a b)
                                             (matita_basics_lists_list.foldr
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_A :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     matita_basics_lists_list.list
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _A))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_A :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           _B :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           matita_basics_types.Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _A)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _B))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  A))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  B))))))
                                                (i :
                                                   cic.Term (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A) =>
                                                 acc :
                                                   cic.Term (cic.type cic.z)
                                                     ((_A :
                                                         cic.Univ
                                                           (cic.type cic.z) =>
                                                       matita_basics_lists_list.list
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            _A))
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_A :
                                                               cic.Univ
                                                                 (cic.type
                                                                    cic.z) =>
                                                             _B :
                                                               cic.Univ
                                                                 (cic.type
                                                                    cic.z) =>
                                                             matita_basics_types.Prod
                                                               (cic.lift
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    cic.z)
                                                                  _A)
                                                               (cic.lift
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    cic.z)
                                                                  _B))
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) B))))) =>
                                                 matita_basics_lists_list.append
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_A :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        _B :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        matita_basics_types.Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _A)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _B))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               A))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               B))))
                                                   (matita_basics_lists_list.map
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            B))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_A :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           _B :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           matita_basics_types.Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _A)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _B))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  A))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  B))))
                                                      (matita_basics_types.mk_Prod
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               A))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               B))
                                                         i)
                                                      l2)
                                                   acc)
                                                (matita_basics_lists_list.nil
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_A :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        _B :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        matita_basics_types.Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _A)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _B))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               A))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               B)))))
                                                tl1))
                                          matita_basics_bool.true) =>
                                   (A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb A a tl1)
                                     matita_basics_bool.true)) =>
                           H4 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_deqsets.DeqProd A B)
                                     (matita_basics_types.mk_Prod
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        a b)
                                     (matita_basics_lists_list.foldr
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))))
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                A) =>
                                         acc :
                                           cic.Term (cic.type cic.z)
                                             ((_A :
                                                 cic.Univ (cic.type cic.z) =>
                                               matita_basics_lists_list.list
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z) _A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_A :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     _B :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     matita_basics_types.Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _A)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _B))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            A))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            B))))) =>
                                         matita_basics_lists_list.append
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))))
                                           (matita_basics_lists_list.map
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_types.mk_Prod
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 i)
                                              l2)
                                           acc)
                                        (matita_basics_lists_list.nil
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B)))))
                                        (matita_basics_lists_list.cons
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           a1 tl1)))
                                  matita_basics_bool.true) =>
                           matita_basics_logic.match_Or cic.prop
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqProd A B)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      a b)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_types.Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr B))))
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_deqsets.carr A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_deqsets.carr B))
                                         a1)
                                      l2))
                                matita_basics_bool.true)
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqProd A B)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr B))
                                      a b)
                                   (matita_basics_lists_list.foldr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_deqsets.carr A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         (matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        B))))))
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           (matita_basics_deqsets.carr A) =>
                                       acc :
                                         cic.Term (cic.type cic.z)
                                           (matita_basics_lists_list.list
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (matita_basics_types.Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (matita_basics_deqsets.carr
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (matita_basics_deqsets.carr
                                                          B))))) =>
                                       matita_basics_lists_list.append
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_types.Prod
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     B))))
                                         (matita_basics_lists_list.map
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        B))))
                                            (matita_basics_types.mk_Prod
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     B))
                                               i)
                                            l2)
                                         acc)
                                      (matita_basics_lists_list.nil
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            (matita_basics_types.Prod
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     B)))))
                                      tl1))
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.Or _A _B)
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_deqsets.DeqProd A B)
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a b)
                                           (matita_basics_lists_list.map
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_types.mk_Prod
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a1)
                                              l2))
                                        matita_basics_bool.true)
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb
                                           (matita_basics_deqsets.DeqProd A B)
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a b)
                                           (matita_basics_lists_list.foldr
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_lists_list.list
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_A :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         _B :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         matita_basics_types.Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _A)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _B))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))))))
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      A) =>
                                               acc :
                                                 cic.Term (cic.type cic.z)
                                                   ((_A :
                                                       cic.Univ
                                                         (cic.type cic.z) =>
                                                     matita_basics_lists_list.list
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z) _A))
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type cic.z)
                                                         ((_A :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           _B :
                                                             cic.Univ
                                                               (cic.type
                                                                  cic.z) =>
                                                           matita_basics_types.Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _A)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                _B))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  A))
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  cic.z)
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  B))))) =>
                                               matita_basics_lists_list.append
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))
                                                 (matita_basics_lists_list.map
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_A :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         _B :
                                                           cic.Univ
                                                             (cic.type cic.z) =>
                                                         matita_basics_types.Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _A)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              _B))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))))
                                                    (matita_basics_types.mk_Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       i)
                                                    l2)
                                                 acc)
                                              (matita_basics_lists_list.nil
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B)))))
                                              tl1))
                                        matita_basics_bool.true)) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb A a
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a1 tl1))
                                matita_basics_bool.true)
                             (H40 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        (matita_basics_deqsets.DeqProd A B)
                                        (matita_basics_types.mk_Prod
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           a b)
                                        (matita_basics_lists_list.map
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))))
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a1)
                                           l2))
                                     matita_basics_bool.true) =>
                              matita_basics_logic.match_ex cic.prop
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr B))
                                (a2 :
                                   cic.Term (cic.type cic.z)
                                     (matita_basics_deqsets.carr B) =>
                                 cic.lift cic.prop cic.prop
                                   (matita_basics_logic.And
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb B a2
                                            l2)
                                         matita_basics_bool.true)
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (matita_basics_deqsets.carr
                                               (matita_basics_deqsets.DeqProd
                                                  A B)))
                                         (matita_basics_types.mk_Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr B))
                                            a1 a2)
                                         (matita_basics_types.mk_Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               (matita_basics_deqsets.carr B))
                                            a b))))
                                (__ :
                                   cic.Term cic.prop
                                     ((A1 : cic.Univ (cic.type cic.z) =>
                                       _P :
                                         cic.Term (cic.type cic.z)
                                           (cic.prod (cic.type cic.z)
                                              (cic.type cic.z) A1
                                              (__ :
                                                 cic.Term (cic.type cic.z) A1 =>
                                               cic.univ cic.prop)) =>
                                       matita_basics_logic.ex
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) A1)
                                         _P)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        (a0 :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                B) =>
                                         cic.lift cic.prop cic.prop
                                           ((_A : cic.Univ cic.prop =>
                                             _B : cic.Univ cic.prop =>
                                             matita_basics_logic.And _A _B)
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_lists_listb.memb
                                                    B a0 l2)
                                                 matita_basics_bool.true)
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       (matita_basics_deqsets.DeqProd
                                                          A B)))
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a1 a0)
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a b))))) =>
                                 (A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         a1 tl1))
                                   matita_basics_bool.true)
                                (b1 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B) =>
                                 _clearme0 :
                                   cic.Term cic.prop
                                     ((_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.And _A _B)
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_lists_listb.memb B
                                              b1 l2)
                                           matita_basics_bool.true)
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 (matita_basics_deqsets.DeqProd
                                                    A B)))
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a1 b1)
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a b))) =>
                                 matita_basics_logic.match_And cic.prop
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb B b1 l2)
                                      matita_basics_bool.true)
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            (matita_basics_deqsets.DeqProd A
                                               B)))
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a1 b1)
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a b))
                                   (__ :
                                      cic.Term cic.prop
                                        ((_A : cic.Univ cic.prop =>
                                          _B : cic.Univ cic.prop =>
                                          matita_basics_logic.And _A _B)
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (matita_basics_lists_listb.memb
                                                 B b1 l2)
                                              matita_basics_bool.true)
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    (matita_basics_deqsets.DeqProd
                                                       A B)))
                                              (matita_basics_types.mk_Prod
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a1 b1)
                                              (matita_basics_types.mk_Prod
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 a b))) =>
                                    (A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            a1 tl1))
                                      matita_basics_bool.true)
                                   (memb1 :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_lists_listb.memb B
                                              b1 l2)
                                           matita_basics_bool.true) =>
                                    H :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 (matita_basics_deqsets.DeqProd
                                                    A B)))
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a1 b1)
                                           (matita_basics_types.mk_Prod
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B))
                                              a b)) =>
                                    matita_basics_types.Prod_discr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a1 b1)
                                      (matita_basics_types.mk_Prod
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         a b)
                                      H
                                      (cic.lift cic.prop
                                         (cic.type (cic.s cic.z))
                                         ((A1 :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (matita_basics_lists_listb.memb A
                                               a
                                               (matita_basics_lists_list.cons
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A))
                                                  a1 tl1))
                                            matita_basics_bool.true))
                                      (e0 :
                                         cic.Term cic.prop
                                           ((A1 :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1 =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A1)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    A))
                                              (matita_basics_logic.R0
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 a1)
                                              a) =>
                                       matita_basics_logic.eq_ind_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         a
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A) =>
                                          __ :
                                            cic.Term cic.prop
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 x a) =>
                                          cic.lift cic.prop cic.prop
                                            (cic.prod cic.prop cic.prop
                                               ((A1 :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1 =>
                                                 __1 :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1 =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A1)
                                                   _x __1)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (matita_basics_lists_listb.memb
                                                     (matita_basics_deqsets.DeqProd
                                                        A B)
                                                     (matita_basics_types.mk_Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              A))
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              B))
                                                        a b)
                                                     (matita_basics_lists_list.map
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              B))
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_A :
                                                               cic.Univ
                                                                 (cic.type
                                                                    cic.z) =>
                                                             _B :
                                                               cic.Univ
                                                                 (cic.type
                                                                    cic.z) =>
                                                             matita_basics_types.Prod
                                                               (cic.lift
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    cic.z)
                                                                  _A)
                                                               (cic.lift
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    cic.z)
                                                                  _B))
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) B))))
                                                        (matita_basics_types.mk_Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 B))
                                                           x)
                                                        l2))
                                                  matita_basics_bool.true)
                                               (__1 :
                                                  cic.Term cic.prop
                                                    ((A1 :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A1 =>
                                                      __1 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A1 =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1)
                                                        _x __1)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (matita_basics_lists_listb.memb
                                                          (matita_basics_deqsets.DeqProd
                                                             A B)
                                                          (matita_basics_types.mk_Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   A))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))
                                                             a b)
                                                          (matita_basics_lists_list.map
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_A :
                                                                    cic.Univ
                                                                    (
                                                                    cic.type
                                                                    cic.z) =>
                                                                  _B :
                                                                    cic.Univ
                                                                    (
                                                                    cic.type
                                                                    cic.z) =>
                                                                  matita_basics_types.Prod
                                                                    (
                                                                  cic.lift
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    (
                                                                  cic.type
                                                                    cic.z) _A)
                                                                    (
                                                                  cic.lift
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    (
                                                                  cic.type
                                                                    cic.z) _B))
                                                                   (cic.lift
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    (
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                   (cic.lift
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    (
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) B))))
                                                             (matita_basics_types.mk_Prod
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) B))
                                                                x)
                                                             l2))
                                                       matita_basics_bool.true) =>
                                                cic.prod cic.prop cic.prop
                                                  ((A1 :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    __2 :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A1)
                                                      _x __2)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        ((_xxx :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              matita_basics_deqsets.DeqSet =>
                                                          matita_basics_deqsets.carr
                                                            _xxx)
                                                           (matita_basics_deqsets.DeqProd
                                                              A B)))
                                                     (matita_basics_types.mk_Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              A))
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              B))
                                                        x b1)
                                                     (matita_basics_types.mk_Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              A))
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              B))
                                                        a b))
                                                  (__2 :
                                                     cic.Term cic.prop
                                                       ((A1 :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         __2 :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1)
                                                           _x __2)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                (matita_basics_deqsets.DeqProd
                                                                   A B)))
                                                          (matita_basics_types.mk_Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   A))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))
                                                             x b1)
                                                          (matita_basics_types.mk_Prod
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   A))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))
                                                             a b)) =>
                                                   cic.prod cic.prop cic.prop
                                                     ((A1 :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       __3 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A1)
                                                         _x __3)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              B))
                                                        (matita_basics_logic.R1
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           x
                                                           (x0 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   A) =>
                                                            p0 :
                                                              cic.Term
                                                                cic.prop
                                                                ((A1 :
                                                                    cic.Univ
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                                  _x :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A1 =>
                                                                  __3 :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A1 =>
                                                                  matita_basics_logic.eq
                                                                    (
                                                                  cic.lift
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    A1) _x
                                                                    __3)
                                                                   (cic.lift
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    (
                                                                    (
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                   x x0) =>
                                                            cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 B))
                                                           b1 a __)
                                                        b)
                                                     (_e1 :
                                                        cic.Term cic.prop
                                                          ((A1 :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A1 =>
                                                            __3 :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A1 =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A1)
                                                              _x __3)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))
                                                             (matita_basics_logic.R1
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                x
                                                                (x0 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   (_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A) =>
                                                                 p0 :
                                                                   cic.Term
                                                                    cic.prop
                                                                    (
                                                                   (A1 :
                                                                    cic.Univ
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                                    _x :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A1 =>
                                                                    __3 :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A1 =>
                                                                    matita_basics_logic.eq
                                                                    (
                                                                    cic.lift
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A1) _x
                                                                    __3)
                                                                    (
                                                                   cic.lift
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   (_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                    x x0) =>
                                                                 cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) B))
                                                                b1 a __)
                                                             b) =>
                                                      (A1 :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       __3 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A1)
                                                         _x __3)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_lists_listb.memb
                                                           A a
                                                           (matita_basics_lists_list.cons
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                              x tl1))
                                                        matita_basics_bool.true)))))
                                         (H41 :
                                            cic.Term cic.prop
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_lists_listb.memb
                                                    (matita_basics_deqsets.DeqProd
                                                       A B)
                                                    (matita_basics_types.mk_Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       a b)
                                                    (matita_basics_lists_list.map
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_A :
                                                              cic.Univ
                                                                (cic.type
                                                                   cic.z) =>
                                                            _B :
                                                              cic.Univ
                                                                (cic.type
                                                                   cic.z) =>
                                                            matita_basics_types.Prod
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 _A)
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 _B))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   A))
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   cic.z)
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   B))))
                                                       (matita_basics_types.mk_Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))
                                                          a)
                                                       l2))
                                                 matita_basics_bool.true) =>
                                          H0 :
                                            cic.Term cic.prop
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       (matita_basics_deqsets.DeqProd
                                                          A B)))
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a b1)
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    a b)) =>
                                          e00 :
                                            cic.Term cic.prop
                                              ((A1 :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A1 =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A1)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 (matita_basics_logic.R1
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    a
                                                    (x0 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         ((_xxx :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               matita_basics_deqsets.DeqSet =>
                                                           matita_basics_deqsets.carr
                                                             _xxx)
                                                            A) =>
                                                     p0 :
                                                       cic.Term cic.prop
                                                         ((A1 :
                                                             cic.Univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                           _x :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1 =>
                                                           __ :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1 =>
                                                           matita_basics_logic.eq
                                                             (cic.lift
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A1)
                                                             _x __)
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               ((_xxx :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                 matita_basics_deqsets.carr
                                                                   _xxx)
                                                                  A))
                                                            a x0) =>
                                                     cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    b1 a
                                                    (matita_basics_logic.refl
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       a))
                                                 b) =>
                                          matita_basics_logic.eq_ind_r
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            b
                                            (x :
                                               cic.Term (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    B) =>
                                             __ :
                                               cic.Term cic.prop
                                                 ((A1 :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    x b) =>
                                             cic.lift cic.prop cic.prop
                                               (cic.prod cic.prop cic.prop
                                                  ((A1 :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    __1 :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A1)
                                                      _x __1)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        matita_basics_bool.bool)
                                                     (matita_basics_lists_listb.memb
                                                        B x l2)
                                                     matita_basics_bool.true)
                                                  (__1 :
                                                     cic.Term cic.prop
                                                       ((A1 :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         __1 :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1)
                                                           _x __1)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             matita_basics_bool.bool)
                                                          (matita_basics_lists_listb.memb
                                                             B x l2)
                                                          matita_basics_bool.true) =>
                                                   cic.prod cic.prop cic.prop
                                                     ((A1 :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       __2 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A1)
                                                         _x __2)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              (matita_basics_deqsets.DeqProd
                                                                 A B)))
                                                        (matita_basics_types.mk_Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 B))
                                                           a x)
                                                        (matita_basics_types.mk_Prod
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 B))
                                                           a b))
                                                     (__2 :
                                                        cic.Term cic.prop
                                                          ((A1 :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A1 =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A1 =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A1)
                                                              _x __2)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   (matita_basics_deqsets.DeqProd
                                                                    A B)))
                                                             (matita_basics_types.mk_Prod
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) B))
                                                                a x)
                                                             (matita_basics_types.mk_Prod
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) B))
                                                                a b)) =>
                                                      (A1 :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       __3 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A1)
                                                         _x __3)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_lists_listb.memb
                                                           A a
                                                           (matita_basics_lists_list.cons
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                   matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                              a tl1))
                                                        matita_basics_bool.true))))
                                            (memb10 :
                                               cic.Term cic.prop
                                                 ((A1 :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (matita_basics_lists_listb.memb
                                                       B b l2)
                                                    matita_basics_bool.true) =>
                                             H5 :
                                               cic.Term cic.prop
                                                 ((A1 :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A1 =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          (matita_basics_deqsets.DeqProd
                                                             A B)))
                                                    (matita_basics_types.mk_Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       a b)
                                                    (matita_basics_types.mk_Prod
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))
                                                       a b)) =>
                                             matita_basics_logic.streicherK
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     (matita_basics_deqsets.DeqProd
                                                        A B)))
                                               (matita_basics_types.mk_Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        A))
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        B))
                                                  a b)
                                               (__ :
                                                  cic.Term cic.prop
                                                    ((A1 :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A1 =>
                                                      __ :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A1 =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1)
                                                        _x __)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             (matita_basics_deqsets.DeqProd
                                                                A B)))
                                                       (matita_basics_types.mk_Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))
                                                          a b)
                                                       (matita_basics_types.mk_Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                A))
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             ((_xxx :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   matita_basics_deqsets.DeqSet =>
                                                               matita_basics_deqsets.carr
                                                                 _xxx)
                                                                B))
                                                          a b)) =>
                                                cic.lift cic.prop
                                                  (cic.type
                                                     (cic.s
                                                        (cic.s (cic.s cic.z))))
                                                  ((A1 :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    __1 :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A1 =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A1)
                                                      _x __1)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        matita_basics_bool.bool)
                                                     (matita_basics_lists_listb.memb
                                                        A a
                                                        (matita_basics_lists_list.cons
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           a tl1))
                                                     matita_basics_bool.true))
                                               (matita_basics_logic.eq_ind_r
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  matita_basics_bool.true
                                                  (x :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_basics_bool.bool =>
                                                   __ :
                                                     cic.Term cic.prop
                                                       ((A1 :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A1 =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1)
                                                           _x __)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             matita_basics_bool.bool)
                                                          x
                                                          matita_basics_bool.true) =>
                                                   cic.lift cic.prop cic.prop
                                                     ((A1 :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A1 =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A1)
                                                         _x __1)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_bool.match_bool
                                                           (cic.type cic.z)
                                                           (_0 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_basics_bool.bool =>
                                                            matita_basics_bool.bool)
                                                           matita_basics_bool.true
                                                           (matita_basics_lists_listb.memb
                                                              A a tl1)
                                                           x)
                                                        matita_basics_bool.true))
                                                  (matita_basics_logic.refl
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        matita_basics_bool.bool)
                                                     (matita_basics_bool.match_bool
                                                        (cic.type cic.z)
                                                        (__ :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_basics_bool.bool =>
                                                         matita_basics_bool.bool)
                                                        matita_basics_bool.true
                                                        (matita_basics_lists_listb.memb
                                                           A a tl1)
                                                        matita_basics_bool.true))
                                                  (matita_basics_deqsets.eqb
                                                     A a a)
                                                  (matita_basics_logic.proj2
                                                     (cic.prod cic.prop
                                                        cic.prop
                                                        ((A1 :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          __ :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1)
                                                            _x __)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              matita_basics_bool.bool)
                                                           (matita_basics_deqsets.eqb
                                                              A a a)
                                                           matita_basics_bool.true)
                                                        (__ :
                                                           cic.Term cic.prop
                                                             ((A1 :
                                                                 cic.Univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                               _x :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A1 =>
                                                               __ :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A1 =>
                                                               matita_basics_logic.eq
                                                                 (cic.lift
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    A1)
                                                                 _x __)
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   matita_basics_bool.bool)
                                                                (matita_basics_deqsets.eqb
                                                                   A a a)
                                                                matita_basics_bool.true) =>
                                                         (A1 :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          __1 :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1)
                                                            _x __1)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           a a))
                                                     (cic.prod cic.prop
                                                        cic.prop
                                                        ((A1 :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          __ :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1)
                                                            _x __)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              ((_xxx :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                matita_basics_deqsets.carr
                                                                  _xxx)
                                                                 A))
                                                           a a)
                                                        (__ :
                                                           cic.Term cic.prop
                                                             ((A1 :
                                                                 cic.Univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                               _x :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A1 =>
                                                               __ :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A1 =>
                                                               matita_basics_logic.eq
                                                                 (cic.lift
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    A1)
                                                                 _x __)
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   ((
                                                                    _xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                    matita_basics_deqsets.carr
                                                                    _xxx) A))
                                                                a a) =>
                                                         (A1 :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          __1 :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A1 =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A1)
                                                            _x __1)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              matita_basics_bool.bool)
                                                           (matita_basics_deqsets.eqb
                                                              A a a)
                                                           matita_basics_bool.true))
                                                     (matita_basics_deqsets.eqb_true
                                                        A a a)
                                                     (matita_basics_logic.refl
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              A))
                                                        a)))
                                               H5)
                                            b1 e00 memb1 H0)
                                         a1 e0 H40 H))
                                   _clearme0)
                                (matita_basics_lists_listb.memb_map_to_exists
                                   B (matita_basics_deqsets.DeqProd A B)
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a1)
                                   l2
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a b)
                                   H40))
                             (H40 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb
                                        (matita_basics_deqsets.DeqProd A B)
                                        (matita_basics_types.mk_Prod
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           a b)
                                        (matita_basics_lists_list.foldr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))))
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   A) =>
                                            acc :
                                              cic.Term (cic.type cic.z)
                                                ((_A :
                                                    cic.Univ (cic.type cic.z) =>
                                                  matita_basics_lists_list.list
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z) _A))
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_A :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        _B :
                                                          cic.Univ
                                                            (cic.type cic.z) =>
                                                        matita_basics_types.Prod
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _A)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             _B))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               A))
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            ((_xxx :
                                                                cic.Term
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  matita_basics_deqsets.DeqSet =>
                                                              matita_basics_deqsets.carr
                                                                _xxx)
                                                               B))))) =>
                                            matita_basics_lists_list.append
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))))
                                              (matita_basics_lists_list.map
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_A :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      _B :
                                                        cic.Univ
                                                          (cic.type cic.z) =>
                                                      matita_basics_types.Prod
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _A)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           _B))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             A))
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             B))))
                                                 (matita_basics_types.mk_Prod
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B))
                                                    i)
                                                 l2)
                                              acc)
                                           (matita_basics_lists_list.nil
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_A :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   _B :
                                                     cic.Univ
                                                       (cic.type cic.z) =>
                                                   matita_basics_types.Prod
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _A)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z) _B))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          A))
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          B)))))
                                           tl1))
                                     matita_basics_bool.true) =>
                              matita_basics_bool.orb_true_r2
                                (matita_basics_deqsets.eqb A a a1)
                                (matita_basics_lists_listb.memb A a tl1)
                                (Hind2 H40))
                             (matita_basics_lists_listb.memb_append
                                (matita_basics_deqsets.DeqProd A B)
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   a b)
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        _B : cic.Univ (cic.type cic.z) =>
                                        matita_basics_types.Prod
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))))
                                   (matita_basics_types.mk_Prod
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      a1)
                                   l2)
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              _B :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_types.Prod
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))))))
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) A) =>
                                    acc :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                _B :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_types.Prod
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _B))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       B))))) =>
                                    matita_basics_lists_list.append
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))))
                                      (matita_basics_lists_list.map
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               B))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              _B :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_types.Prod
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _B))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     B))))
                                         (matita_basics_types.mk_Prod
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B))
                                            i)
                                         l2)
                                      acc)
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           _B : cic.Univ (cic.type cic.z) =>
                                           matita_basics_types.Prod
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _B))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  B)))))
                                   tl1)
                                H4))
                          tl)
                       (matita_basics_logic.sym_not_eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb A a tl)
                          (matita_basics_bool.eqnot_to_noteq
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb A a tl)
                             (matita_basics_logic.sym_eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.notb
                                   (matita_basics_lists_listb.memb A a tl))
                                matita_basics_bool.true
                                (matita_basics_bool.andb_true_l
                                   (matita_basics_bool.notb
                                      (matita_basics_lists_listb.memb A a tl))
                                   (matita_basics_lists_listb.uniqueb A tl)
                                   H1)))))
                    p eqp)
                 _clearme)
              (matita_basics_lists_listb.memb_map_to_exists B
                 (matita_basics_deqsets.DeqProd A B)
                 (matita_basics_types.mk_Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    a)
                 l2 p H3)))
        l1.

def enum_prod_complete :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)
                          (a :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A a l1)
                             matita_basics_bool.true))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)
                               (a :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A) =>
                                (A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb A a l1)
                                  matita_basics_bool.true)) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B)
                             (b :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb B b l2)
                                matita_basics_bool.true))
                          (__1 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B)
                                  (b :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) B) =>
                                   (A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb B b l2)
                                     matita_basics_bool.true)) =>
                           cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_deqsets.DeqProd A B))
                             (p :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx)
                                     (matita_basics_deqsets.DeqProd A B)) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb
                                   (matita_basics_deqsets.DeqProd A B) p
                                   (matita_basics_finset.enum_prod A B l1 l2))
                                matita_basics_bool.true))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))) =>
      Hl1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (a :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb A a l1)
                matita_basics_bool.true)) =>
      Hl2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B)
             (b :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) B) =>
              (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb B b l2)
                matita_basics_bool.true)) =>
      _clearme :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_deqsets.DeqProd A B)) =>
      matita_basics_types.match_Prod cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           (matita_basics_deqsets.carr A))
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           (matita_basics_deqsets.carr B))
        (__ :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B))) =>
         (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A1)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb
              (matita_basics_deqsets.DeqProd A B) __
              (matita_basics_finset.enum_prod A B l1 l2))
           matita_basics_bool.true)
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         matita_basics_lists_listb.memb_compose A B
           (matita_basics_deqsets.DeqProd A B)
           (matita_basics_types.mk_Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) B)))
           a b l1 l2
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb A a l1) (Hl1 a))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb B b l2) (Hl2 b)))
        _clearme.

def FinProd :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (_A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              matita_basics_finset.FinSet
              (_B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSet)))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      matita_basics_finset.mk_FinSet
        (matita_basics_deqsets.DeqProd (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B))
        (matita_basics_finset.enum_prod (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B))
        (matita_basics_finset.enum_prod_unique
           (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B) (matita_basics_finset.enum_unique A)
           (matita_basics_finset.enum_unique B))
        (matita_basics_finset.enum_prod_complete
           (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B)
           (matita_basics_finset.enum_complete A)
           (matita_basics_finset.enum_complete B)).

def graph_of :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z))
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__ : cic.Term (cic.type cic.z) A => B))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A => B)) =>
                  cic.univ (cic.type cic.z)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) A
             (__ : cic.Term (cic.type cic.z) A => B)) =>
      (A1 : cic.Univ (cic.type cic.z) =>
       _f :
         cic.Term (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) A1
              (__ : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
       matita_basics_types.Sig
         (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _f)
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Prod
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
              (cic.lift (cic.type cic.z) (cic.type cic.z) B)))
        (p :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                (cic.lift (cic.type cic.z) (cic.type cic.z) B)) =>
         cic.lift cic.prop cic.prop
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) B)
              (f
                 (matita_basics_types.fst
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) B) p))
              (matita_basics_types.snd
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) B) p))).

def graph_enum :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              matita_basics_finset.FinSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A) =>
                     (x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) B))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((x0 :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_finset.FinSet =>
                                matita_basics_finset.FinSetcarr__o__carr x0)
                                 A) =>
                          (x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
                  (_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         _B : cic.Univ (cic.type cic.z) =>
                         matita_basics_types.Prod
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((x0 :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_finset.FinSet =>
                               matita_basics_finset.FinSetcarr__o__carr x0) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx)
                                (matita_basics_finset.FinSetcarr B)))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((x0 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    matita_basics_finset.FinSetcarr__o__carr x0) A) =>
              (x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
      matita_basics_lists_list.filter
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_A : cic.Univ (cic.type cic.z) =>
             _B : cic.Univ (cic.type cic.z) =>
             matita_basics_types.Prod
               (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
               (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))))
        (p :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((x0 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_finset.FinSet =>
                     matita_basics_finset.FinSetcarr__o__carr x0) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.FinSetcarr B)))) =>
         matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
           (f
              (matita_basics_types.fst
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 p))
           (matita_basics_types.snd
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              p))
        (matita_basics_finset.enum (matita_basics_finset.FinProd A B)).

def graph_enum_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_finset.FinSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A) =>
                     (x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((x0 :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_finset.FinSet =>
                                matita_basics_finset.FinSetcarr__o__carr x0)
                                 A) =>
                          (x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
                  (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb
                       (matita_basics_deqsets.DeqProd
                          (matita_basics_finset.FinSetcarr A)
                          (matita_basics_finset.FinSetcarr B))
                       (matita_basics_finset.graph_enum A B f))
                    matita_basics_bool.true))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((x0 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    matita_basics_finset.FinSetcarr__o__carr x0) A) =>
              (x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
      matita_basics_lists_listb.uniqueb_filter
        (matita_basics_deqsets.DeqProd (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B))
        (matita_basics_finset.enum (matita_basics_finset.FinProd A B))
        (p :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((x0 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_finset.FinSet =>
                     matita_basics_finset.FinSetcarr__o__carr x0) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.FinSetcarr B)))) =>
         matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
           (f
              (matita_basics_types.fst
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 p))
           (matita_basics_types.snd
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              p))
        (matita_basics_finset.enum_unique (matita_basics_finset.FinProd A B)).

def graph_enum_correct :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_finset.FinSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A) =>
                     (x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((x0 :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_finset.FinSet =>
                                matita_basics_finset.FinSetcarr__o__carr x0)
                                 A) =>
                          (x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr A))
                    (a :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_finset.FinSetcarr A)) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr B))
                       (b :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx)
                               (matita_basics_finset.FinSetcarr B)) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.FinSetcarr
                                   (matita_basics_finset.FinProd A B))
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_finset.FinSetcarr A)))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx)
                                         (matita_basics_finset.FinSetcarr B)))
                                   a b)
                                (matita_basics_finset.graph_enum A B f))
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb
                                     (matita_basics_finset.FinSetcarr
                                        (matita_basics_finset.FinProd A B))
                                     (matita_basics_types.mk_Prod
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              (matita_basics_finset.FinSetcarr
                                                 A)))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              (matita_basics_finset.FinSetcarr
                                                 B)))
                                        a b)
                                     (matita_basics_finset.graph_enum A B f))
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((x0 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  matita_basics_finset.FinSetcarr__o__carr x0)
                                   B))
                             (f a) b)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((x0 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    matita_basics_finset.FinSetcarr__o__carr x0) A) =>
              (x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_finset.FinSetcarr A)) =>
      b :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx)
             (matita_basics_finset.FinSetcarr B)) =>
      membp :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_basics_lists_listb.memb
                (matita_basics_finset.FinSetcarr
                   (matita_basics_finset.FinProd A B))
                (matita_basics_types.mk_Prod
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_finset.FinSetcarr A)))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_finset.FinSetcarr B)))
                   a b)
                (matita_basics_finset.graph_enum A B f))
             matita_basics_bool.true) =>
      matita_basics_logic.proj1
        (cic.prod cic.prop cic.prop
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
                 (f a) b)
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb
                      (matita_basics_finset.FinSetcarr B) (f a) b)
                   matita_basics_bool.true) =>
            (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              (f a) b))
        (cic.prod cic.prop cic.prop
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              (f a) b)
           (__ :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_finset.FinSetcarr B)))
                   (f a) b) =>
            (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
                 (f a) b)
              matita_basics_bool.true))
        (matita_basics_deqsets.eqb_true (matita_basics_finset.FinSetcarr B)
           (f a) b)
        (matita_basics_lists_listb.filter_true
           (matita_basics_finset.FinSetcarr
              (matita_basics_finset.FinProd A B))
           (p :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  _B : cic.Univ (cic.type cic.z) =>
                  matita_basics_types.Prod
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((x0 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_finset.FinSet =>
                        matita_basics_finset.FinSetcarr__o__carr x0) A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx)
                         (matita_basics_finset.FinSetcarr B)))) =>
            matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
              (f
                 (matita_basics_types.fst
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((x0 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_finset.FinSet =>
                         matita_basics_finset.FinSetcarr__o__carr x0) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx)
                          (matita_basics_finset.FinSetcarr B)))
                    p))
              (matita_basics_types.snd
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 p))
           (matita_basics_types.mk_Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr A)))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              a b)
           (matita_basics_finset.enum (matita_basics_finset.FinProd A B))
           membp).

def graph_enum_complete :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_finset.FinSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_finset.FinSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A) =>
                     (x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((x0 :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_finset.FinSet =>
                                matita_basics_finset.FinSetcarr__o__carr x0)
                                 A) =>
                          (x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A)
                    (a :
                       cic.Term (cic.type cic.z)
                         ((x0 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_finset.FinSet =>
                           matita_basics_finset.FinSetcarr__o__carr x0) A) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((x0 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_finset.FinSet =>
                         matita_basics_finset.FinSetcarr__o__carr x0) B)
                       (b :
                          cic.Term (cic.type cic.z)
                            ((x0 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_finset.FinSet =>
                              matita_basics_finset.FinSetcarr__o__carr x0) B) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((x0 :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_finset.FinSet =>
                                  matita_basics_finset.FinSetcarr__o__carr x0)
                                   B))
                             (f a) b)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((x0 :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_finset.FinSet =>
                                       matita_basics_finset.FinSetcarr__o__carr
                                         x0)
                                        B))
                                  (f a) b) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb
                                (matita_basics_finset.FinSetcarr
                                   (matita_basics_finset.FinProd A B))
                                (matita_basics_types.mk_Prod
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((x0 :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_finset.FinSet =>
                                        matita_basics_finset.FinSetcarr__o__carr
                                          x0)
                                         B))
                                   a b)
                                (matita_basics_finset.graph_enum A B f))
                             matita_basics_bool.true)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((x0 :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_finset.FinSet =>
                    matita_basics_finset.FinSetcarr__o__carr x0) A) =>
              (x0 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_finset.FinSet =>
               matita_basics_finset.FinSetcarr__o__carr x0) B)) =>
      a :
        cic.Term (cic.type cic.z)
          ((x0 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            matita_basics_finset.FinSetcarr__o__carr x0) A) =>
      b :
        cic.Term (cic.type cic.z)
          ((x0 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_finset.FinSet =>
            matita_basics_finset.FinSetcarr__o__carr x0) B) =>
      eqf :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                ((x0 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_finset.FinSet =>
                  matita_basics_finset.FinSetcarr__o__carr x0) B))
             (f a) b) =>
      matita_basics_lists_listb.memb_filter_l
        (matita_basics_finset.FinSetcarr (matita_basics_finset.FinProd A B))
        (p :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               _B : cic.Univ (cic.type cic.z) =>
               matita_basics_types.Prod
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _B))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((x0 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_finset.FinSet =>
                     matita_basics_finset.FinSetcarr__o__carr x0) A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx)
                      (matita_basics_finset.FinSetcarr B)))) =>
         matita_basics_deqsets.eqb (matita_basics_finset.FinSetcarr B)
           (f
              (matita_basics_types.fst
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((x0 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_finset.FinSet =>
                      matita_basics_finset.FinSetcarr__o__carr x0) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 p))
           (matita_basics_types.snd
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx)
                    (matita_basics_finset.FinSetcarr B)))
              p))
        (matita_basics_types.mk_Prod
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((x0 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                matita_basics_finset.FinSetcarr__o__carr x0) A))
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              ((x0 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_finset.FinSet =>
                matita_basics_finset.FinSetcarr__o__carr x0) B))
           a b)
        (matita_basics_finset.enum (matita_basics_finset.FinProd A B))
        (matita_basics_logic.proj2
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb
                    (matita_basics_finset.FinSetcarr B) (f a) b)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb
                         (matita_basics_finset.FinSetcarr B) (f a) b)
                      matita_basics_bool.true) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 (f a) b))
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx)
                       (matita_basics_finset.FinSetcarr B)))
                 (f a) b)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx)
                            (matita_basics_finset.FinSetcarr B)))
                      (f a) b) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb
                    (matita_basics_finset.FinSetcarr B) (f a) b)
                 matita_basics_bool.true))
           (matita_basics_deqsets.eqb_true
              (matita_basics_finset.FinSetcarr B) (f a) b)
           eqf)
        (matita_basics_finset.enum_prod_complete
           (matita_basics_finset.FinSetcarr A)
           (matita_basics_finset.FinSetcarr B) (matita_basics_finset.enum A)
           (matita_basics_finset.enum B)
           (a0 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_finset.FinSetcarr A)) =>
            matita_basics_finset.enum_complete A a0)
           (b0 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx)
                   (matita_basics_finset.FinSetcarr B)) =>
            matita_basics_finset.enum_complete B b0)
           (matita_basics_types.mk_Prod
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) A))
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((x0 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_finset.FinSet =>
                   matita_basics_finset.FinSetcarr__o__carr x0) B))
              a b)).


