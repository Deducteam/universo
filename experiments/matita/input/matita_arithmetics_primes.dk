(; This file was automatically generated from Matita. ;)

divides :
  cic.Term (cic.type cic.z)
    (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
       (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
          (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.univ cic.prop))).

quotient :
  cic.Term cic.prop
    (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
       (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
          (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                (matita_basics_logic.eq
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m (matita_arithmetics_nat.times n q))
                (__ :
                   cic.Term cic.prop
                     (matita_basics_logic.eq
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_arithmetics_nat.nat)
                        m (matita_arithmetics_nat.times n q)) =>
                 matita_arithmetics_primes.divides n m))))).

def match_divides_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod cic.prop (cic.type cic.z)
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ cic.prop))
                 (return_type :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z)
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ cic.prop)) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Prop _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod cic.prop
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                 (return_type :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod cic.prop
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod (cic.type cic.z)
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod (cic.type cic.z)
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type5 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (return_type :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod cic.prop
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type4 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type3 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type2 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z))
                 (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s cic.z))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s cic.z)))) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type1 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def match_divides_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.prod cic.prop (cic.type (cic.s cic.z))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type cic.z)))
                 (return_type :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod cic.prop (cic.type (cic.s cic.z))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type cic.z))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type cic.z)
                          (matita_basics_logic.eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           return_type
                             (matita_arithmetics_primes.quotient _n _m q __))))
                    (case_quotient :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type cic.z)
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                return_type
                                  (matita_arithmetics_primes.quotient _n _m q
                                     __)))) =>
                     cic.prod cic.prop (cic.type cic.z)
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ _n, _m, return_type, case_quotient, q, __ ]
  match_divides_Type0 _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def filter_divides_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod cic.prop (cic.type cic.z)
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ cic.prop))
                 (return_type :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z)
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ cic.prop)) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term cic.prop
                         (cic.prod cic.prop cic.prop
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Prop (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod cic.prop
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                 (return_type :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod cic.prop
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type5 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (return_type :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod cic.prop
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type4 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type3 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type2 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z))
                 (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type (cic.s cic.z))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type (cic.s cic.z)))) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod cic.prop (cic.type (cic.s cic.z))
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type1 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def filter_divides_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.prod cic.prop (cic.type (cic.s cic.z))
                    (matita_arithmetics_primes.divides _n _m)
                    (z :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides _n _m) =>
                     cic.univ (cic.type cic.z)))
                 (return_type :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod cic.prop (cic.type (cic.s cic.z))
                         (matita_arithmetics_primes.divides _n _m)
                         (z :
                            cic.Term cic.prop
                              (matita_arithmetics_primes.divides _n _m) =>
                          cic.univ (cic.type cic.z))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    (cic.prod cic.prop (cic.type cic.z)
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z))
                    (return :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z)
                            (matita_arithmetics_primes.divides _n _m)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_primes.divides _n _m) =>
                             return_type z)) =>
                     cic.prod cic.prop (cic.type cic.z)
                       (matita_arithmetics_primes.divides _n _m)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_primes.divides _n _m) =>
                        return_type z)))))).

[ n, m, q, __, return_type, return ]
  filter_divides_Type0 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def match_divides :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      return_type :
        (z : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m) ->
         cic.Univ return_sort) ->
      case_quotient :
        (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                _m (matita_arithmetics_nat.times _n q)) ->
         cic.Term return_sort
           (return_type (matita_arithmetics_primes.quotient _n _m q __))) ->
      z : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m) ->
      cic.Term return_sort (return_type z).

[  ] match_divides cic.prop --> matita_arithmetics_primes.match_divides_Prop.

[  ]
  match_divides (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_primes.match_divides_Type5.

[  ] match_divides (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_primes.match_divides_Type4.

[  ] match_divides (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_primes.match_divides_Type3.

[  ] match_divides (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_primes.match_divides_Type2.

[  ] match_divides (cic.type (cic.s cic.z)) -->
  matita_arithmetics_primes.match_divides_Type1.

[  ] match_divides (cic.type cic.z) -->
  matita_arithmetics_primes.match_divides_Type0.

[ return_sort, _n, _m, return_type, case_quotient, q, __ ]
  match_divides return_sort _n _m return_type case_quotient
    (matita_arithmetics_primes.quotient _n _m q __) -->
  case_quotient q __.

def filter_divides :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      return_type :
        (z : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m) ->
      cic.Term return_sort (return_type z).

[  ] filter_divides cic.prop -->
  matita_arithmetics_primes.filter_divides_Prop.

[  ]
  filter_divides (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_primes.filter_divides_Type5.

[  ] filter_divides (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_primes.filter_divides_Type4.

[  ] filter_divides (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_primes.filter_divides_Type3.

[  ] filter_divides (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_primes.filter_divides_Type2.

[  ] filter_divides (cic.type (cic.s cic.z)) -->
  matita_arithmetics_primes.filter_divides_Type1.

[  ] filter_divides (cic.type cic.z) -->
  matita_arithmetics_primes.filter_divides_Type0.

[ return_sort1, n, m, q, __, return_type, return ]
  filter_divides return_sort1 (n) (m) return_type return
    (matita_arithmetics_primes.quotient n m q __) -->
  return (matita_arithmetics_primes.quotient n m q __).

def divides_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod cic.prop (cic.type cic.z)
                    ((_n1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n1 _m1) _n _m)
                    (_x_1192 :
                       cic.Term cic.prop
                         ((_n1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n1 _m1) _n _m) =>
                     cic.univ cic.prop))
                 (Q_ :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z)
                         ((_n1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n1 _m1) _n _m)
                         (_x_1192 :
                            cic.Term cic.prop
                              ((_n1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n1 _m1) _n
                                 _m) =>
                          cic.univ cic.prop)) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (x_1193 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           (_x_1192 :
                              cic.Term cic.prop
                                ((_n1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n1 _m1)
                                   _n _m) =>
                            Q_ _x_1192)
                             (matita_arithmetics_primes.quotient _n _m q
                                x_1193))))
                    (_H_quotient :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (x_1193 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                (_x_1192 :
                                   cic.Term cic.prop
                                     ((_n1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _m1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_primes.divides _n1
                                         _m1)
                                        _n _m) =>
                                 Q_ _x_1192)
                                  (matita_arithmetics_primes.quotient _n _m q
                                     x_1193)))) =>
                     cic.prod cic.prop cic.prop
                       ((_n1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n1 _m1) _n _m)
                       (x_1192 :
                          cic.Term cic.prop
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n1 _m1) _n
                               _m) =>
                        (_x_1192 :
                           cic.Term cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _m1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_primes.divides _n1 _m1) _n
                                _m) =>
                         Q_ _x_1192) x_1192)))))).

def divides_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod cic.prop (cic.type cic.z)
                    ((_n1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n1 _m1) _n _m)
                    (_x_1192 :
                       cic.Term cic.prop
                         ((_n1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n1 _m1) _n _m) =>
                     cic.univ cic.prop))
                 (Q_ :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z)
                         ((_n1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n1 _m1) _n _m)
                         (_x_1192 :
                            cic.Term cic.prop
                              ((_n1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n1 _m1) _n
                                 _m) =>
                          cic.univ cic.prop)) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (q :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             _m (matita_arithmetics_nat.times _n q))
                          (x_1193 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q)) =>
                           (_x_1192 :
                              cic.Term cic.prop
                                ((_n1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n1 _m1)
                                   _n _m) =>
                            Q_ _x_1192)
                             (matita_arithmetics_primes.quotient _n _m q
                                x_1193))))
                    (_H_quotient :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (q :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  _m (matita_arithmetics_nat.times _n q))
                               (x_1193 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       _m (matita_arithmetics_nat.times _n q)) =>
                                (_x_1192 :
                                   cic.Term cic.prop
                                     ((_n1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _m1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_primes.divides _n1
                                         _m1)
                                        _n _m) =>
                                 Q_ _x_1192)
                                  (matita_arithmetics_primes.quotient _n _m q
                                     x_1193)))) =>
                     cic.prod cic.prop cic.prop
                       ((_n1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n1 _m1) _n _m)
                       (x_1192 :
                          cic.Term cic.prop
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n1 _m1) _n
                               _m) =>
                        (_x_1192 :
                           cic.Term cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _m1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_primes.divides _n1 _m1) _n
                                _m) =>
                         Q_ _x_1192) x_1192)))))).

[ _n, _m, Q_, _H_quotient, x_1192 ]
  divides_ind _n _m Q_ _H_quotient x_1192 -->
  matita_arithmetics_primes.filter_divides cic.prop _n _m
    (x_1192 :
       cic.Term cic.prop
         ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           _m1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_primes.divides _n1 _m1) _n _m) =>
     (_x_1192 :
        cic.Term cic.prop
          ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n1 _m1) _n _m) =>
      Q_ _x_1192) x_1192)
    (matita_arithmetics_primes.divides_ind_body _n _m Q_ _H_quotient) x_1192.

[ _n, _m, Q_, _H_quotient, x_1192 ]
  divides_ind_body _n _m Q_ _H_quotient x_1192 -->
  matita_arithmetics_primes.match_divides cic.prop _n _m
    (_x_1192 :
       cic.Term cic.prop
         ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           _m1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_primes.divides _n1 _m1) _n _m) =>
     Q_ _x_1192)
    (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     x_1193 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_arithmetics_nat.nat)
            _m (matita_arithmetics_nat.times _n q)) =>
     _H_quotient q x_1193)
    x_1192.

def divides_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (x2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) x1 x2)
                 (Hterm :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) x1 x2) =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) x1 x2)
                       (_z2006 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) x1 x2) =>
                        cic.univ cic.prop))
                    (P :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z)
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) x1 x2)
                            (_z2006 :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   _m :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_primes.divides _n _m)
                                    x1 x2) =>
                             cic.univ cic.prop)) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (q :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x2 (matita_arithmetics_nat.times x1 q))
                             (x_1193 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     x2 (matita_arithmetics_nat.times x1 q)) =>
                              cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         x1 x2))
                                   Hterm
                                   (matita_arithmetics_primes.quotient x1 x2
                                      q x_1193))
                                (_z2007 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift cic.prop
                                           (cic.type (cic.s (cic.s cic.z)))
                                           ((_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             _m :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_primes.divides
                                               _n _m)
                                              x1 x2))
                                        Hterm
                                        (matita_arithmetics_primes.quotient
                                           x1 x2 q x_1193)) =>
                                 (_z2006 :
                                    cic.Term cic.prop
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         x1 x2) =>
                                  P _z2006)
                                   (matita_arithmetics_primes.quotient x1 x2
                                      q x_1193)))))
                       (_H1 :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (q :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     x2 (matita_arithmetics_nat.times x1 q))
                                  (x_1193 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_arithmetics_nat.nat)
                                          x2
                                          (matita_arithmetics_nat.times x1 q)) =>
                                   cic.prod cic.prop cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift cic.prop
                                           (cic.type (cic.s (cic.s cic.z)))
                                           ((_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             _m :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_primes.divides
                                               _n _m)
                                              x1 x2))
                                        Hterm
                                        (matita_arithmetics_primes.quotient
                                           x1 x2 q x_1193))
                                     (_z2007 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift cic.prop
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                ((_n :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  _m :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_primes.divides
                                                    _n _m)
                                                   x1 x2))
                                             Hterm
                                             (matita_arithmetics_primes.quotient
                                                x1 x2 q x_1193)) =>
                                      (_z2006 :
                                         cic.Term cic.prop
                                           ((_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             _m :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_primes.divides
                                               _n _m)
                                              x1 x2) =>
                                       P _z2006)
                                        (matita_arithmetics_primes.quotient
                                           x1 x2 q x_1193))))) =>
                        (_z2006 :
                           cic.Term cic.prop
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _m :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_primes.divides _n _m) x1 x2) =>
                         P _z2006) Hterm))))))
      :=
      x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hterm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) x1 x2) =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z)
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) x1 x2)
             (_z2006 :
                cic.Term cic.prop
                  ((_n :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    _m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_primes.divides _n _m) x1 x2) =>
              cic.univ cic.prop)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x2 (matita_arithmetics_nat.times x1 q))
                (x_1193 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_arithmetics_nat.nat)
                        x2 (matita_arithmetics_nat.times x1 q)) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) x1 x2))
                      Hterm
                      (matita_arithmetics_primes.quotient x1 x2 q x_1193))
                   (_z2007 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift cic.prop
                              (cic.type (cic.s (cic.s cic.z)))
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n _m) x1
                                 x2))
                           Hterm
                           (matita_arithmetics_primes.quotient x1 x2 q x_1193)) =>
                    (_z2006 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) x1 x2) =>
                     P _z2006)
                      (matita_arithmetics_primes.quotient x1 x2 q x_1193))))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) x1 x2))
                 Hterm Hterm)
              (_z2007 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) x1 x2))
                      Hterm Hterm) =>
               (_z2006 :
                  cic.Term cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) x1 x2) =>
                P _z2006) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
               ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_primes.divides _n _m) x1 x2))
            Hterm))
        (matita_arithmetics_primes.divides_ind x1 x2
           (_x_1192 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) x1 x2) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) x1 x2))
                    Hterm _x_1192)
                 (_z2007 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) x1 x2))
                         Hterm _x_1192) =>
                  (_z2006 :
                     cic.Term cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) x1 x2) =>
                   P _z2006) _x_1192)))
           H1 Hterm).

def reflexive_divides :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type cic.z) =>
          _R :
            cic.Term (cic.type cic.z)
              (matita_basics_relations.relation
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
          matita_basics_relations.reflexive
            (cic.lift (cic.type cic.z) (cic.type cic.z) A) _R)
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m))
      :=
      x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.quotient x x
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times x
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (x0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x0
                 (matita_arithmetics_nat.times x
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times x
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           x (matita_arithmetics_nat.times_n_1 x)).

def divides_to_div_mod_spec :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _q :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _r :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                       m n (matita_arithmetics_div_and_mod.div m n)
                       matita_arithmetics_nat.O)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      matita_arithmetics_primes.match_divides cic.prop n m
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n m) =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _r : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) m n
           (matita_arithmetics_div_and_mod.div m n) matita_arithmetics_nat.O)
        (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                m (matita_arithmetics_nat.times n q)) =>
         matita_arithmetics_div_and_mod.div_mod_spec_intro m n
           (matita_arithmetics_div_and_mod.div m n) matita_arithmetics_nat.O
           posn
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n q)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x (matita_arithmetics_nat.times n q)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div x n) n)
                       matita_arithmetics_nat.O)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times q n)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times q n)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div x n) n)
                          matita_arithmetics_nat.O)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    q
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x q) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times q n)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times x n)
                             matita_arithmetics_nat.O)))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n q)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.times q n)
                                matita_arithmetics_nat.O)))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times q n)
                                   matita_arithmetics_nat.O)))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n q)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (matita_arithmetics_nat.plus x
                                      matita_arithmetics_nat.O)))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      m
                                      (matita_arithmetics_nat.plus x
                                         matita_arithmetics_nat.O)))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         m x))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      m)
                                   (matita_arithmetics_nat.plus m
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.plus_n_O m))
                                (matita_arithmetics_nat.times n q) eqm)
                             (matita_arithmetics_nat.times q n)
                             (matita_arithmetics_nat.commutative_times q n))
                          (matita_arithmetics_nat.times n q) eqm)
                       (matita_arithmetics_nat.times q n)
                       (matita_arithmetics_nat.commutative_times q n))
                    (matita_arithmetics_div_and_mod.div
                       (matita_arithmetics_nat.times q n) n)
                    (matita_arithmetics_div_and_mod.div_times q n posn))
                 (matita_arithmetics_nat.times n q)
                 (matita_arithmetics_nat.commutative_times n q))
              m eqm))
        _clearme.

def div_mod_spec_to_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _q :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _r :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                       m n q matita_arithmetics_nat.O)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _q :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _r :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_div_and_mod.div_mod_spec _n _m
                             _q _r)
                            m n q matita_arithmetics_nat.O) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _r : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) m n q
             matita_arithmetics_nat.O) =>
      matita_arithmetics_div_and_mod.match_div_mod_spec cic.prop m n q
        matita_arithmetics_nat.O
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _r : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) m n q
                matita_arithmetics_nat.O) =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.divides _n _m) n m)
        (posn :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                m
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times q n)
                   matita_arithmetics_nat.O)) =>
         matita_arithmetics_primes.quotient n m q
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n q)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x (matita_arithmetics_nat.times n q)))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n q))
              m
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.times n q))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m x))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times n q)
                       matita_arithmetics_nat.O)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m x))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times q n)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.plus x
                                matita_arithmetics_nat.O)))
                       eqm (matita_arithmetics_nat.times n q)
                       (matita_arithmetics_nat.commutative_times q n))
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.times n q))
                    (matita_arithmetics_nat.commutative_plus
                       (matita_arithmetics_nat.times n q)
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times n q)
                 (matita_arithmetics_nat.plus_O_n
                    (matita_arithmetics_nat.times n q)))))
        _clearme.

def divides_to_mod_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.mod m n)
                       matita_arithmetics_nat.O)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      matita_arithmetics_div_and_mod.div_mod_spec_to_eq2 m n
        (matita_arithmetics_div_and_mod.div m n)
        (matita_arithmetics_div_and_mod.mod m n)
        (matita_arithmetics_div_and_mod.div m n) matita_arithmetics_nat.O
        (matita_arithmetics_div_and_mod.div_mod_spec_div_mod m n posn)
        (matita_arithmetics_primes.divides_to_div_mod_spec n m posn divnm).

def mod_O_to_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.mod m n)
                       matita_arithmetics_nat.O)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_div_and_mod.mod m n)
                            matita_arithmetics_nat.O) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      auto' :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_div_and_mod.mod m n)
             matita_arithmetics_nat.O) =>
      matita_arithmetics_primes.quotient n m
        (matita_arithmetics_div_and_mod.div m n)
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times n
              (matita_arithmetics_div_and_mod.div m n))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_div_and_mod.div m n))))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n
                 (matita_arithmetics_div_and_mod.div m n)))
           m
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus m matita_arithmetics_nat.O)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_div_and_mod.div m n))
                    x))
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_div_and_mod.mod m n)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_div_and_mod.div m n))
                       (matita_arithmetics_nat.minus m x)))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div m n) n)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.minus m
                             (matita_arithmetics_div_and_mod.mod m n))))
                    (matita_arithmetics_div_and_mod.eq_times_div_minus_mod m
                       n)
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_div_and_mod.div m n))
                    (matita_arithmetics_nat.commutative_times
                       (matita_arithmetics_div_and_mod.div m n) n))
                 matita_arithmetics_nat.O auto')
              m (matita_arithmetics_nat.minus_n_O m))).

def divides_n_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n
              matita_arithmetics_nat.O))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.quotient n matita_arithmetics_nat.O
        matita_arithmetics_nat.O
        (matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x (matita_arithmetics_nat.times n matita_arithmetics_nat.O)))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
           matita_arithmetics_nat.O (matita_arithmetics_nat.times_n_O n)).

def divides_n_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n n))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.reflexive_divides n.

def divides_SO_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.quotient
        (matita_arithmetics_nat.S matita_arithmetics_nat.O) n n
        (matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n x))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n)
              (matita_arithmetics_nat.times n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times_n_1 n))
           (matita_arithmetics_nat.times
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
           (matita_arithmetics_nat.commutative_times
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)).

def divides_plus :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n p)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n p) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n q)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) n q) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n
                          (matita_arithmetics_nat.plus p q)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n p) =>
      matita_arithmetics_primes.match_divides cic.prop n p
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n p) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n q)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n
              (matita_arithmetics_nat.plus p q)))
        (d1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                p (matita_arithmetics_nat.times n d1)) =>
         _clearme0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n q) =>
         matita_arithmetics_primes.match_divides cic.prop n q
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n
              (matita_arithmetics_nat.plus p q))
           (d2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   q (matita_arithmetics_nat.times n d2)) =>
            matita_arithmetics_primes.quotient n
              (matita_arithmetics_nat.plus p q)
              (matita_arithmetics_nat.plus d1 d2)
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n d1)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times n d1)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x q)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.plus d1 d2))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n d2)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x (matita_arithmetics_nat.times n d2)) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times n d1) x)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.plus d1 d2))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.plus d1 d2))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.plus d1 d2))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.plus d1 d2)))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.times n d1)
                          (matita_arithmetics_nat.times n d2))
                       (matita_arithmetics_nat.distributive_times_plus n d1
                          d2))
                    q H1)
                 p H))
           _clearme0)
        _clearme.

def divides_minus :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n p)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n p) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n q)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) n q) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n
                          (matita_arithmetics_nat.minus p q)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n p) =>
      matita_arithmetics_primes.match_divides cic.prop n p
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n p) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n q)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n
              (matita_arithmetics_nat.minus p q)))
        (d1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                p (matita_arithmetics_nat.times n d1)) =>
         _clearme0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n q) =>
         matita_arithmetics_primes.match_divides cic.prop n q
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n
              (matita_arithmetics_nat.minus p q))
           (d2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   q (matita_arithmetics_nat.times n d2)) =>
            matita_arithmetics_primes.quotient n
              (matita_arithmetics_nat.minus p q)
              (matita_arithmetics_nat.minus d1 d2)
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n d1)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times n d1)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus x q)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.minus d1 d2))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n d2)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x (matita_arithmetics_nat.times n d2)) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times n d1) x)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.minus d1 d2))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.minus d1 d2))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.minus d1 d2))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.minus d1 d2)))
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times n d1)
                          (matita_arithmetics_nat.times n d2))
                       (matita_arithmetics_nat.distributive_times_minus n d1
                          d2))
                    q H1)
                 p H))
           _clearme0)
        _clearme.

def divides_times :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (q :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n p)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) n p) =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _m :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_primes.divides _n _m) m q)
                          (__1 :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _m :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_primes.divides _n _m) m q) =>
                           (_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _m :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_primes.divides _n _m)
                             (matita_arithmetics_nat.times n m)
                             (matita_arithmetics_nat.times p q))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n p) =>
      matita_arithmetics_primes.match_divides cic.prop n p
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n p) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) m q)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) m q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m)
              (matita_arithmetics_nat.times n m)
              (matita_arithmetics_nat.times p q)))
        (d1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                p (matita_arithmetics_nat.times n d1)) =>
         _clearme0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) m q) =>
         matita_arithmetics_primes.match_divides cic.prop m q
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) m q) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m)
              (matita_arithmetics_nat.times n m)
              (matita_arithmetics_nat.times p q))
           (d2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   q (matita_arithmetics_nat.times m d2)) =>
            matita_arithmetics_primes.quotient
              (matita_arithmetics_nat.times n m)
              (matita_arithmetics_nat.times p q)
              (matita_arithmetics_nat.times d1 d2)
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n d1)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times n d1)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times x q)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times n m)
                          (matita_arithmetics_nat.times d1 d2))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_nat.times d1 q))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times n
                               (matita_arithmetics_nat.times d1 q))) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times n m)
                             (matita_arithmetics_nat.times d1 d2))))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.times m
                             (matita_arithmetics_nat.times d1 d2)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.times n
                                  (matita_arithmetics_nat.times m
                                     (matita_arithmetics_nat.times d1 d2)))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.times d1 q))
                             x))
                       (matita_basics_logic.eq_f
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n)
                          (matita_arithmetics_nat.times d1 q)
                          (matita_arithmetics_nat.times m
                             (matita_arithmetics_nat.times d1 d2))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times m
                                (matita_arithmetics_nat.times d1 d2))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.times m
                                      (matita_arithmetics_nat.times d1 d2))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times m
                                   (matita_arithmetics_nat.times d1 d2)))
                             (matita_arithmetics_nat.times d1 q)
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times m d2)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times m
                                         (matita_arithmetics_nat.times d1 d2))
                                      (matita_arithmetics_nat.times d1 x)))
                                (matita_arithmetics_nat.times_times m d1 d2)
                                q H1)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times n m)
                          (matita_arithmetics_nat.times d1 d2))
                       (matita_arithmetics_nat.associative_times n m
                          (matita_arithmetics_nat.times d1 d2)))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.times n d1) q)
                    (matita_arithmetics_nat.associative_times n d1 q))
                 p H))
           _clearme0)
        _clearme.

def transitive_divides :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type cic.z) =>
          _R :
            cic.Term (cic.type cic.z)
              (matita_basics_relations.relation
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
          matita_basics_relations.transitive
            (cic.lift (cic.type cic.z) (cic.type cic.z) A) _R)
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m))
      :=
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) a b) =>
      matita_arithmetics_primes.match_divides cic.prop a b
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) a b) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) b c)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) b c) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) a c))
        (d1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                b (matita_arithmetics_nat.times a d1)) =>
         _clearme0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) b c) =>
         matita_arithmetics_primes.match_divides cic.prop b c
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) b c) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) a c)
           (d2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   c (matita_arithmetics_nat.times b d2)) =>
            matita_arithmetics_primes.quotient a c
              (matita_arithmetics_nat.times d1 d2)
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times b d2)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times b d2)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.times d1 d2))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times a d1)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x (matita_arithmetics_nat.times a d1)) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times x d2)
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.times d1 d2))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.times d1 d2))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_nat.times d1 d2))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.times d1 d2)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times a d1) d2)
                       (matita_arithmetics_nat.associative_times a d1 d2))
                    b H)
                 c H1))
           _clearme0)
        _clearme.

def eq_mod_to_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O q)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O q) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_div_and_mod.mod n q)
                          (matita_arithmetics_div_and_mod.mod m q))
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_div_and_mod.mod n q)
                               (matita_arithmetics_div_and_mod.mod m q)) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) q
                          (matita_arithmetics_nat.minus n m)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posq :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O q) =>
      eqmod :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_div_and_mod.mod n q)
             (matita_arithmetics_div_and_mod.mod m q)) =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) q
              (matita_arithmetics_nat.minus n m)))
        (nm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) n m) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop (cic.type cic.z)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) q
                 matita_arithmetics_nat.O))
           (cic.lift cic.prop (cic.type cic.z)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) q
                 (matita_arithmetics_nat.minus n m)))
           (matita_arithmetics_primes.divides_n_O q)
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type cic.z)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) q
                          matita_arithmetics_nat.O))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) q x))))
              (matita_basics_logic.refl
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type cic.z)))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       matita_arithmetics_nat.O)))
              (matita_arithmetics_nat.minus n m)
              (matita_basics_logic.sym_eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O (matita_arithmetics_nat.minus n m)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.minus m n))
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.plus
                                matita_arithmetics_nat.O n)
                             m)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_nat.minus n m)))
                    (matita_arithmetics_nat.minus_le_minus_minus_comm m n
                       matita_arithmetics_nat.O nm)
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O n)
                                      m)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.minus n m)))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_nat.minus x m)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_nat.minus n m)))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.minus n m))))
                          (matita_arithmetics_nat.plus
                             matita_arithmetics_nat.O n)
                          (matita_arithmetics_nat.plus_O_n n))
                       (matita_arithmetics_nat.minus matita_arithmetics_nat.O
                          (matita_arithmetics_nat.minus m n))
                       (matita_arithmetics_nat.minus_O_n
                          (matita_arithmetics_nat.minus m n)))))))
        (nm :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) n m)) =>
         matita_arithmetics_primes.quotient q
           (matita_arithmetics_nat.minus n m)
           (matita_arithmetics_nat.minus
              (matita_arithmetics_div_and_mod.div n q)
              (matita_arithmetics_div_and_mod.div m q))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.times q
                    (matita_arithmetics_div_and_mod.div n q))
                 (matita_arithmetics_nat.times q
                    (matita_arithmetics_div_and_mod.div m q)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times q
                            (matita_arithmetics_div_and_mod.div n q))
                         (matita_arithmetics_nat.times q
                            (matita_arithmetics_div_and_mod.div m q)))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus n m) x))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_div_and_mod.div n q) q)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q) q)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus n m)
                       (matita_arithmetics_nat.minus x
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div m q)))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div m q) q)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div m q) q)) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus n m)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div n q) q)
                             x)))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus n
                          (matita_arithmetics_div_and_mod.mod n q))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.minus n
                                  (matita_arithmetics_div_and_mod.mod n q))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus n m)
                             (matita_arithmetics_nat.minus x
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div m q) q))))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus n
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_div_and_mod.mod n q)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div m q) q)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus n
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_div_and_mod.mod n
                                           q)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_div_and_mod.div
                                              m q)
                                           q)))) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus n m) x))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_div_and_mod.mod m q)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_div_and_mod.mod m q)) =>
                              cic.lift cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus n m)
                                   (matita_arithmetics_nat.minus n
                                      (matita_arithmetics_nat.plus x
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_div_and_mod.div
                                               m q)
                                            q)))))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div m q)
                                      q)
                                   (matita_arithmetics_div_and_mod.mod m q))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_arithmetics_nat.nat)
                                        x
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_div_and_mod.div
                                                 m q)
                                              q)
                                           (matita_arithmetics_div_and_mod.mod
                                              m q))) =>
                                 cic.lift cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus n m)
                                      (matita_arithmetics_nat.minus n x)))
                                (matita_basics_logic.eq_ind
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (x_1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _x_2 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           m x_1) =>
                                    cic.lift cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus n m)
                                         (matita_arithmetics_nat.minus n x_1)))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus n m))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_div_and_mod.div
                                            m q)
                                         q)
                                      (matita_arithmetics_div_and_mod.mod m q))
                                   (matita_arithmetics_div_and_mod.div_mod m
                                      q))
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_div_and_mod.mod m q)
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div m q)
                                      q))
                                (matita_arithmetics_nat.commutative_plus
                                   (matita_arithmetics_div_and_mod.mod m q)
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div m q)
                                      q)))
                             (matita_arithmetics_div_and_mod.mod n q) eqmod)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.minus n
                                (matita_arithmetics_div_and_mod.mod n q))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div m q) q))
                          (matita_arithmetics_nat.minus_plus n
                             (matita_arithmetics_div_and_mod.mod n q)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div m q) q)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div n q))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.minus n
                                   (matita_arithmetics_div_and_mod.mod n q))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times q
                                (matita_arithmetics_div_and_mod.div n q))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times q
                                      (matita_arithmetics_div_and_mod.div n q))
                                   x))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q)))
                             (matita_arithmetics_nat.minus n
                                (matita_arithmetics_div_and_mod.mod n q))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div n q) q)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus n
                                         (matita_arithmetics_div_and_mod.mod
                                            n q))))
                                (matita_arithmetics_div_and_mod.eq_times_div_minus_mod
                                   n q)
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q))
                                (matita_arithmetics_nat.commutative_times
                                   (matita_arithmetics_div_and_mod.div n q) q)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div n q) q)
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_div_and_mod.div n q) q)))
                    (matita_arithmetics_nat.times q
                       (matita_arithmetics_div_and_mod.div m q))
                    (matita_arithmetics_nat.commutative_times q
                       (matita_arithmetics_div_and_mod.div m q)))
                 (matita_arithmetics_nat.times q
                    (matita_arithmetics_div_and_mod.div n q))
                 (matita_arithmetics_nat.commutative_times q
                    (matita_arithmetics_div_and_mod.div n q)))
              (matita_arithmetics_nat.times q
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_div_and_mod.div n q)
                    (matita_arithmetics_div_and_mod.div m q)))
              (matita_arithmetics_nat.distributive_times_minus q
                 (matita_arithmetics_div_and_mod.div n q)
                 (matita_arithmetics_div_and_mod.div m q)))).

def let_clause_1531 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (posm :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (_clearme :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.times n
                                matita_arithmetics_nat.O))
                          (eqm :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.times n
                                     matita_arithmetics_nat.O)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m matita_arithmetics_nat.O)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times n matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m x))
        eqm matita_arithmetics_nat.O (matita_arithmetics_nat.times_n_O n).

def let_clause_15311 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (posm :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (_clearme :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (p :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_nat.S p)))
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.times n
                                        (matita_arithmetics_nat.S p))) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (matita_arithmetics_nat.plus n
                                   (matita_arithmetics_nat.times n p))))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m x))
        eqm
        (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))
        (matita_arithmetics_nat.times_n_Sm n p).

def divides_to_le :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __2) n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      matita_arithmetics_primes.match_divides cic.prop n m
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n m) =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.le _n __1) n m)
        (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m (matita_arithmetics_nat.times n __))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m (matita_arithmetics_nat.times n __)) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __2) n m))
           (eqm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m
                   (matita_arithmetics_nat.times n matita_arithmetics_nat.O)) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) n m))
              (matita_basics_logic.absurd
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S m) matita_arithmetics_nat.O)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          m))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __)
                          (matita_arithmetics_nat.S m)
                          matita_arithmetics_nat.O))
                    posm
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S x) m))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S m)
                                   matita_arithmetics_nat.O))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S m) m))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S m) x))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S m) m)))
                          matita_arithmetics_nat.O
                          (matita_arithmetics_primes.let_clause_1531 n m posm
                             _clearme d eqm))
                       matita_arithmetics_nat.O
                       (matita_arithmetics_primes.let_clause_1531 n m posm
                          _clearme d eqm)))
                 (matita_arithmetics_nat.not_le_Sn_O m)))
           (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            eqm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m
                   (matita_arithmetics_nat.times n
                      (matita_arithmetics_nat.S p))) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times n
                         (matita_arithmetics_nat.S p))) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) n x))
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n
                       (matita_arithmetics_nat.plus n
                          (matita_arithmetics_nat.times n p))))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_nat.S p))))
                 (matita_arithmetics_nat.le_plus_n_r
                    (matita_arithmetics_nat.times n p) n)
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus n
                       (matita_arithmetics_nat.times n p))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) n
                                (matita_arithmetics_nat.plus n
                                   (matita_arithmetics_nat.times n p))))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) n x))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) n
                                   (matita_arithmetics_nat.plus n
                                      (matita_arithmetics_nat.times n p))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) n x))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) n x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) n m))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) n m)))
                          (matita_arithmetics_nat.plus n
                             (matita_arithmetics_nat.times n p))
                          (matita_arithmetics_primes.let_clause_15311 n m
                             posm _clearme d p eqm))
                       (matita_arithmetics_nat.plus n
                          (matita_arithmetics_nat.times n p))
                       (matita_arithmetics_primes.let_clause_15311 n m posm
                          _clearme d p eqm))
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_nat.S p))
                    (matita_arithmetics_nat.times_n_Sm n p)))
              m eqm)
           d)
        _clearme.

def antisymmetric_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) n m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) m n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      divmn :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) m n) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           n m)
        (Hn :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O m)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O m)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O m)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n m)
           (Hm :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   m) =>
            matita_arithmetics_nat.le_to_le_to_eq n m
              (matita_arithmetics_primes.divides_to_le n m Hm divnm)
              (matita_arithmetics_primes.divides_to_le m n Hn divmn))
           (Hm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O m) =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O x_1) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n x_1))
              (matita_arithmetics_primes.match_divides cic.prop m n
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m n) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n matita_arithmetics_nat.O)
                 (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         n (matita_arithmetics_nat.times m q)) =>
                  matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n x))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n)
                    matita_arithmetics_nat.O
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O x))
                       Hm n
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times m q)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n x))
                          auto m
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m (matita_arithmetics_nat.times x q)))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O q)))
                                (matita_arithmetics_nat.times_O_n q) m Hm)
                             m Hm))))
                 divmn)
              m Hm)
           (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O m
              (matita_arithmetics_nat.le_O_n m)))
        (Hn :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x_1 m))
           (matita_arithmetics_primes.match_divides cic.prop n m
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) n m) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O m)
              (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m (matita_arithmetics_nat.times n q)) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       x m))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n x))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n)
                    m
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n q)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m x))
                       auto n
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n (matita_arithmetics_nat.times x q)))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O q)))
                             (matita_arithmetics_nat.times_O_n q) n Hn)
                          n Hn)))
                 matita_arithmetics_nat.O Hn)
              divnm)
           n Hn)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def divides_to_lt_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (__2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __3 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __2 __3)
                       matita_arithmetics_nat.O n)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m) =>
            (__2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __3 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __2 __3) matita_arithmetics_nat.O n))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         auto' :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n m) =>
         auto)
        (eqn0 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         _clearme :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n m) =>
         matita_arithmetics_primes.match_divides cic.prop n m
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m) =>
            (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O n)
           (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O x_1) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m (matita_arithmetics_nat.times x_1 d))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m (matita_arithmetics_nat.times x_1 d)) =>
                     (__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2)
                       matita_arithmetics_nat.O x_1)))
              (eqm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O
                         d)) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O matita_arithmetics_nat.O))
                 (matita_basics_logic.absurd
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O m)
                    posm
                    (matita_arithmetics_nat.le_to_not_lt m
                       matita_arithmetics_nat.O
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O d)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.times
                                     matita_arithmetics_nat.O d)) =>
                           cic.lift cic.prop cic.prop
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __1) x
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.le_n
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O d))
                          m eqm))))
              n eqn0)
           _clearme)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def or_div_mod1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    q)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O q) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) q
                          (matita_arithmetics_nat.S n))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q))
                             q)))
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _m :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_primes.divides _n _m) q
                             (matita_arithmetics_nat.S n)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div n q) q)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.mod n q)))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posq :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O q) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.And
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_div_and_mod.mod n q))
              q)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_div_and_mod.div n q))
                 q)))
        (matita_basics_logic.And
           (matita_arithmetics_nat.lt
              (matita_arithmetics_nat.S
                 (matita_arithmetics_div_and_mod.mod n q))
              q)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_div_and_mod.div n q) q)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_div_and_mod.mod n q)))))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q))
                      q)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_div_and_mod.div n q))
                         q)))
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q))
                      q)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q) q)
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_div_and_mod.mod n q)))))) =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) q
                 (matita_arithmetics_nat.S n))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_div_and_mod.div n q))
                    q)))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div n q) q)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_div_and_mod.mod n q))))))
        (_clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_div_and_mod.mod n q))
                   q)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.div n q))
                      q))) =>
         matita_basics_logic.match_And cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_div_and_mod.mod n q))
              q)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_div_and_mod.div n q))
                 q))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q))
                      q)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_div_and_mod.div n q))
                         q))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       q)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q))))))
           (H1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_div_and_mod.mod n q))
                   q) =>
            H2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.div n q))
                      q)) =>
            matita_basics_logic.or_introl
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       q)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q)))))
              (matita_basics_logic.conj
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       q))
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m)
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q)))))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) q
                          (matita_arithmetics_nat.S n)))
                    (matita_arithmetics_primes.divides_times q
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) q
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       (matita_arithmetics_primes.divides_n_n q)
                       (matita_arithmetics_primes.divides_SO_n
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.div n q))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus q
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div n q)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n _m)
                                   (matita_arithmetics_nat.times q
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_nat.times q
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_div_and_mod.div
                                            n q)))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n _m) q
                                   x))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          q
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      x
                                      (matita_arithmetics_nat.times q
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_div_and_mod.div
                                               n q)))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      q
                                      (matita_arithmetics_nat.plus q
                                         (matita_arithmetics_nat.times q
                                            (matita_arithmetics_div_and_mod.div
                                               n q)))))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus q
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q)))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         q x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         q
                                         (matita_arithmetics_nat.plus q
                                            (matita_arithmetics_nat.times q
                                               (matita_arithmetics_div_and_mod.div
                                                  n q)))))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      q
                                      (matita_arithmetics_nat.plus q
                                         (matita_arithmetics_nat.times q
                                            (matita_arithmetics_div_and_mod.div
                                               n q))))))
                             (matita_arithmetics_nat.times q
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.div n q)))
                             (matita_arithmetics_nat.times_n_Sm q
                                (matita_arithmetics_div_and_mod.div n q)))
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.times_n_1 q))
                       (matita_arithmetics_nat.S n)
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S n) x))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.div n q))
                                q)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S n) x))
                             H2
                             (matita_arithmetics_nat.times q
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.div n q)))
                             (matita_arithmetics_nat.commutative_times
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.div n q))
                                q))
                          (matita_arithmetics_nat.plus q
                             (matita_arithmetics_nat.times q
                                (matita_arithmetics_div_and_mod.div n q)))
                          (matita_arithmetics_nat.times_n_Sm q
                             (matita_arithmetics_div_and_mod.div n q)))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus q
                       (matita_arithmetics_nat.times q
                          (matita_arithmetics_div_and_mod.div n q)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q))
                             q)))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times q
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.div n q)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus q
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q)))
                             x))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus q
                             (matita_arithmetics_nat.times q
                                (matita_arithmetics_div_and_mod.div n q)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus q
                                   (matita_arithmetics_nat.times q
                                      (matita_arithmetics_div_and_mod.div n q)))
                                x))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus q
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q))))
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q)))
                          (matita_arithmetics_nat.times_n_Sm q
                             (matita_arithmetics_div_and_mod.div n q)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.div n q))
                          q)
                       (matita_arithmetics_nat.commutative_times
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.div n q))
                          q))
                    (matita_arithmetics_nat.S n)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times q
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.div n q)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S n) x))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q))
                             q)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S n) x))
                          H2
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q)))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.div n q))
                             q))
                       (matita_arithmetics_nat.plus q
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div n q)))
                       (matita_arithmetics_nat.times_n_Sm q
                          (matita_arithmetics_div_and_mod.div n q))))))
           _clearme)
        (_clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_div_and_mod.mod n q))
                   q)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_div_and_mod.div n q) q)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q))))) =>
         matita_basics_logic.match_And cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_div_and_mod.mod n q))
              q)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_div_and_mod.div n q) q)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_div_and_mod.mod n q))))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q))
                      q)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q) q)
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_div_and_mod.mod n q))))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       q)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q))))))
           (H1 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_div_and_mod.mod n q))
                   q) =>
            H2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_div_and_mod.div n q) q)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.mod n q)))) =>
            matita_basics_logic.or_intror
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) q
                    (matita_arithmetics_nat.S n))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.div n q))
                       q)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q)))))
              (matita_basics_logic.conj
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div n q) q)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q))))
                 (matita_basics_logic.not_to_not
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) q
                       (matita_arithmetics_nat.S n))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.mod
                          (matita_arithmetics_nat.S n) q)
                       matita_arithmetics_nat.O)
                    (matita_arithmetics_primes.divides_to_mod_O q
                       (matita_arithmetics_nat.S n) posq)
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod n q))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_div_and_mod.mod n q))) =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x matita_arithmetics_nat.O)))
                       (matita_basics_logic.nmk
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.mod n q))
                             matita_arithmetics_nat.O)
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S
                                     (matita_arithmetics_div_and_mod.mod n q))
                                  matita_arithmetics_nat.O) =>
                           matita_basics_logic.absurd
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.mod n q)))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_div_and_mod.mod n q))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_div_and_mod.mod
                                            n q))))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_div_and_mod.mod n q)))
                                matita_arithmetics_nat.O auto)
                             (matita_arithmetics_nat.not_eq_O_S
                                (matita_arithmetics_div_and_mod.mod n q))))
                       (matita_arithmetics_div_and_mod.mod
                          (matita_arithmetics_nat.S n) q)
                       (matita_arithmetics_div_and_mod.div_mod_spec_to_eq2
                          (matita_arithmetics_nat.S n) q
                          (matita_arithmetics_div_and_mod.div
                             (matita_arithmetics_nat.S n) q)
                          (matita_arithmetics_div_and_mod.mod
                             (matita_arithmetics_nat.S n) q)
                          (matita_arithmetics_div_and_mod.div n q)
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.mod n q))
                          (matita_arithmetics_div_and_mod.div_mod_spec_div_mod
                             (matita_arithmetics_nat.S n) q posq)
                          (matita_arithmetics_div_and_mod.div_mod_spec_intro
                             (matita_arithmetics_nat.S n) q
                             (matita_arithmetics_div_and_mod.div n q)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.mod n q))
                             H1
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times q
                                   (matita_arithmetics_div_and_mod.div n q))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S n)
                                      (matita_arithmetics_nat.plus x
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_div_and_mod.mod
                                               n q)))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S n)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S n) x))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S n))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times q
                                         (matita_arithmetics_div_and_mod.div
                                            n q))
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_div_and_mod.mod
                                            n q)))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_div_and_mod.div
                                            n q)
                                         q)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S n)
                                            (matita_arithmetics_nat.plus x
                                               (matita_arithmetics_nat.S
                                                  (matita_arithmetics_div_and_mod.mod
                                                     n q)))))
                                      H2
                                      (matita_arithmetics_nat.times q
                                         (matita_arithmetics_div_and_mod.div
                                            n q))
                                      (matita_arithmetics_nat.commutative_times
                                         (matita_arithmetics_div_and_mod.div
                                            n q)
                                         q)))
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div n q) q)
                                (matita_arithmetics_nat.commutative_times
                                   (matita_arithmetics_div_and_mod.div n q) q))))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times q
                       (matita_arithmetics_div_and_mod.div n q))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.plus x
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_div_and_mod.mod n q)))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S n)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S n) x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div n q))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.mod n q)))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div n q) q)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S n)
                                (matita_arithmetics_nat.plus x
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_div_and_mod.mod n q)))))
                          H2
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_div_and_mod.div n q))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_div_and_mod.div n q) q)))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div n q) q)
                    (matita_arithmetics_nat.commutative_times
                       (matita_arithmetics_div_and_mod.div n q) q))))
           _clearme)
        (matita_arithmetics_div_and_mod.or_div_mod n q posq).

def let_clause_1532 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m)
                 (divnm :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) n m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O d))
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.times
                                     matita_arithmetics_nat.O d)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m matita_arithmetics_nat.O)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times d matita_arithmetics_nat.O)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m x))
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times matita_arithmetics_nat.O d)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m x))
           auto (matita_arithmetics_nat.times d matita_arithmetics_nat.O)
           (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O
              d))
        matita_arithmetics_nat.O (matita_arithmetics_nat.times_n_O d).

def let_clause_1559 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m)
                 (divnm :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) n m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O d))
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.times
                                     matita_arithmetics_nat.O d)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m n)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x n))
        H m (matita_arithmetics_primes.let_clause_1532 n m divnm H d auto).

def let_clause_1560 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m)
                 (divnm :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) n m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O d))
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.times
                                     matita_arithmetics_nat.O d)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             n matita_arithmetics_nat.O)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        m
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x matita_arithmetics_nat.O))
        (matita_arithmetics_primes.let_clause_1532 n m divnm H d auto) n
        (matita_arithmetics_primes.let_clause_1559 n m divnm H d auto).

def divides_to_div :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) n m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div m n) n)
                    m))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_div_and_mod.div m n) n)
           m)
        (H :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus
              (matita_arithmetics_nat.times
                 (matita_arithmetics_div_and_mod.div m n) n)
              matita_arithmetics_nat.O)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_div_and_mod.div m n) n)
                      matita_arithmetics_nat.O)) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x m))
           (matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod m n)
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_div_and_mod.mod m n) x_1) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div m n) n)
                       x_1)
                    m))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_div_and_mod.div m n))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x
                          (matita_arithmetics_div_and_mod.mod m n))
                       m))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_div_and_mod.mod m n)
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_div_and_mod.div m n)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x m))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x m))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_div_and_mod.mod m n)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_div_and_mod.div m n)))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_div_and_mod.div m n))
                             (matita_arithmetics_div_and_mod.mod m n))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m x))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div m n) n)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (matita_arithmetics_nat.plus x
                                      (matita_arithmetics_div_and_mod.mod m n))))
                             (matita_arithmetics_div_and_mod.div_mod m n)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_div_and_mod.div m n))
                             (matita_arithmetics_nat.commutative_times
                                (matita_arithmetics_div_and_mod.div m n) n))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_div_and_mod.mod m n)
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_div_and_mod.div m n)))
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_div_and_mod.div m n))
                             (matita_arithmetics_div_and_mod.mod m n))))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_div_and_mod.div m n))
                       (matita_arithmetics_div_and_mod.mod m n))
                    (matita_arithmetics_nat.commutative_plus
                       (matita_arithmetics_nat.times n
                          (matita_arithmetics_div_and_mod.div m n))
                       (matita_arithmetics_div_and_mod.mod m n)))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_div_and_mod.div m n) n)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_div_and_mod.div m n) n))
              matita_arithmetics_nat.O
              (matita_arithmetics_primes.divides_to_mod_O n m H divnm))
           (matita_arithmetics_nat.times
              (matita_arithmetics_div_and_mod.div m n) n)
           (matita_arithmetics_nat.plus_n_O
              (matita_arithmetics_nat.times
                 (matita_arithmetics_div_and_mod.div m n) n)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_arithmetics_primes.match_divides cic.prop n m
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_div_and_mod.div m n) n)
              m)
           (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O x_1) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m (matita_arithmetics_nat.times x_1 d))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m (matita_arithmetics_nat.times x_1 d)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div m x_1) x_1)
                       m)))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O
                         d)) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_div_and_mod.div x
                             matita_arithmetics_nat.O)
                          matita_arithmetics_nat.O)
                       m))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div n x)
                             matita_arithmetics_nat.O)
                          m))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div n n) x)
                             m))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_div_and_mod.div n n))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x m))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             n
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x m))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      n x))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   n)
                                m
                                (matita_arithmetics_primes.let_clause_1559 n
                                   m divnm H d auto))
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_div_and_mod.div n n))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      n
                                      (matita_arithmetics_nat.times x
                                         (matita_arithmetics_div_and_mod.div
                                            n n))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.times m
                                            (matita_arithmetics_div_and_mod.div
                                               n n))))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            m
                                            (matita_arithmetics_nat.times x
                                               (matita_arithmetics_div_and_mod.div
                                                  n n))))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.times
                                                  matita_arithmetics_nat.O
                                                  (matita_arithmetics_div_and_mod.div
                                                     n n))))
                                         (matita_arithmetics_nat.times_O_n
                                            (matita_arithmetics_div_and_mod.div
                                               n n))
                                         m
                                         (matita_arithmetics_primes.let_clause_1532
                                            n m divnm H d auto))
                                      m
                                      (matita_arithmetics_primes.let_clause_1532
                                         n m divnm H d auto))
                                   n
                                   (matita_arithmetics_primes.let_clause_1559
                                      n m divnm H d auto))
                                n
                                (matita_arithmetics_primes.let_clause_1559 n
                                   m divnm H d auto)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div n n) n)
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_div_and_mod.div n n) n))
                       matita_arithmetics_nat.O
                       (matita_arithmetics_primes.let_clause_1560 n m divnm H
                          d auto))
                    matita_arithmetics_nat.O
                    (matita_arithmetics_primes.let_clause_1560 n m divnm H d
                       auto))
                 m
                 (matita_arithmetics_primes.let_clause_1559 n m divnm H d
                    auto))
              n H)
           divnm)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def divides_div :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) d n)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) d n) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    (matita_arithmetics_div_and_mod.div n d) n))))
      :=
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      divdn :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) d n) =>
      matita_arithmetics_primes.quotient
        (matita_arithmetics_div_and_mod.div n d) n d
        (matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_div_and_mod.div n d) d)
           n (matita_arithmetics_primes.divides_to_div d n divdn)).

def div_div :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) d n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) d n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.div n
                          (matita_arithmetics_div_and_mod.div n d))
                       d)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      divdn :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) d n) =>
      matita_arithmetics_div_and_mod.injective_times_l
        (matita_arithmetics_div_and_mod.div n d)
        (matita_arithmetics_nat.lt_times_n_to_lt_l d matita_arithmetics_nat.O
           (matita_arithmetics_div_and_mod.div n d)
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x n) =>
               cic.lift cic.prop cic.prop
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_nat.times matita_arithmetics_nat.O d)
                    x))
              posn
              (matita_arithmetics_nat.times
                 (matita_arithmetics_div_and_mod.div n d) d)
              (matita_arithmetics_primes.divides_to_div d n divdn)))
        (matita_arithmetics_div_and_mod.div n
           (matita_arithmetics_div_and_mod.div n d))
        d
        (matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           n
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x n) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_nat.times d
                    (matita_arithmetics_div_and_mod.div n d))))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_div_and_mod.div n d) d)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_div_and_mod.div n d) d)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n x))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x n) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_div_and_mod.div n d) d)
                 (matita_arithmetics_primes.divides_to_div d n divdn))
              (matita_arithmetics_nat.times d
                 (matita_arithmetics_div_and_mod.div n d))
              (matita_arithmetics_nat.commutative_times d
                 (matita_arithmetics_div_and_mod.div n d)))
           (matita_arithmetics_nat.times
              (matita_arithmetics_div_and_mod.div n
                 (matita_arithmetics_div_and_mod.div n d))
              (matita_arithmetics_div_and_mod.div n d))
           (matita_arithmetics_primes.divides_to_div
              (matita_arithmetics_div_and_mod.div n d) n
              (matita_arithmetics_primes.quotient
                 (matita_arithmetics_div_and_mod.div n d) n d
                 (matita_basics_logic.sym_eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_div_and_mod.div n d) d)
                    n (matita_arithmetics_primes.divides_to_div d n divdn))))).

def times_div :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O b)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O b) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) c b)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) c b) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_div_and_mod.div b c))
                          (matita_arithmetics_div_and_mod.div
                             (matita_arithmetics_nat.times a b) c)))))))
      :=
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posb :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O b) =>
      divcb :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) c b) =>
      matita_arithmetics_primes.match_divides cic.prop c b
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) c b) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times a
              (matita_arithmetics_div_and_mod.div b c))
           (matita_arithmetics_div_and_mod.div
              (matita_arithmetics_nat.times a b) c))
        (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqb :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                b (matita_arithmetics_nat.times c d)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times c d)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_nat.times c d)) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times a
                    (matita_arithmetics_div_and_mod.div x c))
                 (matita_arithmetics_div_and_mod.div
                    (matita_arithmetics_nat.times a x) c)))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times d c)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x (matita_arithmetics_nat.times d c)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_div_and_mod.div x c))
                    (matita_arithmetics_div_and_mod.div
                       (matita_arithmetics_nat.times a x) c)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 d
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x d) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times a x)
                       (matita_arithmetics_div_and_mod.div
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.times d c))
                          c)))
                 (matita_basics_logic.eq_ind
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.times a d) c)
                    (x_1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.times a d) c)
                            x_1) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a d)
                          (matita_arithmetics_div_and_mod.div x_1 c)))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times a d)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x (matita_arithmetics_nat.times a d)) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times a d) x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a d))
                       (matita_arithmetics_div_and_mod.div
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times a d) c)
                          c)
                       (matita_arithmetics_div_and_mod.div_times
                          (matita_arithmetics_nat.times a d) c
                          (matita_arithmetics_primes.divides_to_lt_O c b posb
                             divcb)))
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.times d c))
                    (matita_arithmetics_nat.associative_times a d c))
                 (matita_arithmetics_div_and_mod.div
                    (matita_arithmetics_nat.times d c) c)
                 (matita_arithmetics_div_and_mod.div_times d c
                    (matita_arithmetics_primes.divides_to_lt_O c b posb divcb)))
              (matita_arithmetics_nat.times c d)
              (matita_arithmetics_nat.commutative_times c d))
           b eqb)
        divcb.

def plus_div :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O d)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O d) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) d n)
                       (__1 :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) d n) =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _m :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_primes.divides _n _m) d m)
                          (__2 :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _m :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_primes.divides _n _m) d m) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __3 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __3)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_div_and_mod.div
                                (matita_arithmetics_nat.plus n m) d)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_div_and_mod.div n d)
                                (matita_arithmetics_div_and_mod.div m d)))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posd :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O d) =>
      divdn :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) d n) =>
      divdm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) d m) =>
      matita_arithmetics_primes.match_divides cic.prop d n
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) d n) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_div_and_mod.div
              (matita_arithmetics_nat.plus n m) d)
           (matita_arithmetics_nat.plus
              (matita_arithmetics_div_and_mod.div n d)
              (matita_arithmetics_div_and_mod.div m d)))
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqn :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.times d a)) =>
         matita_arithmetics_primes.match_divides cic.prop d m
           (__ :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) d m) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.div
                 (matita_arithmetics_nat.plus n m) d)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_div_and_mod.div n d)
                 (matita_arithmetics_div_and_mod.div m d)))
           (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            eqm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m (matita_arithmetics_nat.times d b)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times d a)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x (matita_arithmetics_nat.times d a)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_div_and_mod.div
                       (matita_arithmetics_nat.plus x m) d)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_div_and_mod.div x d)
                       (matita_arithmetics_div_and_mod.div m d))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times d b)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x (matita_arithmetics_nat.times d b)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.div
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times d a) x)
                          d)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_div_and_mod.div
                             (matita_arithmetics_nat.times d a) d)
                          (matita_arithmetics_div_and_mod.div x d))))
                 (matita_basics_logic.eq_ind
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times d
                       (matita_arithmetics_nat.plus a b))
                    (x_1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times d
                               (matita_arithmetics_nat.plus a b))
                            x_1) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_div_and_mod.div x_1 d)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_div_and_mod.div
                                (matita_arithmetics_nat.times d a) d)
                             (matita_arithmetics_div_and_mod.div
                                (matita_arithmetics_nat.times d b) d))))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.plus a b) d)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.plus a b) d)) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_div_and_mod.div x d)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_div_and_mod.div
                                   (matita_arithmetics_nat.times d a) d)
                                (matita_arithmetics_div_and_mod.div
                                   (matita_arithmetics_nat.times d b) d))))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus a b)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  x (matita_arithmetics_nat.plus a b)) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_div_and_mod.div
                                      (matita_arithmetics_nat.times d a) d)
                                   (matita_arithmetics_div_and_mod.div
                                      (matita_arithmetics_nat.times d b) d))))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times a d)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     x (matita_arithmetics_nat.times a d)) =>
                              cic.lift cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus a b)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_div_and_mod.div x d)
                                      (matita_arithmetics_div_and_mod.div
                                         (matita_arithmetics_nat.times d b) d))))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                a
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_arithmetics_nat.nat)
                                        x a) =>
                                 cic.lift cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus a b)
                                      (matita_arithmetics_nat.plus x
                                         (matita_arithmetics_div_and_mod.div
                                            (matita_arithmetics_nat.times d b)
                                            d))))
                                (matita_basics_logic.eq_ind_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times b d)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_nat.times b d)) =>
                                    cic.lift cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus a b)
                                         (matita_arithmetics_nat.plus a
                                            (matita_arithmetics_div_and_mod.div
                                               x d))))
                                   (matita_basics_logic.eq_ind_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      b
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              x b) =>
                                       cic.lift cic.prop cic.prop
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.plus a b)
                                            (matita_arithmetics_nat.plus a x)))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus a b))
                                      (matita_arithmetics_div_and_mod.div
                                         (matita_arithmetics_nat.times b d) d)
                                      (matita_arithmetics_div_and_mod.div_times
                                         b d posd))
                                   (matita_arithmetics_nat.times d b)
                                   (matita_arithmetics_nat.commutative_times
                                      d b))
                                (matita_arithmetics_div_and_mod.div
                                   (matita_arithmetics_nat.times a d) d)
                                (matita_arithmetics_div_and_mod.div_times a d
                                   posd))
                             (matita_arithmetics_nat.times d a)
                             (matita_arithmetics_nat.commutative_times d a))
                          (matita_arithmetics_div_and_mod.div
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.plus a b) d)
                             d)
                          (matita_arithmetics_div_and_mod.div_times
                             (matita_arithmetics_nat.plus a b) d posd))
                       (matita_arithmetics_nat.times d
                          (matita_arithmetics_nat.plus a b))
                       (matita_arithmetics_nat.commutative_times d
                          (matita_arithmetics_nat.plus a b)))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times d a)
                       (matita_arithmetics_nat.times d b))
                    (matita_arithmetics_nat.distributive_times_plus d a b))
                 m eqm)
              n eqn)
           divdm)
        divdn.

def dividesb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod m n)
        matita_arithmetics_nat.O.

def dividesb_true_to_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_arithmetics_primes.dividesb n m)
                         matita_basics_bool.true) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_primes.dividesb n m)
              matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.true) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m))
        (posn :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         divbnm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true) =>
         matita_arithmetics_primes.mod_O_to_divides n m posn
           (matita_arithmetics_nat.eqb_true_to_eq
              (matita_arithmetics_div_and_mod.mod m n)
              matita_arithmetics_nat.O divbnm))
        (eqnO :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb x_1 m)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_arithmetics_primes.dividesb x_1 m)
                         matita_basics_bool.true) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) x_1 m)))
           (eqbmO :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb m matita_arithmetics_nat.O)
                   matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x matita_arithmetics_nat.O) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    matita_arithmetics_nat.O x))
              (matita_arithmetics_primes.divides_n_n matita_arithmetics_nat.O)
              m
              (matita_arithmetics_nat.eqb_true_to_eq m
                 matita_arithmetics_nat.O eqbmO))
           n eqnO)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def dividesb_false_to_not_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_arithmetics_primes.dividesb n m)
                         matita_basics_bool.false) =>
                  (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_primes.dividesb n m)
              matita_basics_bool.false)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false) =>
            (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m)))
        (posn :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         ndivbnm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false) =>
         matita_basics_logic.not_to_not
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod m n)
              matita_arithmetics_nat.O)
           (matita_arithmetics_primes.divides_to_mod_O n m posn)
           (matita_arithmetics_nat.eqb_false_to_not_eq
              (matita_arithmetics_div_and_mod.mod m n)
              matita_arithmetics_nat.O ndivbnm))
        (eqnO :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb x_1 m)
                    matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_arithmetics_primes.dividesb x_1 m)
                         matita_basics_bool.false) =>
                  (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) x_1 m))))
           (matita_arithmetics_nat.nat_case m
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_nat.eqb __
                          matita_arithmetics_nat.O)
                       matita_basics_bool.false)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_arithmetics_nat.eqb __
                               matita_arithmetics_nat.O)
                            matita_basics_bool.false) =>
                     (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m)
                          matita_arithmetics_nat.O __))))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m matita_arithmetics_nat.O) =>
               auto' :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.false) =>
               matita_basics_logic.not_to_not
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false)
                 (auto'' :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m)
                         matita_arithmetics_nat.O matita_arithmetics_nat.O) =>
                  matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true x))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    matita_basics_bool.false auto')
                 matita_basics_bool.not_eq_true_false)
              (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m (matita_arithmetics_nat.S a)) =>
               _0 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb
                         (matita_arithmetics_nat.S a)
                         matita_arithmetics_nat.O)
                      matita_basics_bool.false) =>
               matita_basics_logic.nmk
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    matita_arithmetics_nat.O (matita_arithmetics_nat.S a))
                 (_clearme :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m)
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.S a)) =>
                  matita_arithmetics_primes.match_divides cic.prop
                    matita_arithmetics_nat.O (matita_arithmetics_nat.S a)
                    (_1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m)
                            matita_arithmetics_nat.O
                            (matita_arithmetics_nat.S a)) =>
                     matita_basics_logic.False)
                    (q :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     auto :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S a)
                            (matita_arithmetics_nat.times
                               matita_arithmetics_nat.O q)) =>
                     matita_basics_logic.absurd
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S a))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                x (matita_arithmetics_nat.S a)))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S a)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x (matita_arithmetics_nat.S a)))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S a))
                             n
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S a) x))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times q
                                      matita_arithmetics_nat.O)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S a) x))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O q)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S a) x))
                                      auto
                                      (matita_arithmetics_nat.times q
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.commutative_times
                                         matita_arithmetics_nat.O q))
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.times_n_O q))
                                n eqnO))
                          matita_arithmetics_nat.O eqnO)
                       (matita_arithmetics_nat.not_eq_O_S a))
                    _clearme)))
           n eqnO)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def decidable_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (__ : cic.Univ cic.prop => matita_basics_logic.decidable __)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) n m))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)) =>
         (__1 : cic.Univ cic.prop => matita_basics_logic.decidable __1)
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true) =>
         matita_basics_logic.or_introl
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m))
           (matita_arithmetics_primes.dividesb_true_to_divides n m
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_arithmetics_primes.dividesb n m) auto)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false) =>
         matita_basics_logic.or_intror
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m))
           (matita_arithmetics_primes.dividesb_false_to_not_divides n m
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.false))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false)
                 (matita_arithmetics_primes.dividesb n m) auto)))
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.dividesb n m)).

def divides_to_dividesb_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb n m)
                       matita_basics_bool.true)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      divnm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) n m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_arithmetics_primes.dividesb n m) auto)
        (ndivbnm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.dividesb n m)
                 matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m)
              divnm
              (matita_arithmetics_primes.dividesb_false_to_not_divides n m
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (matita_arithmetics_primes.dividesb n m) ndivbnm))))
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.dividesb n m)).

def let_clause_15321 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (posn :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (eqn0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m)
                          matita_arithmetics_nat.O m)
                       (_clearme :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m)
                               matita_arithmetics_nat.O m) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (q :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O q))
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O q)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m matita_arithmetics_nat.O))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      eqn0 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) matita_arithmetics_nat.O
             m) =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O q)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times q matita_arithmetics_nat.O)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m x))
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times matita_arithmetics_nat.O q)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m x))
           eqm (matita_arithmetics_nat.times q matita_arithmetics_nat.O)
           (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O
              q))
        matita_arithmetics_nat.O (matita_arithmetics_nat.times_n_O q).

def let_clause_15591 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (posn :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (eqn0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m)
                          matita_arithmetics_nat.O m)
                       (_clearme :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m)
                               matita_arithmetics_nat.O m) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (q :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O q))
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O q)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m n))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      eqn0 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) matita_arithmetics_nat.O
             m) =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O q)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x n))
        eqn0 m
        (matita_arithmetics_primes.let_clause_15321 n m posn eqn0 _clearme q
           eqm).

def let_clause_15601 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (posn :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n)
                    (eqn0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O n) =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m)
                          matita_arithmetics_nat.O m)
                       (_clearme :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m)
                               matita_arithmetics_nat.O m) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (q :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O q))
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O q)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n matita_arithmetics_nat.O))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      eqn0 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) matita_arithmetics_nat.O
             m) =>
      q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             m (matita_arithmetics_nat.times matita_arithmetics_nat.O q)) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        m
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x matita_arithmetics_nat.O))
        (matita_arithmetics_primes.let_clause_15321 n m posn eqn0 _clearme q
           eqm)
        n
        (matita_arithmetics_primes.let_clause_15591 n m posn eqn0 _clearme q
           eqm).

def divides_to_dividesb_true1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O m) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) n m)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) n m) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb n m)
                       matita_basics_bool.true)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         cic.prod cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) n m)
           (__1 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_primes.dividesb n m)
              matita_basics_bool.true))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
         auto' :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) n m) =>
         matita_arithmetics_primes.divides_to_dividesb_true n m auto auto')
        (eqn0 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) x_1 m)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) x_1 m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb x_1 m)
                    matita_basics_bool.true)))
           (_clearme :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m)
                   matita_arithmetics_nat.O m) =>
            matita_arithmetics_primes.match_divides cic.prop
              matita_arithmetics_nat.O m
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m)
                      matita_arithmetics_nat.O m) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.dividesb matita_arithmetics_nat.O
                    m)
                 matita_basics_bool.true)
              (q : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               eqm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O
                         q)) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb
                          matita_arithmetics_nat.O m)
                       matita_basics_bool.true))
                 (matita_basics_logic.absurd
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __)
                       (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             m))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S n)
                             matita_arithmetics_nat.O))
                       posn
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S x) m))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S n)
                                      matita_arithmetics_nat.O))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             n
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S n) x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S n)
                                         matita_arithmetics_nat.O))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            (matita_arithmetics_nat.S n) n))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            (matita_arithmetics_nat.S n) x))))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S n) n)))
                                matita_arithmetics_nat.O
                                (matita_arithmetics_primes.let_clause_15601 n
                                   m posn eqn0 _clearme q eqm))
                             m
                             (matita_arithmetics_primes.let_clause_15591 n m
                                posn eqn0 _clearme q eqm))
                          matita_arithmetics_nat.O
                          (matita_arithmetics_primes.let_clause_15601 n m
                             posn eqn0 _clearme q eqm)))
                    (matita_arithmetics_nat.not_le_Sn_O n)))
              _clearme)
           n eqn0)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def not_divides_to_dividesb_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) n m))
                    (__1 :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           matita_basics_logic.Not _A)
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) n m)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb n m)
                       matita_basics_bool.false)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.dividesb n m) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)) =>
         cic.prod cic.prop cic.prop
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m))
           (__1 :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) n m)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_primes.dividesb n m)
              matita_basics_bool.false))
        (divbnm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true) =>
         ndivnm :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.dividesb n m)
                 matita_basics_bool.false))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) n m)
              (matita_arithmetics_primes.dividesb_true_to_divides n m
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_arithmetics_primes.dividesb n m) divbnm))
              ndivnm))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false) =>
         auto' :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) n m)) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.false))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false)
           (matita_arithmetics_primes.dividesb n m) auto)
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.dividesb n m)).

def dividesb_div_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb d n)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_arithmetics_primes.dividesb d n)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb
                          (matita_arithmetics_div_and_mod.div n d) n)
                       matita_basics_bool.true)))))
      :=
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      divbdn :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_arithmetics_primes.dividesb d n) matita_basics_bool.true) =>
      matita_arithmetics_primes.divides_to_dividesb_true1
        (matita_arithmetics_div_and_mod.div n d) n posn
        (matita_arithmetics_primes.divides_div d n
           (matita_arithmetics_primes.dividesb_true_to_divides d n
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_arithmetics_primes.dividesb d n) divbdn))).

def let_clause_1573 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (posn :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) m n)
                    (_clearme :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m n) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O m)
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O m) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n (matita_arithmetics_nat.times m d))
                             (auto' :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     n (matita_arithmetics_nat.times m d)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n m))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) m n) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O m) =>
      auto' :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             n (matita_arithmetics_nat.times m d)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times m d)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              n x))
        auto' m
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m (matita_arithmetics_nat.times x d)))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_nat.times matita_arithmetics_nat.O d)))
              (matita_arithmetics_nat.times_O_n d) m auto)
           m auto).

def let_clause_1585 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (posn :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) m n)
                    (_clearme :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m n) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (d :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O m)
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O m) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                n (matita_arithmetics_nat.times m d))
                             (auto' :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     n (matita_arithmetics_nat.times m d)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O n))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) m n) =>
      d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O m) =>
      auto' :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             n (matita_arithmetics_nat.times m d)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        m
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O x))
        auto n
        (matita_arithmetics_primes.let_clause_1573 n m posn _clearme d auto
           auto').

def dividesb_true_to_lt_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) m n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m n) =>
                     (__2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __3 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __2 __3)
                       matita_arithmetics_nat.O m)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.divides _n _m) m n) =>
      matita_arithmetics_primes.match_divides cic.prop m n
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) m n) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O m)
        (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O m)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O m)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O m)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n (matita_arithmetics_nat.times m d))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      n (matita_arithmetics_nat.times m d)) =>
               (__2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __3 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __2 __3) matita_arithmetics_nat.O m))
           (auto :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                   m) =>
            auto' :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   n (matita_arithmetics_nat.times m d)) =>
            auto)
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O m) =>
            auto' :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   n (matita_arithmetics_nat.times m d)) =>
            matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n))
              (cic.lift cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    m))
              posn
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) x n))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             matita_arithmetics_nat.O m))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n n))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) x m))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) n n))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) n x))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n n)))
                       m
                       (matita_arithmetics_primes.let_clause_1573 n m posn
                          _clearme d auto auto'))
                    matita_arithmetics_nat.O
                    (matita_arithmetics_primes.let_clause_1585 n m posn
                       _clearme d auto auto'))
                 matita_arithmetics_nat.O
                 (matita_arithmetics_primes.let_clause_1585 n m posn _clearme
                    d auto auto')))
           (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O m
              (matita_arithmetics_nat.le_O_n m)))
        _clearme.

def prime :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.univ cic.prop))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      (_A : cic.Univ cic.prop =>
       _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
        ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __ __1)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) m n)
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) m n) =>
               cic.prod cic.prop cic.prop
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (__1 :
                    cic.Term cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m n)))).

def not_prime_O :
      cic.Term cic.prop
        ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __) matita_arithmetics_nat.O))
      :=
      matita_basics_logic.nmk
        ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.prime __) matita_arithmetics_nat.O)
        (_clearme :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.prime __) matita_arithmetics_nat.O) =>
         matita_basics_logic.match_And cic.prop
           (matita_arithmetics_nat.lt
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.O)
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_primes.divides m
                    matita_arithmetics_nat.O)
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides m
                         matita_arithmetics_nat.O) =>
                  cic.prod cic.prop cic.prop
                    (matita_arithmetics_nat.lt
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                    (__1 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.lt
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m) =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m matita_arithmetics_nat.O))))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.O)
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (m :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m
                            matita_arithmetics_nat.O)
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n _m) m
                                 matita_arithmetics_nat.O) =>
                          cic.prod cic.prop cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               m)
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2)
                                    (matita_arithmetics_nat.S
                                       matita_arithmetics_nat.O)
                                    m) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               m matita_arithmetics_nat.O))))) =>
            matita_basics_logic.False)
           (lt10 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.O) =>
            auto :
              cic.Term cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m
                         matita_arithmetics_nat.O)
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             _m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_primes.divides _n _m) m
                              matita_arithmetics_nat.O) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m matita_arithmetics_nat.O)))) =>
            matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 matita_arithmetics_nat.O)
              lt10
              (matita_arithmetics_nat.not_le_Sn_O
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           _clearme).

def not_prime_SO :
      cic.Term cic.prop
        ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
      :=
      matita_basics_logic.nmk
        ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.prime __)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (_clearme :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.prime __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
         matita_basics_logic.match_And cic.prop
           (matita_arithmetics_nat.lt
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_primes.divides m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides m
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
                  cic.prod cic.prop cic.prop
                    (matita_arithmetics_nat.lt
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                    (__1 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.lt
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m) =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (m :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n _m) m
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)) =>
                          cic.prod cic.prop cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               m)
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2)
                                    (matita_arithmetics_nat.S
                                       matita_arithmetics_nat.O)
                                    m) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               m
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)))))) =>
            matita_basics_logic.False)
           (lt11 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
            auto :
              cic.Term cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             _m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_primes.divides _n _m) m
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))))) =>
            matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              lt11
              (matita_arithmetics_nat.not_le_Sn_n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           _clearme).

def prime_to_lt_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) p)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.prime __) p) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O p)))
      :=
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.prime __) p) =>
      matita_basics_logic.match_And cic.prop
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides m p)
              (__ :
                 cic.Term cic.prop (matita_arithmetics_primes.divides m p) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m) =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m p))))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m p)
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             _m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_primes.divides _n _m) m p) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m p))))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O p)
        (lt1p :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) =>
         auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) m p)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          _m :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_primes.divides _n _m) m p) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2)
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)
                              m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         m p)))) =>
         matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O p lt1p)
        _clearme.

def prime_to_lt_SO :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) p)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.prime __) p) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)))
      :=
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.prime __) p) =>
      matita_basics_logic.match_And cic.prop
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides m p)
              (__ :
                 cic.Term cic.prop (matita_arithmetics_primes.divides m p) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m) =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m p))))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m p)
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             _m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_primes.divides _n _m) m p) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m p))))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
        (lt1p :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) =>
         auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) m p)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          _m :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_primes.divides _n _m) m p) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2)
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)
                              m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         m p)))) =>
         lt1p)
        _clearme.

def smallest_factor :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.nat))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_arithmetics_nat.nat)
        n
        (matita_arithmetics_minimization.min n
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.eqb
              (matita_arithmetics_div_and_mod.mod n m)
              matita_arithmetics_nat.O))
        (matita_arithmetics_nat.leb n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)).

def smallest_factor_to_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_primes.smallest_factor n)
                 (matita_arithmetics_minimization.min n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.eqb
                       (matita_arithmetics_div_and_mod.mod n m)
                       matita_arithmetics_nat.O)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.false
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                x matita_basics_bool.false) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n
                 (matita_arithmetics_minimization.min n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.eqb
                       (matita_arithmetics_nat.match_nat (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.nat)
                          n
                          (p :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_div_and_mod.mod_aux n n p)
                          m)
                       matita_arithmetics_nat.O))
                 x)
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_nat.match_nat (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat)
                       n
                       (p :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_div_and_mod.mod_aux n n p)
                       m)
                    matita_arithmetics_nat.O))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool (cic.type cic.z)
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_nat.match_nat (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat)
                       n
                       (p :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_div_and_mod.mod_aux n n p)
                       m)
                    matita_arithmetics_nat.O))
              matita_basics_bool.false))
        (matita_arithmetics_nat.leb n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (matita_arithmetics_nat.lt_to_leb_false n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) lt1n).

def example1 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))).

def example2 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)).

def example3 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))))))))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))).

def le_SO_smallest_factor :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) n
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_primes.smallest_factor n) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      le1n :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) n
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.true
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                x matita_basics_bool.true) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n
                 (matita_arithmetics_minimization.min n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.eqb
                       (matita_arithmetics_nat.match_nat (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.nat)
                          n
                          (p :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_div_and_mod.mod_aux n n p)
                          m)
                       matita_arithmetics_nat.O))
                 x)
              n))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool (cic.type cic.z)
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_nat.match_nat (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat)
                       n
                       (p :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_div_and_mod.mod_aux n n p)
                       m)
                    matita_arithmetics_nat.O))
              matita_basics_bool.true))
        (matita_arithmetics_nat.leb n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (matita_arithmetics_nat.le_to_leb_true n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) le1n).

def lt_SO_smallest_factor :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_primes.smallest_factor n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.min n
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.eqb
              (matita_arithmetics_div_and_mod.mod n m)
              matita_arithmetics_nat.O))
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_minimization.min n
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.eqb
                      (matita_arithmetics_div_and_mod.mod n m)
                      matita_arithmetics_nat.O))) =>
         cic.lift cic.prop cic.prop
           ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) x))
        (matita_arithmetics_minimization.le_min_l
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.eqb
              (matita_arithmetics_div_and_mod.mod n m)
              matita_arithmetics_nat.O)
           n
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        (matita_arithmetics_primes.smallest_factor n)
        (matita_arithmetics_primes.smallest_factor_to_min n lt1n).

def lt_O_smallest_factor :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O n) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O
                 (matita_arithmetics_primes.smallest_factor n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      matita_arithmetics_nat.match_le cic.prop
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) __) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O
           (matita_arithmetics_primes.smallest_factor __))
        (matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
            cic.lift cic.prop cic.prop
              ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) matita_arithmetics_nat.O x))
           (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_primes.le_SO_smallest_factor
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         posm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) m) =>
         matita_arithmetics_nat.le_S_S_to_le
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.le_S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_primes.smallest_factor
                 (matita_arithmetics_nat.S m))
              (matita_arithmetics_primes.lt_SO_smallest_factor
                 (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.le_S_S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m
                    posm))))
        n posn.

def divides_smallest_factor_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      matita_arithmetics_nat.O n) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m)
                 (matita_arithmetics_primes.smallest_factor n) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.divides _n _m)
           (matita_arithmetics_primes.smallest_factor n) n)
        (lt1n :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         matita_arithmetics_primes.mod_O_to_divides
           (matita_arithmetics_primes.smallest_factor n) n
           (matita_arithmetics_primes.lt_O_smallest_factor n posn)
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_div_and_mod.mod n m)
                    matita_arithmetics_nat.O))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min n
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))
                         (m :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.eqb
                            (matita_arithmetics_div_and_mod.mod n m)
                            matita_arithmetics_nat.O))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_div_and_mod.mod n x)
                    matita_arithmetics_nat.O))
              (matita_arithmetics_nat.eqb_true_to_eq
                 (matita_arithmetics_div_and_mod.mod n
                    (matita_arithmetics_minimization.min n
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.eqb
                          (matita_arithmetics_div_and_mod.mod n m)
                          matita_arithmetics_nat.O)))
                 matita_arithmetics_nat.O
                 (matita_arithmetics_minimization.f_min_true
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.eqb
                       (matita_arithmetics_div_and_mod.mod n __)
                       matita_arithmetics_nat.O)
                    n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_basics_logic.ex_intro
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.And _A _B)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))
                                   i)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i
                                   (matita_arithmetics_nat.plus n
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)))))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_arithmetics_nat.eqb
                                   (matita_arithmetics_div_and_mod.mod n i)
                                   matita_arithmetics_nat.O)
                                matita_basics_bool.true)))
                       n
                       (matita_basics_logic.conj
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))
                                n)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n
                                (matita_arithmetics_nat.plus n
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_arithmetics_nat.eqb
                                (matita_arithmetics_div_and_mod.mod n n)
                                matita_arithmetics_nat.O)
                             matita_basics_bool.true)
                          (matita_basics_logic.conj
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))
                                n)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n
                                (matita_arithmetics_nat.plus n
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             lt1n
                             (matita_basics_logic.eq_coerc
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S n)
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.S n)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S n)
                                      (matita_arithmetics_nat.plus n
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)))))
                                (matita_arithmetics_nat.le_plus_n_r
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.S n))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.S n))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.univ (cic.type cic.z)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S n) x))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S n)
                                               (matita_arithmetics_nat.plus n
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)))))))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus n
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.univ (cic.type cic.z)))
                                            (cic.lift cic.prop
                                               (cic.type cic.z)
                                               ((_n :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.le _n
                                                   __)
                                                  (matita_arithmetics_nat.S n)
                                                  x))
                                            (cic.lift cic.prop
                                               (cic.type cic.z)
                                               ((_n :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.le _n
                                                   __)
                                                  (matita_arithmetics_nat.S n)
                                                  (matita_arithmetics_nat.plus
                                                     n
                                                     (matita_arithmetics_nat.S
                                                        (matita_arithmetics_nat.S
                                                           matita_arithmetics_nat.O)))))))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.univ (cic.type cic.z)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n __)
                                               (matita_arithmetics_nat.S n)
                                               (matita_arithmetics_nat.plus n
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O))))))
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         (matita_arithmetics_nat.S n))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               n))
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.plus n
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)))))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.plus n
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))
                                            (x :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S x)
                                                  (matita_arithmetics_nat.plus
                                                     n
                                                     (matita_arithmetics_nat.S
                                                        (matita_arithmetics_nat.S
                                                           matita_arithmetics_nat.O)))))
                                            (matita_arithmetics_nat.plus_n_Sm
                                               n
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               n)
                                            (matita_arithmetics_nat.commutative_plus
                                               n
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)))
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            (matita_arithmetics_nat.S n))
                                         (matita_arithmetics_nat.plus_n_Sm
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            n)))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S n)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_nat.commutative_plus
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.S n)))))
                          (matita_arithmetics_primes.divides_to_dividesb_true
                             n n posn
                             (matita_arithmetics_primes.divides_n_n n))))))
              (matita_arithmetics_primes.smallest_factor n)
              (matita_arithmetics_primes.smallest_factor_to_min n lt1n)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) x_1) =>
            cic.lift cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m)
                 (matita_arithmetics_primes.smallest_factor x_1) x_1))
           (matita_arithmetics_primes.divides_n_n
              (matita_arithmetics_primes.smallest_factor
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           n H)
        (matita_arithmetics_nat.le_to_or_lt_eq
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n posn).

def le_smallest_factor_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_primes.smallest_factor n) n))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.le _n __1)
           (matita_arithmetics_primes.smallest_factor __) __)
        (matita_arithmetics_nat.le_n
           (matita_arithmetics_primes.smallest_factor
              matita_arithmetics_nat.O))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_primes.divides_to_le
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.S m) (matita_arithmetics_nat.lt_O_S m)
           (matita_arithmetics_primes.divides_smallest_factor_n
              (matita_arithmetics_nat.S m) (matita_arithmetics_nat.lt_O_S m)))
        n.

def lt_smallest_factor_to_not_divides :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n) =>
                  cic.prod cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)
                    (__1 :
                       cic.Term cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            i) =>
                     cic.prod cic.prop cic.prop
                       ((__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3) i
                          (matita_arithmetics_primes.smallest_factor n))
                       (__2 :
                          cic.Term cic.prop
                            ((__2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __3 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __2 __3) i
                               (matita_arithmetics_primes.smallest_factor n)) =>
                        (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _m :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_primes.divides _n _m) i n)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      lti :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) i) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.min n
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.eqb
              (matita_arithmetics_div_and_mod.mod n m)
              matita_arithmetics_nat.O))
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_minimization.min n
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.eqb
                      (matita_arithmetics_div_and_mod.mod n m)
                      matita_arithmetics_nat.O))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) i x)
              (__1 :
                 cic.Term cic.prop
                   ((__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __1 __2) i x) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) i n))))
        (ltmin :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) i
                (matita_arithmetics_minimization.min n
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.eqb
                      (matita_arithmetics_div_and_mod.mod n m)
                      matita_arithmetics_nat.O))) =>
         matita_basics_logic.not_to_not
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) i n)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod n i)
              matita_arithmetics_nat.O)
           (divin :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) i n) =>
            matita_arithmetics_primes.divides_to_mod_O i n
              (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O i
                 lti)
              divin)
           (matita_arithmetics_nat.eqb_false_to_not_eq
              (matita_arithmetics_div_and_mod.mod n i)
              matita_arithmetics_nat.O
              (matita_arithmetics_minimization.lt_min_to_false
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_div_and_mod.mod n m)
                    matita_arithmetics_nat.O)
                 n i
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 lti ltmin)))
        (matita_arithmetics_primes.smallest_factor n)
        (matita_arithmetics_primes.smallest_factor_to_min n ltn).

def prime_smallest_factor_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __1)
                 (matita_arithmetics_primes.smallest_factor n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      matita_basics_logic.conj
        ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __ __1)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_primes.smallest_factor n))
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) m
                 (matita_arithmetics_primes.smallest_factor n))
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) m
                      (matita_arithmetics_primes.smallest_factor n)) =>
               cic.prod cic.prop cic.prop
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (__1 :
                    cic.Term cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m (matita_arithmetics_primes.smallest_factor n)))))
        (matita_arithmetics_primes.lt_SO_smallest_factor n lt1n)
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         divmmin :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.divides _n _m) m
                (matita_arithmetics_primes.smallest_factor n)) =>
         lt1m :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) m) =>
         matita_arithmetics_nat.le_to_le_to_eq m
           (matita_arithmetics_primes.smallest_factor n)
           (matita_arithmetics_primes.divides_to_le m
              (matita_arithmetics_primes.smallest_factor n)
              (matita_arithmetics_primes.lt_O_smallest_factor n
                 (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O
                    n lt1n))
              divmmin)
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (m0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_div_and_mod.mod n m0)
                    matita_arithmetics_nat.O))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min n
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))
                         (m0 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.eqb
                            (matita_arithmetics_div_and_mod.mod n m0)
                            matita_arithmetics_nat.O))) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x m))
              (matita_arithmetics_minimization.true_to_le_min
                 (m0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.eqb
                    (matita_arithmetics_div_and_mod.mod n m0)
                    matita_arithmetics_nat.O)
                 n m
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 lt1m
                 (matita_arithmetics_nat.eq_to_eqb_true
                    (matita_arithmetics_div_and_mod.mod n m)
                    matita_arithmetics_nat.O
                    (matita_arithmetics_primes.divides_to_mod_O m n
                       (matita_arithmetics_nat.lt_S_to_lt
                          matita_arithmetics_nat.O m lt1m)
                       (matita_arithmetics_primes.transitive_divides m
                          (matita_arithmetics_primes.smallest_factor n) n
                          divmmin
                          (matita_arithmetics_primes.divides_smallest_factor_n
                             n
                             (matita_arithmetics_nat.lt_S_to_lt
                                matita_arithmetics_nat.O n lt1n))))))
              (matita_arithmetics_primes.smallest_factor n)
              (matita_arithmetics_primes.smallest_factor_to_min n lt1n))).

def prime_to_smallest_factor :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.prime __) n) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_primes.smallest_factor n) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.prime __) n) =>
      matita_basics_logic.match_And cic.prop
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides m n)
              (__ :
                 cic.Term cic.prop (matita_arithmetics_primes.divides m n) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m) =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m n))))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (m :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m) m n)
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             _m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_primes.divides _n _m) m n) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m n))))) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.smallest_factor n) n)
        (lt1n :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         primen :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.divides _n _m) m n)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          _m :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_primes.divides _n _m) m n) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2)
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)
                              m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         m n)))) =>
         primen (matita_arithmetics_primes.smallest_factor n)
           (matita_arithmetics_primes.divides_smallest_factor_n n
              (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O n
                 lt1n))
           (matita_arithmetics_primes.lt_SO_smallest_factor n lt1n))
        _clearme.

def smallest_factor_to_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_primes.smallest_factor n) n)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_primes.smallest_factor n) n) =>
                  (__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __2) n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_primes.smallest_factor n) n) =>
      matita_basics_logic.eq_ind
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_primes.smallest_factor n)
        (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_2 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_primes.smallest_factor n) x_1) =>
         cic.lift cic.prop cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __) x_1))
        (matita_arithmetics_primes.prime_smallest_factor_n n lt1n) n H.

def primeb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_basics_bool.bool))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_bool.andb
        (matita_arithmetics_nat.leb
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           n)
        (matita_arithmetics_nat.eqb
           (matita_arithmetics_primes.smallest_factor n) n).

def example4 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           matita_basics_bool.true)
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.true.

def example5 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))))))
           matita_basics_bool.false)
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.false.

def example6 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O))))))))))))
           matita_basics_bool.true)
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.true.

def example7 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S
                                               (matita_arithmetics_nat.S
                                                  (matita_arithmetics_nat.S
                                                     (matita_arithmetics_nat.S
                                                        (matita_arithmetics_nat.S
                                                           (matita_arithmetics_nat.S
                                                              (matita_arithmetics_nat.S
                                                                 matita_arithmetics_nat.O))))))))))))))))))
           matita_basics_bool.true)
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.true.

def primeb_true_to_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n) matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_arithmetics_primes.primeb n)
                      matita_basics_bool.true) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __1) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      primebn :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_arithmetics_primes.primeb n) matita_basics_bool.true) =>
      matita_arithmetics_primes.smallest_factor_to_prime n
        (matita_arithmetics_nat.leb_true_to_le
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           n
           (matita_basics_bool.andb_true_l
              (matita_arithmetics_nat.leb
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 n)
              (matita_arithmetics_nat.eqb
                 (matita_arithmetics_primes.smallest_factor n) n)
              primebn))
        (matita_arithmetics_nat.eqb_true_to_eq
           (matita_arithmetics_primes.smallest_factor n) n
           (matita_basics_bool.andb_true_r
              (matita_arithmetics_nat.leb
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 n)
              (matita_arithmetics_nat.eqb
                 (matita_arithmetics_primes.smallest_factor n) n)
              primebn)).

def primeb_false_to_not_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n)
                 matita_basics_bool.false)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_arithmetics_primes.primeb n)
                      matita_basics_bool.false) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __1) n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_arithmetics_primes.primeb n) matita_basics_bool.false) =>
      matita_arithmetics_nat.leb_elim
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        n
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.andb __
                    (matita_arithmetics_nat.eqb
                       (matita_arithmetics_primes.smallest_factor n) n))
                 matita_basics_bool.false)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.andb __
                         (matita_arithmetics_nat.eqb
                            (matita_arithmetics_primes.smallest_factor n) n))
                      matita_basics_bool.false) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __2) n))))
        (__ :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                n) =>
         H1 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __1)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_bool.andb matita_basics_bool.true
                   (matita_arithmetics_nat.eqb
                      (matita_arithmetics_primes.smallest_factor n) n))
                matita_basics_bool.false) =>
         matita_basics_logic.not_to_not
           ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __1) n)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_primes.smallest_factor n) n)
           (matita_arithmetics_primes.prime_to_smallest_factor n)
           (matita_arithmetics_nat.eqb_false_to_not_eq
              (matita_arithmetics_primes.smallest_factor n) n H1))
        (len1 :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   n)) =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_bool.andb matita_basics_bool.false
                   (matita_arithmetics_nat.eqb
                      (matita_arithmetics_primes.smallest_factor n) n))
                matita_basics_bool.false) =>
         matita_basics_logic.not_to_not
           ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __1) n)
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              n)
           (_clearme :
              cic.Term cic.prop
                ((__1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.prime __1) n) =>
            matita_basics_logic.match_And cic.prop
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (matita_arithmetics_primes.divides m n)
                    (__1 :
                       cic.Term cic.prop
                         (matita_arithmetics_primes.divides m n) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          m)
                       (__2 :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.lt
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               m) =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m n))))
              (_0 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n)
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (m :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_primes.divides _n _m) m n)
                            (__1 :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   _m :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_primes.divides _n _m) m
                                    n) =>
                             cic.prod cic.prop cic.prop
                               ((__2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __3 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __2 __3)
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)
                                  m)
                               (__2 :
                                  cic.Term cic.prop
                                    ((__2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __3 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __2 __3)
                                       (matita_arithmetics_nat.S
                                          matita_arithmetics_nat.O)
                                       m) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __3 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __3)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  m n))))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 n)
              (auto :
                 cic.Term cic.prop
                   ((__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __1 __2)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               auto' :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (m :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m) m n)
                         (__1 :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n _m) m n) =>
                          cic.prod cic.prop cic.prop
                            ((__2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __3 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __2 __3)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               m)
                            (__2 :
                               cic.Term cic.prop
                                 ((__2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __3 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __2 __3)
                                    (matita_arithmetics_nat.S
                                       matita_arithmetics_nat.O)
                                    m) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __3 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __3)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               m n)))) =>
               auto)
              _clearme)
           len1)
        H.

def decidable_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Univ cic.prop => matita_basics_logic.decidable __)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.false)) =>
         (__1 : cic.Univ cic.prop => matita_basics_logic.decidable __1)
           ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __1) n))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.true) =>
         matita_basics_logic.or_introl
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __) n)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n))
           (matita_arithmetics_primes.primeb_true_to_prime n
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_arithmetics_primes.primeb n) H)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.false) =>
         matita_basics_logic.or_intror
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __) n)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n))
           (matita_arithmetics_primes.primeb_false_to_not_prime n
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.false))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false)
                 (matita_arithmetics_primes.primeb n) H)))
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.primeb n)).

def prime_to_primeb_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.prime __) n) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n) matita_basics_bool.true)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      primen :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.prime __) n) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.false)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.true)
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_arithmetics_primes.primeb n) auto)
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.false) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n) matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n)
              primen
              (matita_arithmetics_primes.primeb_false_to_not_prime n
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (matita_arithmetics_primes.primeb n) H))))
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.primeb n)).

def not_prime_to_primeb_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __) n))
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.prime __) n)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n)
                 matita_basics_bool.false)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      np :
        cic.Term cic.prop
          ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_primes.prime __) n)) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.primeb n)
                   matita_basics_bool.false)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_arithmetics_primes.primeb n) matita_basics_bool.false)
        (p :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_primes.primeb n)
                 matita_basics_bool.false))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) n)
              (matita_arithmetics_primes.primeb_true_to_prime n
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_arithmetics_primes.primeb n) p))
              np))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.primeb n) matita_basics_bool.false) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.false))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false)
           (matita_arithmetics_primes.primeb n) auto)
        (matita_basics_bool.true_or_false
           (matita_arithmetics_primes.primeb n)).

def divides_fact :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    i)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O i) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) i n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __1) i n) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m) i
                       (matita_arithmetics_factorial.fact n))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltOi :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O i) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) i _x_365)
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) i _x_365) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) i
                 (matita_arithmetics_factorial.fact _x_365))))
        (leiO :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) i matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m) i
                 (matita_arithmetics_factorial.fact matita_arithmetics_nat.O)))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O i)
              ltOi
              (matita_arithmetics_nat.le_to_not_lt i matita_arithmetics_nat.O
                 leiO)))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) i n0)
                (__ :
                   cic.Term cic.prop
                     ((_n :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.le _n __) i n0) =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _m :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_primes.divides _n _m) i
                   (matita_arithmetics_factorial.fact n0))) =>
         lei :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) i
                (matita_arithmetics_nat.S n0)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n0))
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              i (matita_arithmetics_nat.S n0))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S n0))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      i (matita_arithmetics_nat.S n0))) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.divides _n _m) i
              (matita_arithmetics_nat.times
                 (matita_arithmetics_factorial.fact n0)
                 (matita_arithmetics_nat.S n0)))
           (ltiS :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i
                   (matita_arithmetics_nat.S n0)) =>
            matita_arithmetics_primes.transitive_divides i
              (matita_arithmetics_factorial.fact n0)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_factorial.fact n0)
                 (matita_arithmetics_nat.S n0))
              (Hind
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __)
                          (matita_arithmetics_nat.pred
                             (matita_arithmetics_nat.S i))
                          (matita_arithmetics_nat.pred
                             (matita_arithmetics_nat.S n0))))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) i n0))
                    (matita_arithmetics_nat.monotonic_pred
                       (matita_arithmetics_nat.S i)
                       (matita_arithmetics_nat.S n0) ltiS)
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       i
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) x
                                   (matita_arithmetics_nat.pred
                                      (matita_arithmetics_nat.S n0))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) i n0))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n0
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) i x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) i n0))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) i n0)))
                          (matita_arithmetics_nat.pred
                             (matita_arithmetics_nat.S n0))
                          (matita_arithmetics_nat.pred_Sn n0))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S i))
                       (matita_arithmetics_nat.pred_Sn i))))
              (matita_arithmetics_primes.quotient
                 (matita_arithmetics_factorial.fact n0)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_factorial.fact n0)
                    (matita_arithmetics_nat.S n0))
                 (matita_arithmetics_nat.S n0)
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_factorial.fact n0)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_factorial.fact n0) n0))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_factorial.fact n0)
                             (matita_arithmetics_nat.S n0))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n0
                          (matita_arithmetics_factorial.fact n0))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_factorial.fact n0) x)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_factorial.fact n0)
                                (matita_arithmetics_nat.S n0))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S n0)
                             (matita_arithmetics_factorial.fact n0))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_factorial.fact n0)
                                   (matita_arithmetics_nat.times n0
                                      (matita_arithmetics_factorial.fact n0)))
                                x))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S n0)
                                (matita_arithmetics_factorial.fact n0))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_nat.S n0)
                                      (matita_arithmetics_factorial.fact n0))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.S n0)
                                   (matita_arithmetics_factorial.fact n0)))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_factorial.fact n0)
                                (matita_arithmetics_nat.times n0
                                   (matita_arithmetics_factorial.fact n0)))
                             (matita_arithmetics_nat.times_Sn_m n0
                                (matita_arithmetics_factorial.fact n0)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_factorial.fact n0)
                             (matita_arithmetics_nat.S n0))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_factorial.fact n0)
                             (matita_arithmetics_nat.S n0)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_factorial.fact n0) n0)
                       (matita_arithmetics_nat.commutative_times
                          (matita_arithmetics_factorial.fact n0) n0))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_factorial.fact n0)
                       (matita_arithmetics_nat.S n0))
                    (matita_arithmetics_nat.times_n_Sm
                       (matita_arithmetics_factorial.fact n0) n0))))
           (eqi :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   i (matita_arithmetics_nat.S n0)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n0)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x (matita_arithmetics_nat.S n0)) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m) x
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_factorial.fact n0)
                       (matita_arithmetics_nat.S n0))))
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m)
                       (matita_arithmetics_nat.times i
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_arithmetics_nat.times i
                          (matita_arithmetics_factorial.fact n0))))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _m :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.divides _n _m)
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_factorial.fact n0)
                          (matita_arithmetics_nat.S n0))))
                 (matita_arithmetics_primes.divides_times i
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) i
                    (matita_arithmetics_factorial.fact n0)
                    (matita_arithmetics_primes.divides_n_n i)
                    (matita_arithmetics_primes.divides_SO_n
                       (matita_arithmetics_factorial.fact n0)))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    i
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _m :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_primes.divides _n _m)
                                (matita_arithmetics_nat.times i
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))
                                (matita_arithmetics_nat.times i
                                   (matita_arithmetics_factorial.fact n0))))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _m :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_primes.divides _n _m) x
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_factorial.fact n0)
                                   (matita_arithmetics_nat.S n0))))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       i
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n _m)
                                   (matita_arithmetics_nat.times i
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_nat.times i
                                      (matita_arithmetics_factorial.fact n0))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _m :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_primes.divides _n _m) i
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_factorial.fact n0)
                                      x)))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times i
                             (matita_arithmetics_factorial.fact n0))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      (matita_arithmetics_nat.times i
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))
                                      (matita_arithmetics_nat.times i
                                         (matita_arithmetics_factorial.fact
                                            n0))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      i x))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             i
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         x
                                         (matita_arithmetics_nat.times i
                                            (matita_arithmetics_factorial.fact
                                               n0))))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _m :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_primes.divides _n
                                          _m)
                                         i
                                         (matita_arithmetics_nat.times i
                                            (matita_arithmetics_factorial.fact
                                               n0))))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     _m :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_primes.divides _n _m)
                                      i
                                      (matita_arithmetics_nat.times i
                                         (matita_arithmetics_factorial.fact
                                            n0)))))
                             (matita_arithmetics_nat.times i
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.times_n_1 i))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_factorial.fact n0) i)
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_factorial.fact n0) i))
                       (matita_arithmetics_nat.S n0) eqi)
                    (matita_arithmetics_nat.S n0) eqi))
              i eqi)
           (matita_arithmetics_nat.le_to_or_lt_eq i
              (matita_arithmetics_nat.S n0) lei))
        n.

def mod_S_fact :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         i) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) i n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __1) i n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.mod
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_factorial.fact n))
                          i)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1i :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) i) =>
      lein :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) i n) =>
      matita_basics_logic.eq_ind
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_div_and_mod.mod
           (matita_arithmetics_factorial.fact n) i)
        (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_2 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_div_and_mod.mod
                   (matita_arithmetics_factorial.fact n) i)
                x_1) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n))
                 i)
              (matita_arithmetics_nat.S x_1)))
        (matita_arithmetics_div_and_mod.mod_S
           (matita_arithmetics_factorial.fact n) i
           (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O i lt1i)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) i))
              (cic.lift cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_div_and_mod.mod
                          (matita_arithmetics_factorial.fact n) i))
                    i))
              lt1i
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             i))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_nat.S x) i))))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type cic.z)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          i)))
                 (matita_arithmetics_div_and_mod.mod
                    (matita_arithmetics_factorial.fact n) i)
                 (matita_arithmetics_primes.divides_to_mod_O i
                    (matita_arithmetics_factorial.fact n)
                    (matita_arithmetics_nat.lt_S_to_lt
                       matita_arithmetics_nat.O i lt1i)
                    (matita_arithmetics_primes.divides_fact n i
                       (matita_arithmetics_nat.lt_S_to_lt
                          matita_arithmetics_nat.O i lt1i)
                       lein)))))
        matita_arithmetics_nat.O
        (matita_arithmetics_primes.divides_to_mod_O i
           (matita_arithmetics_factorial.fact n)
           (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O i lt1i)
           (matita_arithmetics_primes.divides_fact n i
              (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O i
                 lt1i)
              lein)).

def not_divides_S_fact :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         i) =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) i n)
                    (__1 :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __1) i n) =>
                     (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _m :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.divides _n _m) i
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_factorial.fact n))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lt1i :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) i) =>
      lein :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) i n) =>
      matita_basics_logic.not_to_not
        ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.divides _n _m) i
           (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n)))
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_div_and_mod.mod
              (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n))
              i)
           matita_arithmetics_nat.O)
        (matita_arithmetics_primes.divides_to_mod_O i
           (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n))
           (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O i lt1i))
        (matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x matita_arithmetics_nat.O)))
           (matita_arithmetics_nat.eqb_false_to_not_eq
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.O
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.O)))
           (matita_arithmetics_div_and_mod.mod
              (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n))
              i)
           (matita_arithmetics_primes.mod_S_fact n i lt1i lein)).

def smallest_factor_fact :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) n
              (matita_arithmetics_primes.smallest_factor
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.not_le_to_lt
        (matita_arithmetics_primes.smallest_factor
           (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n)))
        n
        (matita_basics_logic.not_to_not
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_primes.smallest_factor
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n)))
              n)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.divides _n _m)
                 (matita_arithmetics_primes.smallest_factor
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact n)))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n))))
           (matita_arithmetics_primes.not_divides_S_fact n
              (matita_arithmetics_primes.smallest_factor
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n)))
              (matita_arithmetics_primes.lt_SO_smallest_factor
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact n))
                 (matita_arithmetics_nat.le_S_S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_factorial.fact n)
                    (matita_arithmetics_factorial.le_1_fact n))))
           (matita_basics_logic.nmk
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact n)))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact n))))
              (_clearme :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_primes.divides _n _m)
                         (matita_arithmetics_primes.smallest_factor
                            (matita_arithmetics_nat.S
                               (matita_arithmetics_factorial.fact n)))
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_factorial.fact n)))) =>
               matita_basics_logic.match_Not cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _m :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.divides _n _m)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact n)))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact n)))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m)
                            (matita_arithmetics_primes.smallest_factor
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_factorial.fact n)))
                            (matita_arithmetics_nat.S
                               (matita_arithmetics_factorial.fact n)))) =>
                  matita_basics_logic.False)
                 (H :
                    cic.Term cic.prop
                      (cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_primes.divides _n _m)
                            (matita_arithmetics_primes.smallest_factor
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_factorial.fact n)))
                            (matita_arithmetics_nat.S
                               (matita_arithmetics_factorial.fact n)))
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                _m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_primes.divides _n _m)
                                 (matita_arithmetics_primes.smallest_factor
                                    (matita_arithmetics_nat.S
                                       (matita_arithmetics_factorial.fact n)))
                                 (matita_arithmetics_nat.S
                                    (matita_arithmetics_factorial.fact n))) =>
                          matita_basics_logic.False)) =>
                  H
                    (matita_arithmetics_primes.divides_smallest_factor_n
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact n))
                       (matita_arithmetics_nat.le_S_S
                          matita_arithmetics_nat.O
                          (matita_arithmetics_factorial.fact n)
                          (matita_arithmetics_nat.le_O_n
                             (matita_arithmetics_factorial.fact n)))))
                 _clearme))).

def ex_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
              (__ :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
               (A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) n m)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __1) m
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_factorial.fact n))))
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.prime __1) m))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lein :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      matita_arithmetics_nat.match_le cic.prop
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) __) =>
         (A : cic.Univ (cic.type cic.z) =>
          _P :
            cic.Term (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) A
                 (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
          matita_basics_logic.ex
            (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) __ m)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) m
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact __))))
                 ((__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __1) m))))
        (matita_basics_logic.ex_intro
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) m
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))))
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __) m)))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_basics_logic.conj
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_basics_logic.conj
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
                 (matita_arithmetics_primes.smallest_factor_fact
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.le_n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
              (matita_arithmetics_primes.primeb_true_to_prime
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.primeb
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         leim :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) m) =>
         matita_basics_logic.ex_intro
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (m0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_nat.S m) m0)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) m0
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S m)))))
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __) m0)))
           (matita_arithmetics_primes.smallest_factor
              (matita_arithmetics_nat.S
                 (matita_arithmetics_factorial.fact
                    (matita_arithmetics_nat.S m))))
           (matita_basics_logic.conj
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S m)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S m)))))
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S m))))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S m)))))
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __)
                 (matita_arithmetics_primes.smallest_factor
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S m)))))
              (matita_basics_logic.conj
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_nat.S m)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S m)))))
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_nat.S m))))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S m))))
                 (matita_arithmetics_primes.smallest_factor_fact
                    (matita_arithmetics_nat.S m))
                 (matita_arithmetics_primes.le_smallest_factor_n
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_factorial.fact
                          (matita_arithmetics_nat.S m)))))
              (matita_arithmetics_primes.prime_smallest_factor_n
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact
                       (matita_arithmetics_nat.S m)))
                 (matita_arithmetics_nat.le_S_S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_factorial.fact
                       (matita_arithmetics_nat.S m))
                    (matita_arithmetics_factorial.le_1_fact
                       (matita_arithmetics_nat.S m))))))
        n lein.

def nth_prime :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.nat)).

def nth_prime_body :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.nat)).

def let_previous_prime :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime p.

def let_upper_bound :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime __ p)).

[ __ ] nth_prime __ -->
  matita_arithmetics_nat.filter_nat (cic.type cic.z)
    (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    matita_arithmetics_primes.nth_prime_body __.

[ __ ] nth_prime_body __ -->
  matita_arithmetics_nat.match_nat (cic.type cic.z)
    (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.S
       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
    (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_minimization.min
       (matita_arithmetics_primes.let_upper_bound __ p)
       (matita_arithmetics_nat.S
          (matita_arithmetics_primes.let_previous_prime __ p))
       matita_arithmetics_primes.primeb)
    __.

def let_previous_prime1 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.nat))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime n.

def let_upper_bound1 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.nat))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime1 n)).

def nth_primeS :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_primes.nth_prime
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_primes.let_upper_bound1 n)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_primes.let_previous_prime1 n))
                 matita_arithmetics_primes.primeb)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_primes.nth_prime (matita_arithmetics_nat.S n)).

def example11 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.nth_prime
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))).

def example12 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.nth_prime
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))).

def example13 :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_primes.nth_prime
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))))))))))
      :=
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))))))))).

def let_previous_prime2 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime m.

def let_upper_bound2 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime2 n m)).

def let_previous_prime3 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime m.

def let_upper_bound3 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime3 n m x)).

def let_previous_prime4 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime m.

def let_upper_bound4 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime4 n m)).

def prime_nth_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_primes.prime __)
              (matita_arithmetics_primes.nth_prime n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_primes.prime __1)
           (matita_arithmetics_primes.nth_prime __))
        (matita_arithmetics_primes.primeb_true_to_prime
           (matita_arithmetics_primes.nth_prime matita_arithmetics_nat.O)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_arithmetics_primes.primeb
                 (matita_arithmetics_primes.nth_prime
                    matita_arithmetics_nat.O))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min
              (matita_arithmetics_primes.let_upper_bound2 n m)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_primes.let_previous_prime2 n m))
              matita_arithmetics_primes.primeb)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_minimization.min
                      (matita_arithmetics_primes.let_upper_bound3 n m x)
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_primes.let_previous_prime3 n m x))
                      matita_arithmetics_primes.primeb)) =>
            cic.lift cic.prop cic.prop
              ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __1) x))
           (matita_arithmetics_primes.primeb_true_to_prime
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_primes.let_upper_bound4 n m)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_primes.let_previous_prime4 n m))
                 matita_arithmetics_primes.primeb)
              (matita_arithmetics_minimization.f_min_true
                 matita_arithmetics_primes.primeb
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_factorial.fact
                       (matita_arithmetics_primes.nth_prime m)))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_primes.nth_prime m))
                 (matita_basics_logic.ex_intro
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_primes.nth_prime m))
                                i)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_factorial.fact
                                         (matita_arithmetics_primes.nth_prime
                                            m)))
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_primes.nth_prime m)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_arithmetics_primes.primeb i)
                             matita_basics_bool.true)))
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_factorial.fact
                             (matita_arithmetics_primes.nth_prime m))))
                    (matita_basics_logic.conj
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_primes.nth_prime m))
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))))
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_primes.nth_prime m)))))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_arithmetics_primes.primeb
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))))
                          matita_basics_bool.true)
                       (matita_basics_logic.conj
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_primes.nth_prime m))
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))))
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1)
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_primes.nth_prime m))))
                          (matita_arithmetics_primes.smallest_factor_fact
                             (matita_arithmetics_primes.nth_prime m))
                          (matita_arithmetics_nat.le_S_S
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_factorial.fact
                                   (matita_arithmetics_primes.nth_prime m))
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_primes.nth_prime m)))
                             (matita_arithmetics_nat.transitive_le
                                (matita_arithmetics_primes.smallest_factor
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_factorial.fact
                                         (matita_arithmetics_primes.nth_prime
                                            m))))
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m)))
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_factorial.fact
                                      (matita_arithmetics_primes.nth_prime m))
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_primes.nth_prime m)))
                                (matita_arithmetics_primes.le_smallest_factor_n
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_factorial.fact
                                         (matita_arithmetics_primes.nth_prime
                                            m))))
                                (matita_basics_logic.eq_ind
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_factorial.fact
                                            (matita_arithmetics_primes.nth_prime
                                               m))
                                         (matita_arithmetics_primes.nth_prime
                                            m)))
                                   (x_1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _x_2 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.S
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_factorial.fact
                                                    (matita_arithmetics_primes.nth_prime
                                                       m))
                                                 (matita_arithmetics_primes.nth_prime
                                                    m)))
                                           x_1) =>
                                    cic.lift cic.prop cic.prop
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __)
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_factorial.fact
                                               (matita_arithmetics_primes.nth_prime
                                                  m)))
                                         x_1))
                                   (matita_arithmetics_nat.le_plus_n_r
                                      (matita_arithmetics_primes.nth_prime m)
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_factorial.fact
                                            (matita_arithmetics_primes.nth_prime
                                               m))))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_factorial.fact
                                         (matita_arithmetics_primes.nth_prime
                                            m))
                                      (matita_arithmetics_nat.S
                                         (matita_arithmetics_primes.nth_prime
                                            m)))
                                   (matita_arithmetics_nat.plus_n_Sm
                                      (matita_arithmetics_factorial.fact
                                         (matita_arithmetics_primes.nth_prime
                                            m))
                                      (matita_arithmetics_primes.nth_prime m))))))
                       (matita_arithmetics_primes.prime_to_primeb_true
                          (matita_arithmetics_primes.smallest_factor
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_factorial.fact
                                   (matita_arithmetics_primes.nth_prime m))))
                          (matita_arithmetics_primes.prime_smallest_factor_n
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_factorial.fact
                                   (matita_arithmetics_primes.nth_prime m)))
                             (matita_arithmetics_nat.le_S_S
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_factorial.fact
                                   (matita_arithmetics_primes.nth_prime m))
                                (matita_arithmetics_factorial.le_1_fact
                                   (matita_arithmetics_primes.nth_prime m)))))))))
           (matita_arithmetics_primes.nth_prime (matita_arithmetics_nat.S m))
           (matita_arithmetics_primes.nth_primeS m))
        n.

def increasing_nth_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1)
              (matita_arithmetics_primes.nth_prime n)
              (matita_arithmetics_primes.nth_prime
                 (matita_arithmetics_nat.S n))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.le_min_l
        matita_arithmetics_primes.primeb
        (matita_arithmetics_nat.S
           (matita_arithmetics_factorial.fact
              (matita_arithmetics_primes.nth_prime n)))
        (matita_arithmetics_nat.S (matita_arithmetics_primes.nth_prime n)).

def lt_SO_nth_prime_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_primes.nth_prime n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.prime_to_lt_SO
        (matita_arithmetics_primes.nth_prime n)
        (matita_arithmetics_primes.prime_nth_prime n).

def lt_O_nth_prime_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
              (matita_arithmetics_primes.nth_prime n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.prime_to_lt_O
        (matita_arithmetics_primes.nth_prime n)
        (matita_arithmetics_primes.prime_nth_prime n).

def lt_n_nth_prime_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) n
              (matita_arithmetics_primes.nth_prime n)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) _x_365
              (matita_arithmetics_primes.nth_prime _x_365)))
        (matita_arithmetics_primes.lt_O_nth_prime_n matita_arithmetics_nat.O)
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltm :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m
                (matita_arithmetics_primes.nth_prime m)) =>
         matita_arithmetics_nat.le_to_lt_to_lt (matita_arithmetics_nat.S m)
           (matita_arithmetics_primes.nth_prime m)
           (matita_arithmetics_primes.nth_prime (matita_arithmetics_nat.S m))
           ltm (matita_arithmetics_primes.increasing_nth_prime m))
        n.

def let_previous_prime5 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      matita_arithmetics_primes.nth_prime n.

def let_upper_bound5 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime5 n m ltml)).

def let_previous_prime6 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_primes.nth_prime n.

def let_upper_bound6 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat)))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime6 n m ltml x)).

def let_previous_prime7 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      matita_arithmetics_primes.nth_prime n.

def let_upper_bound7 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop (cic.type cic.z)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (ltml :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  matita_arithmetics_nat.nat))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      matita_arithmetics_nat.S
        (matita_arithmetics_factorial.fact
           (matita_arithmetics_primes.let_previous_prime7 n m ltml)).

def lt_nth_prime_to_not_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1)
                    (matita_arithmetics_primes.nth_prime n) m)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) m) =>
                  cic.prod cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) m
                       (matita_arithmetics_primes.nth_prime
                          (matita_arithmetics_nat.S n)))
                    (__1 :
                       cic.Term cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) m
                            (matita_arithmetics_primes.nth_prime
                               (matita_arithmetics_nat.S n))) =>
                     (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_primes.prime __2) m))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltml :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_primes.nth_prime n) m) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.min
           (matita_arithmetics_primes.let_upper_bound5 n m ltml)
           (matita_arithmetics_nat.S
              (matita_arithmetics_primes.let_previous_prime5 n m ltml))
           matita_arithmetics_primes.primeb)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_minimization.min
                   (matita_arithmetics_primes.let_upper_bound6 n m ltml x)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_primes.let_previous_prime6 n m ltml
                         x))
                   matita_arithmetics_primes.primeb)) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2) m x)
              (__1 :
                 cic.Term cic.prop
                   ((__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __1 __2) m x) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_primes.prime __2) m))))
        (ltmr :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m
                (matita_arithmetics_minimization.min
                   (matita_arithmetics_primes.let_upper_bound7 n m ltml)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_primes.let_previous_prime7 n m ltml))
                   matita_arithmetics_primes.primeb)) =>
         matita_arithmetics_primes.primeb_false_to_not_prime m
           (matita_arithmetics_minimization.lt_min_to_false
              matita_arithmetics_primes.primeb
              (matita_arithmetics_nat.S
                 (matita_arithmetics_factorial.fact
                    (matita_arithmetics_primes.nth_prime n)))
              m
              (matita_arithmetics_nat.S
                 (matita_arithmetics_primes.nth_prime n))
              ltml ltmr))
        (matita_arithmetics_primes.nth_prime (matita_arithmetics_nat.S n))
        (matita_arithmetics_primes.nth_primeS n).

def prime_to_nth_prime :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_primes.prime __) p)
              (__ :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_primes.prime __) p) =>
               (A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_primes.nth_prime i) p)))))
      :=
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      primep :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.prime __) p) =>
      matita_basics_logic.match_ex cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat)
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (matita_basics_logic.And
              (matita_arithmetics_nat.le
                 (matita_arithmetics_primes.nth_prime i) p)
              (matita_arithmetics_nat.lt p
                 (matita_arithmetics_primes.nth_prime
                    (matita_arithmetics_nat.S i)))))
        (__ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __)
                         (matita_arithmetics_primes.nth_prime m) p)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) p
                         (matita_arithmetics_primes.nth_prime
                            (matita_arithmetics_nat.S m)))))) =>
         (A : cic.Univ (cic.type cic.z) =>
          _P :
            cic.Term (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) A
                 (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
          matita_basics_logic.ex
            (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_primes.nth_prime i) p)))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_primes.nth_prime n) p)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) p
                   (matita_arithmetics_primes.nth_prime
                      (matita_arithmetics_nat.S n)))) =>
         matita_basics_logic.match_And cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_primes.nth_prime n) p)
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) p
              (matita_arithmetics_primes.nth_prime
                 (matita_arithmetics_nat.S n)))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __)
                      (matita_arithmetics_primes.nth_prime n) p)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) p
                      (matita_arithmetics_primes.nth_prime
                         (matita_arithmetics_nat.S n)))) =>
            (A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_primes.nth_prime i) p)))
           (lepl :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_primes.nth_prime n) p) =>
            ltpr :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) p
                   (matita_arithmetics_primes.nth_prime
                      (matita_arithmetics_nat.S n))) =>
            matita_basics_logic.match_Or cic.prop
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_primes.nth_prime n) p)
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_primes.nth_prime n) p)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         (matita_arithmetics_primes.nth_prime n) p)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_primes.nth_prime n) p)) =>
               (A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_primes.nth_prime i) p)))
              (ltpl :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1)
                      (matita_arithmetics_primes.nth_prime n) p) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_primes.nth_prime i) p))))
                 (matita_basics_logic.absurd
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_primes.prime __) p)
                    primep
                    (matita_arithmetics_primes.lt_nth_prime_to_not_prime n p
                       ltpl ltpr)))
              (eqp :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_primes.nth_prime n) p) =>
               matita_basics_logic.ex_intro
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_primes.nth_prime i) p))
                 n
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    p
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x p))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       p)
                    (matita_arithmetics_primes.nth_prime n) eqp))
              (matita_arithmetics_nat.le_to_or_lt_eq
                 (matita_arithmetics_primes.nth_prime n) p lepl))
           _clearme)
        (matita_arithmetics_nat.increasing_to_le2
           matita_arithmetics_primes.nth_prime
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_primes.increasing_nth_prime n)
           p (matita_arithmetics_primes.prime_to_lt_SO p primep)).


