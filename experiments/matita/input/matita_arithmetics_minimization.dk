(; This file was automatically generated from Matita. ;)

def max' :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (__1 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__2 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat)))).

def max'_body :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (__1 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__2 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat)))).

[ __ ] max' __ -->
  matita_arithmetics_nat.filter_nat (cic.type cic.z)
    (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     cic.prod (cic.type cic.z) (cic.type cic.z)
       (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
          (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_basics_bool.bool))
       (__1 :
          cic.Term (cic.type cic.z)
            (cic.prod (cic.type cic.z) (cic.type cic.z)
               matita_arithmetics_nat.nat
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_basics_bool.bool)) =>
        cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
          (__2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.nat)))
    matita_arithmetics_minimization.max'_body __.

[ __ ] max'_body __ -->
  f :
    cic.Term (cic.type cic.z)
      (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_basics_bool.bool)) =>
  d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat (cic.type cic.z)
    (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    d
    (j : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_basics_bool.match_bool (cic.type cic.z)
       (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
        matita_arithmetics_nat.nat)
       j (matita_arithmetics_minimization.max' j f d) (f j))
    __.

def max :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_arithmetics_minimization.max' n f matita_arithmetics_nat.O.

def max_O :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max matita_arithmetics_nat.O f)
              matita_arithmetics_nat.O))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.max matita_arithmetics_nat.O f).

def max_cases :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f n) matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S n) f)
                       n))
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f n) matita_basics_bool.false)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S n) f)
                       (matita_arithmetics_minimization.max n f))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 __ matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    n
                    (matita_arithmetics_minimization.max' n f
                       matita_arithmetics_nat.O)
                    __)
                 n))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 __ matita_basics_bool.false)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    n
                    (matita_arithmetics_minimization.max' n f
                       matita_arithmetics_nat.O)
                    __)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O))))
        (matita_basics_logic.or_introl
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n n))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O)))
           (matita_basics_logic.conj
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n n)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 n)))
        (matita_basics_logic.or_intror
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O)
                 n))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.false)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O)))
           (matita_basics_logic.conj
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.false)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max' n f
                    matita_arithmetics_nat.O))))
        (f n).

def le_max_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_minimization.max n f) n)))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_minimization.max _x_365 f) _x_365))
        (matita_arithmetics_nat.le_n
           (matita_arithmetics_minimization.max matita_arithmetics_nat.O f))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_minimization.max m f) m) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m
                 (matita_arithmetics_minimization.max' m f
                    matita_arithmetics_nat.O)
                 __)
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.le_S m m (matita_arithmetics_nat.le_n m))
           (matita_arithmetics_nat.le_S
              (matita_arithmetics_minimization.max' m f
                 matita_arithmetics_nat.O)
              m Hind)
           (f m))
        n.

def lt_max_n :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    n)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O n) =>
                  (__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_minimization.max n f) n))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      matita_arithmetics_nat.lt_O_n_elim n posn
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2)
              (matita_arithmetics_minimization.max __ f) __))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_arithmetics_nat.S
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_minimization.max' m f
                       matita_arithmetics_nat.O)
                    __))
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.le_S_S m m (matita_arithmetics_nat.le_n m))
           (matita_arithmetics_nat.le_S_S
              (matita_arithmetics_minimization.max' m f
                 matita_arithmetics_nat.O)
              m (matita_arithmetics_minimization.le_max_n f m))
           (f m)).

def le_to_le_max :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n m)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) n m) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_minimization.max n f)
                       (matita_arithmetics_minimization.max m f))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) n m) =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) n x_417) =>
         cic.lift cic.prop cic.prop
           ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __)
              (matita_arithmetics_minimization.max n f)
              (matita_arithmetics_minimization.max x_417 f)))
        (matita_arithmetics_nat.le_n
           (matita_arithmetics_minimization.max n f))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         leni :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) n i) =>
         Hind :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __)
                (matita_arithmetics_minimization.max n f)
                (matita_arithmetics_minimization.max i f)) =>
         matita_arithmetics_nat.transitive_le
           (matita_arithmetics_minimization.max n f)
           (matita_arithmetics_minimization.max i f)
           (matita_arithmetics_minimization.max (matita_arithmetics_nat.S i)
              f)
           Hind
           (matita_basics_logic.match_Or cic.prop
              (matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f)
                    i))
              (matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.false)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f)
                    (matita_arithmetics_minimization.max i f)))
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max
                               (matita_arithmetics_nat.S i) f)
                            i))
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max
                               (matita_arithmetics_nat.S i) f)
                            (matita_arithmetics_minimization.max i f)))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_minimization.max i f)
                 (matita_arithmetics_minimization.max
                    (matita_arithmetics_nat.S i) f))
              (_clearme :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max
                            (matita_arithmetics_nat.S i) f)
                         i)) =>
               matita_basics_logic.match_And cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f)
                    i)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max
                               (matita_arithmetics_nat.S i) f)
                            i)) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_minimization.max i f)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f))
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true) =>
                  auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max
                            (matita_arithmetics_nat.S i) f)
                         i) =>
                  matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.max i f) i))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.max i f)
                          (matita_arithmetics_minimization.max
                             (matita_arithmetics_nat.S i) f)))
                    (matita_arithmetics_minimization.le_max_n f i)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       i
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __1)
                                   (matita_arithmetics_minimization.max i f)
                                   i))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __1)
                                   (matita_arithmetics_minimization.max i f)
                                   x))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __1)
                                (matita_arithmetics_minimization.max i f) i)))
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S i) f)
                       auto))
                 _clearme)
              (_clearme :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max
                            (matita_arithmetics_nat.S i) f)
                         (matita_arithmetics_minimization.max i f))) =>
               matita_basics_logic.match_And cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.false)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f)
                    (matita_arithmetics_minimization.max i f))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max
                               (matita_arithmetics_nat.S i) f)
                            (matita_arithmetics_minimization.max i f))) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_minimization.max i f)
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S i) f))
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false) =>
                  auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max
                            (matita_arithmetics_nat.S i) f)
                         (matita_arithmetics_minimization.max i f)) =>
                  matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.max i f)
                          (matita_arithmetics_minimization.max i f)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.max i f)
                          (matita_arithmetics_minimization.max
                             (matita_arithmetics_nat.S i) f)))
                    (matita_arithmetics_nat.le_n
                       (matita_arithmetics_minimization.max i f))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max i f)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __1)
                                   (matita_arithmetics_minimization.max i f)
                                   (matita_arithmetics_minimization.max i f)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __1)
                                   (matita_arithmetics_minimization.max i f)
                                   x))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __1)
                                (matita_arithmetics_minimization.max i f)
                                (matita_arithmetics_minimization.max i f))))
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S i) f)
                       auto))
                 _clearme)
              (matita_arithmetics_minimization.max_cases f i)))
        m H.

def true_to_le_max :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) m n) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.true) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2) m
                          (matita_arithmetics_minimization.max n f)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) m _x_365)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) m _x_365) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f m) matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f m) matita_basics_bool.true) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __2) m
                       (matita_arithmetics_minimization.max _x_365 f))))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltmO :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f m) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m) matita_basics_bool.true) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) m
                    (matita_arithmetics_minimization.max
                       matita_arithmetics_nat.O f))))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S m)
                 matita_arithmetics_nat.O)
              ltmO (matita_arithmetics_nat.not_le_Sn_O m)))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m i)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) m i) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (f m) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2) m
                         (matita_arithmetics_minimization.max i f))))) =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltm :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m
                (matita_arithmetics_nat.S i)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt m i)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m i)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m i)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m i)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f m) matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.true) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __2) m
                 (matita_arithmetics_minimization.max
                    (matita_arithmetics_nat.S i) f)))
           (ltm0 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) m i) =>
            fm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true) =>
            matita_arithmetics_nat.transitive_le m
              (matita_arithmetics_minimization.max i f)
              (matita_arithmetics_minimization.max
                 (matita_arithmetics_nat.S i) f)
              (Hind m ltm0
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (f m) fm))
              (matita_arithmetics_minimization.le_to_le_max f i
                 (matita_arithmetics_nat.S i)
                 (matita_arithmetics_nat.le_n_Sn i)))
           (eqm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m i) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              i
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x i) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f x) matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f x) matita_basics_bool.true) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __2) x
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S i) f))))
              (eqf :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) i
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_arithmetics_minimization.max' i f
                             matita_arithmetics_nat.O)
                          x)))
                 (matita_arithmetics_nat.le_n i) (f i) eqf)
              m eqm)
           (matita_arithmetics_nat.le_to_or_lt_eq m i
              (matita_arithmetics_nat.le_S_S_to_le m i ltm)))
        n.

def lt_max_to_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) m n) =>
                     cic.prod cic.prop cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2)
                          (matita_arithmetics_minimization.max n f) m)
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               (matita_arithmetics_minimization.max n f) m) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.false))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltnm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) m n) =>
      eqf :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1)
             (matita_arithmetics_minimization.max n f) m) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.false)
        (fm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f m) matita_basics_bool.false))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1)
                 (matita_arithmetics_minimization.max n f) m)
              eqf
              (matita_arithmetics_nat.le_to_not_lt m
                 (matita_arithmetics_minimization.max n f)
                 (matita_arithmetics_minimization.true_to_le_max f n m ltnm
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f m) fm)))))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.false) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.false))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false)
           (f m) auto)
        (matita_basics_bool.true_or_false (f m)).

def max_exists :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) m n) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((__2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __3 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __2 __3) m i)
                                (__2 :
                                   cic.Term cic.prop
                                     ((__2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __3 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __2 __3) m i) =>
                                 cic.prod cic.prop cic.prop
                                   ((__3 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __4 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __3 __4) i n)
                                   (__3 :
                                      cic.Term cic.prop
                                        ((__3 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __4 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __3 __4)
                                           i n) =>
                                    (A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __4 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __4)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (f i) matita_basics_bool.false))))
                          (__2 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __3 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __2 __3) m i)
                                     (__2 :
                                        cic.Term cic.prop
                                          ((__2 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __3 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __2 __3)
                                             m i) =>
                                      cic.prod cic.prop cic.prop
                                        ((__3 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __4 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __3 __4)
                                           i n)
                                        (__3 :
                                           cic.Term cic.prop
                                             ((__3 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __4 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __3
                                                 __4)
                                                i n) =>
                                         (A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __4 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __4)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (f i) matita_basics_bool.false)))) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __3 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __3)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_minimization.max n f) m)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) m _x_365)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) m _x_365) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f m) matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f m) matita_basics_bool.true) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((__2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __3 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __2 __3) m i)
                             (__2 :
                                cic.Term cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) m i) =>
                              cic.prod cic.prop cic.prop
                                ((__3 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __4 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __3 __4) i _x_365)
                                (__3 :
                                   cic.Term cic.prop
                                     ((__3 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __4 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __3 __4) i
                                        _x_365) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __4 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __4)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f i) matita_basics_bool.false))))
                       (__2 :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) m i)
                                  (__2 :
                                     cic.Term cic.prop
                                       ((__2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __3 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __2 __3) m
                                          i) =>
                                   cic.prod cic.prop cic.prop
                                     ((__3 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __4 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __3 __4) i
                                        _x_365)
                                     (__3 :
                                        cic.Term cic.prop
                                          ((__3 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __4 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __3 __4)
                                             i _x_365) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __4 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __4)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (f i) matita_basics_bool.false)))) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.max _x_365 f) m))))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltO :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f m) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m) matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) m i)
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) m i) =>
                           cic.prod cic.prop cic.prop
                             ((__2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __3 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __2 __3) i
                                matita_arithmetics_nat.O)
                             (__2 :
                                cic.Term cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) i
                                     matita_arithmetics_nat.O) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __3 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __3)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false))))
                    (__1 :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) m i)
                               (__1 :
                                  cic.Term cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) m i) =>
                                cic.prod cic.prop cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) i
                                     matita_arithmetics_nat.O)
                                  (__2 :
                                     cic.Term cic.prop
                                       ((__2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __3 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __2 __3) i
                                          matita_arithmetics_nat.O) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __3 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __3)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.false)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max
                          matita_arithmetics_nat.O f)
                       m))))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S m)
                 matita_arithmetics_nat.O)
              ltO (matita_arithmetics_nat.not_le_Sn_O m)))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m0 m)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) m0 m) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m0) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (f m0) matita_basics_bool.true) =>
                       cic.prod cic.prop cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __3 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __2 __3) m0 i)
                               (__2 :
                                  cic.Term cic.prop
                                    ((__2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __3 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __2 __3) m0 i) =>
                                cic.prod cic.prop cic.prop
                                  ((__3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __4 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __3 __4) i m)
                                  (__3 :
                                     cic.Term cic.prop
                                       ((__3 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __4 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __3 __4) i
                                          m) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __4 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __4)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.false))))
                         (__2 :
                            cic.Term cic.prop
                              (cic.prod (cic.type cic.z) cic.prop
                                 matita_arithmetics_nat.nat
                                 (i :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  cic.prod cic.prop cic.prop
                                    ((__2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __3 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __2 __3) m0 i)
                                    (__2 :
                                       cic.Term cic.prop
                                         ((__2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __3 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __2 __3)
                                            m0 i) =>
                                     cic.prod cic.prop cic.prop
                                       ((__3 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __4 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __3 __4) i
                                          m)
                                       (__3 :
                                          cic.Term cic.prop
                                            ((__3 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __4 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __3
                                                __4)
                                               i m) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __4 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __4)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (f i) matita_basics_bool.false)))) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __3 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __3)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max m f) m0))))) =>
         max : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltmax :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) max
                (matita_arithmetics_nat.S m)) =>
         fmax :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f max) matita_basics_bool.true) =>
         ismax :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) max i)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) max i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.S m))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.S m)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt max m)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              max m)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) max m)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      max m)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max
                 (matita_arithmetics_nat.S m) f)
              max)
           (ltm :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) max m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m f
                          matita_arithmetics_nat.O)
                       x)
                    max))
              (Hind max ltm fmax
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  Hl :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) max i) =>
                  Hr :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m) =>
                  ismax i Hl
                    (matita_arithmetics_nat.le_S (matita_arithmetics_nat.S i)
                       m Hr)))
              (f m)
              (ismax m ltm
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.plus m
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.S m)))
                    (matita_arithmetics_nat.lt_plus_Sn_r m
                       matita_arithmetics_nat.O matita_arithmetics_nat.O)
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus x
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.S m)))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S m)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.S m)))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.S m))))
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus m
                                matita_arithmetics_nat.O)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S x)
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (matita_arithmetics_nat.plus_n_Sm m
                                matita_arithmetics_nat.O)
                             m (matita_arithmetics_nat.plus_n_O m)))
                       (matita_arithmetics_nat.plus m
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.plus_n_O m)))))
           (ltm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   max m) =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              max
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      max x_1) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       x_1
                       (matita_arithmetics_minimization.max' x_1 f
                          matita_arithmetics_nat.O)
                       (f x_1))
                    max))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          max
                          (matita_arithmetics_minimization.max' max f
                             matita_arithmetics_nat.O)
                          x)
                       max))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       max
                       (matita_arithmetics_minimization.max' max f
                          matita_arithmetics_nat.O)
                       matita_basics_bool.true))
                 (f max) fmax)
              m ltm)
           (matita_arithmetics_nat.le_to_or_lt_eq max m
              (matita_arithmetics_nat.le_S_S_to_le max m ltmax)))
        n.

def max_not_exists :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i n)
                       (__ :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.false)))
                 (__ :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n)
                            (__ :
                               cic.Term cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) i n) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.false))) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max n f)
                    matita_arithmetics_nat.O))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ffalse :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i n)
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i n) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f i) matita_basics_bool.false))) =>
      matita_arithmetics_nat.le_gen
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max __ f)
              matita_arithmetics_nat.O))
        n
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.nat_ind
           (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) _x_365 n)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) _x_365 n) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.max _x_365 f)
                    matita_arithmetics_nat.O)))
           (auto :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O n) =>
            matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x matita_arithmetics_nat.O))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_minimization.max matita_arithmetics_nat.O f)
              (matita_arithmetics_minimization.max_O f))
           (j : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            Hind :
              cic.Term cic.prop
                (cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) j n)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) j n) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.max j f)
                      matita_arithmetics_nat.O)) =>
            ltj :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S j) n) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_arithmetics_minimization.max' j f
                          matita_arithmetics_nat.O)
                       x)
                    matita_arithmetics_nat.O))
              (Hind (matita_arithmetics_nat.lt_to_le j n ltj)) (f j)
              (ffalse j ltj))
           i).

def let_clause_1013 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_minimization.max i f) m)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_minimization.max i f) m) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f m) matita_basics_bool.false)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f m) matita_basics_bool.false) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m matita_arithmetics_nat.O)))
                       (Hind :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_minimization.max i f) m)
                               (__ :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_minimization.max i
                                          f)
                                       m) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f m) matita_basics_bool.false)
                                  (__1 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __1 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __1)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (f m) matita_basics_bool.false) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     m matita_arithmetics_nat.O))) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.true)
                          (fi :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.true) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                i m)
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     i m) =>
                              cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f m) matita_basics_bool.false)
                                (fm :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (f m) matita_basics_bool.false) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.false
                                   matita_basics_bool.true)))))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hind :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max i f) m)
             (__ :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z)))
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_minimization.max i f) m) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false)
                (__1 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __1)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (f m) matita_basics_bool.false) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __2)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   m matita_arithmetics_nat.O))) =>
      fi :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f i) matita_basics_bool.true) =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             i m) =>
      fm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f m) matita_basics_bool.false) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        (f m)
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              x matita_basics_bool.true))
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           i
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f x) matita_basics_bool.true))
           fi m eqm)
        matita_basics_bool.false fm.

def fmax_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max n f) m)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max n f) m) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.false)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.false) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m matita_arithmetics_nat.O))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max _x_365 f) m)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.max _x_365 f) m) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f m) matita_basics_bool.false)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m) matita_basics_bool.false) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m matita_arithmetics_nat.O))))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max matita_arithmetics_nat.O
                   f)
                m) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.false) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           m
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m x))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              m)
           matita_arithmetics_nat.O
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max matita_arithmetics_nat.O f)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x m))
              auto matita_arithmetics_nat.O
              (matita_arithmetics_minimization.max_O f)))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.max i f) m)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_minimization.max i f) m) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.false)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (f m) matita_basics_bool.false) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __2)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m matita_arithmetics_nat.O))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f i) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f i) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_arithmetics_minimization.max' i f
                       matita_arithmetics_nat.O)
                    (f i))
                 m)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_arithmetics_nat.nat)
                         i
                         (matita_arithmetics_minimization.max' i f
                            matita_arithmetics_nat.O)
                         (f i))
                      m) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f m) matita_basics_bool.false)
                 (__2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f m) matita_basics_bool.false) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __3)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m matita_arithmetics_nat.O)))
           (fi :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f i) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_arithmetics_minimization.max' i f
                             matita_arithmetics_nat.O)
                          x)
                       m)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_arithmetics_nat.nat)
                               i
                               (matita_arithmetics_minimization.max' i f
                                  matita_arithmetics_nat.O)
                               x)
                            m) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.false)
                       (__2 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.false) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m matita_arithmetics_nat.O))))
              (eqm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      i m) =>
               fm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.false) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m matita_arithmetics_nat.O))
                 (matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true)
                    fi
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                matita_basics_bool.false)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true)))
                       matita_basics_bool.not_eq_true_false
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_A : cic.Univ cic.prop =>
                                     matita_basics_logic.Not _A)
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         matita_basics_bool.true x)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_A : cic.Univ cic.prop =>
                                     matita_basics_logic.Not _A)
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (f i) matita_basics_bool.true)))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_A : cic.Univ cic.prop =>
                                        matita_basics_logic.Not _A)
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            matita_basics_bool.true
                                            matita_basics_bool.true)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_A : cic.Univ cic.prop =>
                                        matita_basics_logic.Not _A)
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (f x) matita_basics_bool.true)))))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((_A : cic.Univ cic.prop =>
                                           matita_basics_logic.Not _A)
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               matita_basics_bool.true
                                               matita_basics_bool.true)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((_A : cic.Univ cic.prop =>
                                           matita_basics_logic.Not _A)
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               x matita_basics_bool.true)))))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_A : cic.Univ cic.prop =>
                                        matita_basics_logic.Not _A)
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            matita_basics_bool.true
                                            matita_basics_bool.true))))
                                (f m)
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.false
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (f m) x))
                                   fm matita_basics_bool.true
                                   (matita_arithmetics_minimization.let_clause_1013
                                      f n m i Hind fi eqm fm)))
                             i eqm)
                          matita_basics_bool.false
                          (matita_arithmetics_minimization.let_clause_1013 f
                             n m i Hind fi eqm fm)))))
              (f i) fi)
           (fi :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f i) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_arithmetics_minimization.max' i f
                             matita_arithmetics_nat.O)
                          x)
                       m)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_arithmetics_nat.nat)
                               i
                               (matita_arithmetics_minimization.max' i f
                                  matita_arithmetics_nat.O)
                               x)
                            m) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.false)
                       (__2 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.false) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m matita_arithmetics_nat.O))))
              Hind (f i) fi)
           (matita_basics_bool.true_or_false (f i)))
        n.

max_spec :
  cic.Term (cic.type cic.z)
    (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
       (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool))
          (_f :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.univ cic.prop)))).

found_max_spec :
  cic.Term cic.prop
    (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
       (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) cic.prop
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool))
          (f :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt m n)
                (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) =>
                 cic.prod cic.prop cic.prop
                   (matita_basics_logic.eq
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        (matita_basics_logic.eq
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (f m) matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            (matita_arithmetics_nat.lt m i)
                            (__2 :
                               cic.Term cic.prop
                                 (matita_arithmetics_nat.lt m i) =>
                             cic.prod cic.prop cic.prop
                               (matita_arithmetics_nat.lt i n)
                               (__3 :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt i n) =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.false))))
                      (__2 :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              matita_arithmetics_nat.nat
                              (i :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               cic.prod cic.prop cic.prop
                                 (matita_arithmetics_nat.lt m i)
                                 (__2 :
                                    cic.Term cic.prop
                                      (matita_arithmetics_nat.lt m i) =>
                                  cic.prod cic.prop cic.prop
                                    (matita_arithmetics_nat.lt i n)
                                    (__3 :
                                       cic.Term cic.prop
                                         (matita_arithmetics_nat.lt i n) =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (f i) matita_basics_bool.false)))) =>
                       matita_arithmetics_minimization.max_spec n f m))))))).

not_found_max_spec :
  cic.Term cic.prop
    (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
       (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) cic.prop
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool))
          (f :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           cic.prod cic.prop cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n)
                   (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false)))
             (__ :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop
                     matita_arithmetics_nat.nat
                     (i :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      cic.prod cic.prop cic.prop
                        (matita_arithmetics_nat.lt i n)
                        (__ :
                           cic.Term cic.prop (matita_arithmetics_nat.lt i n) =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (f i) matita_basics_bool.false))) =>
              matita_arithmetics_minimization.max_spec n f
                matita_arithmetics_nat.O)))).

def match_max_spec_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop (cic.type cic.z)
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ cic.prop)))
                 (return_type :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop (cic.type cic.z)
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ cic.prop))) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop cic.prop
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop cic.prop
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Prop _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Prop _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type cic.z)
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (return_type :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod (cic.type cic.z)
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod (cic.type cic.z)
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z))))))
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z)
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type5 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type5 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                 (return_type :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type cic.z)
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type4 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type4 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type3 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type3 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type2 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type2 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z))
                 (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s cic.z)))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type (cic.s cic.z))))) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.prod cic.prop (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type1 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type1 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def match_max_spec_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type cic.z))))
                 (return_type :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type cic.z)))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type cic.z)
                          (matita_arithmetics_nat.lt m _n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt m _n) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_basics_logic.eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop (cic.type cic.z)
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt m i)
                                      (__2 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt m i) =>
                                       cic.prod cic.prop cic.prop
                                         (matita_arithmetics_nat.lt i _n)
                                         (__3 :
                                            cic.Term cic.prop
                                              (matita_arithmetics_nat.lt i _n) =>
                                          matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (__2 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 return_type m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m __ __1 __2))))))
                    (case_found_max_spec :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type cic.z)
                               (matita_arithmetics_nat.lt m _n)
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.lt m _n) =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (matita_basics_logic.eq
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop (cic.type cic.z)
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt m i)
                                           (__2 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i) =>
                                            cic.prod cic.prop cic.prop
                                              (matita_arithmetics_nat.lt i _n)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n) =>
                                               matita_basics_logic.eq
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (__2 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt m
                                                   i)
                                                (__2 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   (matita_arithmetics_nat.lt
                                                      i _n)
                                                   (__3 :
                                                      cic.Term cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           i _n) =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      return_type m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m __ __1 __2)))))) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.prod cic.prop (cic.type cic.z)
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt i _n)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt i _n) =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           return_type matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f __)))
                       (case_not_found_max_spec :
                          cic.Term (cic.type cic.z)
                            (cic.prod cic.prop (cic.type cic.z)
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i _n) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (__ :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i
                                                  _n) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                return_type matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f __))) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_arithmetics_minimization.max_spec _n _f
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.max_spec
                                     _n _f __) =>
                              return_type __ z)))))))).

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, m, __,
  __1, __2 ]
  match_max_spec_Type0 _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ _n, _f, return_type, case_found_max_spec, case_not_found_max_spec, __ ]
  match_max_spec_Type0 _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def filter_max_spec_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod cic.prop (cic.type cic.z)
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ cic.prop))
                    (return_type :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z)
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ cic.prop)) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Prop (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Prop (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z)
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod cic.prop
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.prod cic.prop
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type5 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type5 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod cic.prop
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type4 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type4 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                    (return_type :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ
                               (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type3 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type3 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type2 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type2 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type (cic.s cic.z))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type (cic.s cic.z)))) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type1 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type1 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def filter_max_spec_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    (cic.prod cic.prop (cic.type (cic.s cic.z))
                       (matita_arithmetics_minimization.max_spec _n _f __)
                       (z :
                          cic.Term cic.prop
                            (matita_arithmetics_minimization.max_spec _n _f
                               __) =>
                        cic.univ (cic.type cic.z)))
                    (return_type :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod cic.prop (cic.type (cic.s cic.z))
                            (matita_arithmetics_minimization.max_spec _n _f
                               __)
                            (z :
                               cic.Term cic.prop
                                 (matita_arithmetics_minimization.max_spec _n
                                    _f __) =>
                             cic.univ (cic.type cic.z))) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.prod cic.prop (cic.type cic.z)
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))
                       (return :
                          cic.Term (cic.type cic.z)
                            (cic.prod cic.prop (cic.type cic.z)
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.max_spec
                                       _n _f __) =>
                                return_type z)) =>
                        cic.prod cic.prop (cic.type cic.z)
                          (matita_arithmetics_minimization.max_spec _n _f __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.max_spec _n
                                  _f __) =>
                           return_type z))))))).

[ n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec_Type0 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ n, f, __, return_type, return ]
  filter_max_spec_Type0 (n) (f) (matita_arithmetics_nat.O) return_type return
    (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def match_max_spec :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) ->
      return_type :
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
         z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.max_spec _n _f __) ->
         cic.Univ return_sort) ->
      case_found_max_spec :
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n) ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (_f m) matita_basics_bool.true) ->
         __2 :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt m i)
                   (__2 :
                      cic.Term cic.prop (matita_arithmetics_nat.lt m i) =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.lt i _n)
                      (__3 :
                         cic.Term cic.prop (matita_arithmetics_nat.lt i _n) =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (_f i) matita_basics_bool.false)))) ->
         cic.Term return_sort
           (return_type m
              (matita_arithmetics_minimization.found_max_spec _n _f m __ __1
                 __2))) ->
      case_not_found_max_spec :
        (__ :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i _n)
                   (__ :
                      cic.Term cic.prop (matita_arithmetics_nat.lt i _n) =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (_f i) matita_basics_bool.false))) ->
         cic.Term return_sort
           (return_type matita_arithmetics_nat.O
              (matita_arithmetics_minimization.not_found_max_spec _n _f __))) ->
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      z :
        cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __) ->
      cic.Term return_sort (return_type __ z).

[  ] match_max_spec cic.prop -->
  matita_arithmetics_minimization.match_max_spec_Prop.

[  ]
  match_max_spec (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_minimization.match_max_spec_Type5.

[  ] match_max_spec (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_minimization.match_max_spec_Type4.

[  ] match_max_spec (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_minimization.match_max_spec_Type3.

[  ] match_max_spec (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_minimization.match_max_spec_Type2.

[  ] match_max_spec (cic.type (cic.s cic.z)) -->
  matita_arithmetics_minimization.match_max_spec_Type1.

[  ] match_max_spec (cic.type cic.z) -->
  matita_arithmetics_minimization.match_max_spec_Type0.

[ return_sort, _n, _f, return_type, case_found_max_spec,
  case_not_found_max_spec, m, __, __1, __2 ]
  match_max_spec return_sort _n _f return_type case_found_max_spec
    case_not_found_max_spec (m)
    (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2) -->
  case_found_max_spec m __ __1 __2.

[ return_sort, _n, _f, return_type, case_found_max_spec,
  case_not_found_max_spec, __ ]
  match_max_spec return_sort _n _f return_type case_found_max_spec
    case_not_found_max_spec (matita_arithmetics_nat.O)
    (matita_arithmetics_minimization.not_found_max_spec _n _f __) -->
  case_not_found_max_spec __.

def filter_max_spec :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) ->
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      return_type :
        (z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.max_spec _n _f __) ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.max_spec _n _f __) ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __) ->
      cic.Term return_sort (return_type z).

[  ] filter_max_spec cic.prop -->
  matita_arithmetics_minimization.filter_max_spec_Prop.

[  ]
  filter_max_spec (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_minimization.filter_max_spec_Type5.

[  ] filter_max_spec (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_minimization.filter_max_spec_Type4.

[  ] filter_max_spec (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_minimization.filter_max_spec_Type3.

[  ] filter_max_spec (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_minimization.filter_max_spec_Type2.

[  ] filter_max_spec (cic.type (cic.s cic.z)) -->
  matita_arithmetics_minimization.filter_max_spec_Type1.

[  ] filter_max_spec (cic.type cic.z) -->
  matita_arithmetics_minimization.filter_max_spec_Type0.

[ return_sort1, n, f, m, __, __1, __2, return_type, return ]
  filter_max_spec return_sort1 (n) (f) (m) return_type return
    (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2) -->
  return (matita_arithmetics_minimization.found_max_spec n f m __ __1 __2).

[ return_sort1, n, f, __, return_type, return ]
  filter_max_spec return_sort1 (n) (f) (matita_arithmetics_nat.O) return_type
    return (matita_arithmetics_minimization.not_found_max_spec n f __) -->
  return (matita_arithmetics_minimization.not_found_max_spec n f __).

def max_spec_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (x_971 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((_n1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _f1 :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                matita_arithmetics_nat.nat
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.bool)) =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_minimization.max_spec _n1 _f1 __)
                          _n _f x_971)
                       (_x_972 :
                          cic.Term cic.prop
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.max_spec _n1
                                _f1 __)
                               _n _f x_971) =>
                        cic.univ cic.prop)))
                 (Q_ :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (x_971 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.max_spec _n1
                                _f1 __)
                               _n _f x_971)
                            (_x_972 :
                               cic.Term cic.prop
                                 ((_n1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   _f1 :
                                     cic.Term (cic.type cic.z)
                                       (cic.prod (cic.type cic.z)
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat
                                          (__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_bool.bool)) =>
                                   __ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_minimization.max_spec
                                     _n1 _f1 __)
                                    _n _f x_971) =>
                             cic.univ cic.prop))) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m _n)
                          (x_975 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) m _n) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (x_974 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop cic.prop
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m i)
                                      (__ :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i) =>
                                       cic.prod cic.prop cic.prop
                                         ((__1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __1 __2)
                                            i _n)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (x_973 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i) =>
                                            cic.prod cic.prop cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 (x_971 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _x_972 :
                                    cic.Term cic.prop
                                      (matita_arithmetics_minimization.max_spec
                                         _n _f x_971) =>
                                  Q_ x_971 _x_972) m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m x_975 x_974 x_973))))))
                    (_H_found_max_spec :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) m _n)
                               (x_975 :
                                  cic.Term cic.prop
                                    ((__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __ __1) m _n) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (x_974 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i) =>
                                            cic.prod cic.prop cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (x_973 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i)
                                                (__ :
                                                   cic.Term cic.prop
                                                     ((__ :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __ __1)
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n)
                                                   (__1 :
                                                      cic.Term cic.prop
                                                        ((__1 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          __2 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          matita_arithmetics_nat.lt
                                                            __1 __2)
                                                           i _n) =>
                                                    (A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A)
                                                       _x __2)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      (x_971 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _x_972 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_minimization.max_spec
                                              _n _f x_971) =>
                                       Q_ x_971 _x_972) m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m x_975 x_974 x_973)))))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i _n)
                                (__ :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (x_976 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           (x_971 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _x_972 :
                              cic.Term cic.prop
                                (matita_arithmetics_minimization.max_spec _n
                                   _f x_971) =>
                            Q_ x_971 _x_972) matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f x_976)))
                       (_H_not_found_max_spec :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (x_976 :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  i _n) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __1 :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __1)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                (x_971 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _x_972 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.max_spec
                                        _n _f x_971) =>
                                 Q_ x_971 _x_972) matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f x_976))) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (x_971 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _f1 :
                                 cic.Term (cic.type cic.z)
                                   (cic.prod (cic.type cic.z)
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat
                                      (__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_basics_bool.bool)) =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_minimization.max_spec _n1
                                 _f1 __)
                                _n _f x_971)
                             (x_972 :
                                cic.Term cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _f1 :
                                      cic.Term (cic.type cic.z)
                                        (cic.prod (cic.type cic.z)
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat
                                           (__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_basics_bool.bool)) =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_minimization.max_spec
                                      _n1 _f1 __)
                                     _n _f x_971) =>
                              (x_9711 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _x_972 :
                                 cic.Term cic.prop
                                   (matita_arithmetics_minimization.max_spec
                                      _n _f x_9711) =>
                               Q_ x_9711 _x_972) x_971 x_972)))))))).

def max_spec_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (x_971 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop (cic.type cic.z)
                       ((_n1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _f1 :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                matita_arithmetics_nat.nat
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.bool)) =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_minimization.max_spec _n1 _f1 __)
                          _n _f x_971)
                       (_x_972 :
                          cic.Term cic.prop
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.max_spec _n1
                                _f1 __)
                               _n _f x_971) =>
                        cic.univ cic.prop)))
                 (Q_ :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (x_971 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop (cic.type cic.z)
                            ((_n1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.max_spec _n1
                                _f1 __)
                               _n _f x_971)
                            (_x_972 :
                               cic.Term cic.prop
                                 ((_n1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   _f1 :
                                     cic.Term (cic.type cic.z)
                                       (cic.prod (cic.type cic.z)
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat
                                          (__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_bool.bool)) =>
                                   __ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_minimization.max_spec
                                     _n1 _f1 __)
                                    _n _f x_971) =>
                             cic.univ cic.prop))) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (m :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m _n)
                          (x_975 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) m _n) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (_f m) matita_basics_bool.true)
                             (x_974 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true) =>
                              cic.prod cic.prop cic.prop
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m i)
                                      (__ :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i) =>
                                       cic.prod cic.prop cic.prop
                                         ((__1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __1 __2)
                                            i _n)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (_f i) matita_basics_bool.false))))
                                (x_973 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i) =>
                                            cic.prod cic.prop cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false)))) =>
                                 (x_971 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _x_972 :
                                    cic.Term cic.prop
                                      (matita_arithmetics_minimization.max_spec
                                         _n _f x_971) =>
                                  Q_ x_971 _x_972) m
                                   (matita_arithmetics_minimization.found_max_spec
                                      _n _f m x_975 x_974 x_973))))))
                    (_H_found_max_spec :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (m :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) m _n)
                               (x_975 :
                                  cic.Term cic.prop
                                    ((__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __ __1) m _n) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (_f m) matita_basics_bool.true)
                                  (x_974 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (_f m) matita_basics_bool.true) =>
                                   cic.prod cic.prop cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m i)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i) =>
                                            cic.prod cic.prop cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i _n)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (_f i)
                                                 matita_basics_bool.false))))
                                     (x_973 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m i)
                                                (__ :
                                                   cic.Term cic.prop
                                                     ((__ :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __ __1)
                                                        m i) =>
                                                 cic.prod cic.prop cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i _n)
                                                   (__1 :
                                                      cic.Term cic.prop
                                                        ((__1 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          __2 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          matita_arithmetics_nat.lt
                                                            __1 __2)
                                                           i _n) =>
                                                    (A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A)
                                                       _x __2)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (_f i)
                                                      matita_basics_bool.false)))) =>
                                      (x_971 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _x_972 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_minimization.max_spec
                                              _n _f x_971) =>
                                       Q_ x_971 _x_972) m
                                        (matita_arithmetics_minimization.found_max_spec
                                           _n _f m x_975 x_974 x_973)))))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i _n)
                                (__ :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (_f i) matita_basics_bool.false)))
                          (x_976 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false))) =>
                           (x_971 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _x_972 :
                              cic.Term cic.prop
                                (matita_arithmetics_minimization.max_spec _n
                                   _f x_971) =>
                            Q_ x_971 _x_972) matita_arithmetics_nat.O
                             (matita_arithmetics_minimization.not_found_max_spec
                                _n _f x_976)))
                       (_H_not_found_max_spec :
                          cic.Term cic.prop
                            (cic.prod cic.prop cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i _n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (_f i) matita_basics_bool.false)))
                               (x_976 :
                                  cic.Term cic.prop
                                    (cic.prod (cic.type cic.z) cic.prop
                                       matita_arithmetics_nat.nat
                                       (i :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.prod cic.prop cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i _n)
                                          (__ :
                                             cic.Term cic.prop
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  i _n) =>
                                           (A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __1 :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __1)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (_f i) matita_basics_bool.false))) =>
                                (x_971 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _x_972 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.max_spec
                                        _n _f x_971) =>
                                 Q_ x_971 _x_972) matita_arithmetics_nat.O
                                  (matita_arithmetics_minimization.not_found_max_spec
                                     _n _f x_976))) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (x_971 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _f1 :
                                 cic.Term (cic.type cic.z)
                                   (cic.prod (cic.type cic.z)
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat
                                      (__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_basics_bool.bool)) =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_minimization.max_spec _n1
                                 _f1 __)
                                _n _f x_971)
                             (x_972 :
                                cic.Term cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _f1 :
                                      cic.Term (cic.type cic.z)
                                        (cic.prod (cic.type cic.z)
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat
                                           (__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_basics_bool.bool)) =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_minimization.max_spec
                                      _n1 _f1 __)
                                     _n _f x_971) =>
                              (x_9711 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _x_972 :
                                 cic.Term cic.prop
                                   (matita_arithmetics_minimization.max_spec
                                      _n _f x_9711) =>
                               Q_ x_9711 _x_972) x_971 x_972)))))))).

[ _n, _f, Q_, _H_found_max_spec, _H_not_found_max_spec, x_971, x_972 ]
  max_spec_ind _n _f Q_ _H_found_max_spec _H_not_found_max_spec x_971 x_972 -->
  matita_arithmetics_minimization.filter_max_spec cic.prop _n _f x_971
    (x_972 :
       cic.Term cic.prop
         ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           _f1 :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_minimization.max_spec _n1 _f1 __) _n _f x_971) =>
     (x_9711 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _x_972 :
        cic.Term cic.prop
          (matita_arithmetics_minimization.max_spec _n _f x_9711) =>
      Q_ x_9711 _x_972) x_971 x_972)
    (matita_arithmetics_minimization.max_spec_ind_body _n _f Q_
       _H_found_max_spec _H_not_found_max_spec x_971)
    x_972.

[ _n, _f, Q_, _H_found_max_spec, _H_not_found_max_spec, x_971, x_972 ]
  max_spec_ind_body _n _f Q_ _H_found_max_spec _H_not_found_max_spec x_971
    x_972 -->
  matita_arithmetics_minimization.match_max_spec cic.prop _n _f
    (x_9711 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     _x_972 :
       cic.Term cic.prop
         (matita_arithmetics_minimization.max_spec _n _f x_9711) =>
     Q_ x_9711 _x_972)
    (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     x_975 :
       cic.Term cic.prop
         ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.lt __ __1) m _n) =>
     x_974 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (_f m) matita_basics_bool.true) =>
     x_973 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
            (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             cic.prod cic.prop cic.prop
               ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 __1 :
                   cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.lt __ __1) m i)
               (__ :
                  cic.Term cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m i) =>
                cic.prod cic.prop cic.prop
                  ((__1 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    __2 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.lt __1 __2) i _n)
                  (__1 :
                     cic.Term cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i _n) =>
                   (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __2)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_bool.bool)
                     (_f i) matita_basics_bool.false)))) =>
     _H_found_max_spec m x_975 x_974 x_973)
    (x_976 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
            (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             cic.prod cic.prop cic.prop
               ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 __1 :
                   cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.lt __ __1) i _n)
               (__ :
                  cic.Term cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _n) =>
                (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                 _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                 matita_basics_logic.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) A)
                   _x __1)
                  (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                     matita_basics_bool.bool)
                  (_f i) matita_basics_bool.false))) =>
     _H_not_found_max_spec x_976)
    x_971 x_972.

def max_spec_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (x2 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (x3 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _f :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.bool)) =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_minimization.max_spec _n _f __) x1
                       x2 x3)
                    (_Hterm :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _f :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z)
                                  matita_arithmetics_nat.nat
                                  (__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_basics_bool.bool)) =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_minimization.max_spec _n _f __)
                            x1 x2 x3) =>
                     cic.prod (cic.type cic.z) cic.prop
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat
                          (_z1769 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.univ cic.prop))
                       (P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               matita_arithmetics_nat.nat
                               (_z1769 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.univ cic.prop)) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (m :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m x1)
                                (_x_975 :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m x1) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (x2 m) matita_basics_bool.true)
                                   (_x_974 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (x2 m) matita_basics_bool.true) =>
                                    cic.prod cic.prop cic.prop
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               m i)
                                            (__ :
                                               cic.Term cic.prop
                                                 ((__ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __ __1)
                                                    m i) =>
                                             cic.prod cic.prop cic.prop
                                               ((__1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __2 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt
                                                   __1 __2)
                                                  i x1)
                                               (__1 :
                                                  cic.Term cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i x1) =>
                                                (A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __2 :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __2)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (x2 i)
                                                  matita_basics_bool.false))))
                                      (_x_973 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((__ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __ __1)
                                                    m i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((__ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __ __1)
                                                         m i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i x1)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i x1) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (x2 i)
                                                       matita_basics_bool.false)))) =>
                                       cic.prod cic.prop cic.prop
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            x3 m)
                                         (_z1770 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_arithmetics_nat.nat)
                                                 x3 m) =>
                                          (_z1769 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           P _z1769) m))))))
                          (_H1 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  matita_arithmetics_nat.nat
                                  (m :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m x1)
                                     (_x_975 :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             m x1) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (x2 m) matita_basics_bool.true)
                                        (_x_974 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (x2 m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((__ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __ __1)
                                                    m i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((__ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __ __1)
                                                         m i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i x1)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i x1) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (x2 i)
                                                       matita_basics_bool.false))))
                                           (_x_973 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      ((__ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __ __1)
                                                         m i)
                                                      (__ :
                                                         cic.Term cic.prop
                                                           ((__ :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             __1 :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_arithmetics_nat.lt
                                                               __ __1)
                                                              m i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i x1)
                                                         (__1 :
                                                            cic.Term cic.prop
                                                              ((__1 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                __2 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_arithmetics_nat.lt
                                                                  __1 __2)
                                                                 i x1) =>
                                                          (A :
                                                             cic.Univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                           _x :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           matita_basics_logic.eq
                                                             (cic.lift
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A)
                                                             _x __2)
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (x2 i)
                                                            matita_basics_bool.false)))) =>
                                            cic.prod cic.prop cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_arithmetics_nat.nat)
                                                 x3 m)
                                              (_z1770 :
                                                 cic.Term cic.prop
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __ :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A)
                                                       _x __)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_arithmetics_nat.nat)
                                                      x3 m) =>
                                               (_z1769 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                P _z1769) m)))))) =>
                           cic.prod cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                (cic.prod (cic.type cic.z) cic.prop
                                   matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         x1)
                                      (__ :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i x1) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (x2 i) matita_basics_bool.false)))
                                (_x_976 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i x1)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i x1) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (x2 i) matita_basics_bool.false))) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x3 matita_arithmetics_nat.O)
                                   (_z1770 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           x3 matita_arithmetics_nat.O) =>
                                    (_z1769 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     P _z1769) matita_arithmetics_nat.O)))
                             (_H2 :
                                cic.Term cic.prop
                                  (cic.prod cic.prop cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i x1)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i x1) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (x2 i) matita_basics_bool.false)))
                                     (_x_976 :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i x1)
                                                (__ :
                                                   cic.Term cic.prop
                                                     ((__ :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __ __1)
                                                        i x1) =>
                                                 (A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __1 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A)
                                                    _x __1)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (x2 i)
                                                   matita_basics_bool.false))) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           x3 matita_arithmetics_nat.O)
                                        (_z1770 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_arithmetics_nat.nat)
                                                x3 matita_arithmetics_nat.O) =>
                                         (_z1769 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          P _z1769) matita_arithmetics_nat.O))) =>
                              (_z1769 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               P _z1769) x3))))))))
      :=
      x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      x3 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hterm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_minimization.max_spec _n _f __) x1 x2 x3) =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (_z1769 :
                cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.univ cic.prop)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) m x1)
                (_x_975 :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) m x1) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (x2 m) matita_basics_bool.true)
                   (_x_974 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (x2 m) matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) m i)
                            (__ :
                               cic.Term cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) m i) =>
                             cic.prod cic.prop cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i x1)
                               (__1 :
                                  cic.Term cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) i x1) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (x2 i) matita_basics_bool.false))))
                      (_x_973 :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              matita_arithmetics_nat.nat
                              (i :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               cic.prod cic.prop cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) m i)
                                 (__ :
                                    cic.Term cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m i) =>
                                  cic.prod cic.prop cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) i x1)
                                    (__1 :
                                       cic.Term cic.prop
                                         ((__1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __1 __2)
                                            i x1) =>
                                     (A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (x2 i) matita_basics_bool.false)))) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x3 m)
                         (_z1770 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_arithmetics_nat.nat)
                                 x3 m) =>
                          (_z1769 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           P _z1769) m)))))) =>
      H2 :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i x1)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i x1) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (x2 i) matita_basics_bool.false)))
             (_x_976 :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop
                     matita_arithmetics_nat.nat
                     (i :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      cic.prod cic.prop cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i x1)
                        (__ :
                           cic.Term cic.prop
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i x1) =>
                         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (x2 i) matita_basics_bool.false))) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x3 matita_arithmetics_nat.O)
                (_z1770 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_arithmetics_nat.nat)
                        x3 matita_arithmetics_nat.O) =>
                 (_z1769 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  P _z1769) matita_arithmetics_nat.O))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x3 x3)
              (_z1770 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x3 x3) =>
               (_z1769 :
                  cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                P _z1769) x3)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_arithmetics_nat.nat)
            x3))
        (matita_arithmetics_minimization.max_spec_ind x1 x2
           (x_971 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_972 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_minimization.max_spec _n _f __) x1 x2
                   x_971) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x3 x_971)
                 (_z1770 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x3 x_971) =>
                  (_z1769 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   P _z1769) x_971)))
           H1 H2 x3 Hterm).

def max_spec_to_max :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _f :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.bool)) =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_minimization.max_spec _n _f __) n f
                       m)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _f :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z)
                                  matita_arithmetics_nat.nat
                                  (__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_basics_bool.bool)) =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_minimization.max_spec _n _f __)
                            n f m) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max n f) m)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      spec :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_minimization.max_spec _n _f __) n f m) =>
      matita_arithmetics_minimization.match_max_spec cic.prop n f
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_minimization.max_spec _n _f __1) n f __) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.max n f) __)
        (max : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ltmax :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) max n) =>
         fmax :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f max) matita_basics_bool.true) =>
         ismax :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) max i)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) max i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i n)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i n) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_arithmetics_minimization.max_exists f n max ltmax
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (f max) fmax)
           ismax)
        (ffalse :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false))) =>
         matita_arithmetics_minimization.max_not_exists f n ffalse)
        m spec.

def let_clause_10131 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (n0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.max
                             (matita_arithmetics_nat.S n0) f)
                          m)
                       (eqm :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_minimization.max
                                  (matita_arithmetics_nat.S n0) f)
                               m) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f m) matita_basics_bool.false)
                          (fm :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f m) matita_basics_bool.false) =>
                           cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (j :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1)
                                      (matita_arithmetics_nat.S j)
                                      (matita_arithmetics_nat.S n0))
                                   (ltj :
                                      cic.Term cic.prop
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1)
                                           (matita_arithmetics_nat.S j)
                                           (matita_arithmetics_nat.S n0)) =>
                                    cic.prod (cic.type cic.z) cic.prop
                                      matita_arithmetics_nat.nat
                                      (x7 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         x7
                                         (matita_arithmetics_nat.plus m x7))))))))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_minimization.max
                (matita_arithmetics_nat.S n0) f)
             m) =>
      fm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f m) matita_basics_bool.false) =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      j : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltj :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) (matita_arithmetics_nat.S j)
             (matita_arithmetics_nat.S n0)) =>
      x7 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x7 (matita_arithmetics_nat.plus x x7)))
        (matita_arithmetics_nat.plus_O_n x7) m
        (matita_arithmetics_minimization.fmax_false f
           (matita_arithmetics_nat.S n0) m eqm fm).

def max_to_max_spec :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max n f) m)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.max n f) m) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _f :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.bool)) =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_minimization.max_spec _n _f __1) n f
                       m)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max __ f) m)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.max __ f) m) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _f :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool)) =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_minimization.max_spec _n _f __2) __ f m))
        (eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max matita_arithmetics_nat.O
                   f)
                m) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.max matita_arithmetics_nat.O f)
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.max
                      matita_arithmetics_nat.O f)
                   x_1) =>
            cic.lift cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _f :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.bool)) =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_minimization.max_spec _n _f __)
                 matita_arithmetics_nat.O f x_1))
           (matita_arithmetics_minimization.not_found_max_spec
              matita_arithmetics_nat.O f
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               ltiO :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      matita_arithmetics_nat.O) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false))
                 (matita_basics_logic.absurd
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __)
                       (matita_arithmetics_nat.S i) matita_arithmetics_nat.O)
                    ltiO (matita_arithmetics_nat.not_le_Sn_O i))))
           m eqm)
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max
                   (matita_arithmetics_nat.S n0) f)
                m) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f m) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f m) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _f :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool)) =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_minimization.max_spec _n _f __1)
              (matita_arithmetics_nat.S n0) f m)
           (fm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true) =>
            matita_arithmetics_minimization.found_max_spec
              (matita_arithmetics_nat.S n0) f m
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S n0) f)
                       (matita_arithmetics_nat.S n0)))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m
                       (matita_arithmetics_nat.S n0)))
                 (matita_arithmetics_minimization.lt_max_n f
                    (matita_arithmetics_nat.S n0)
                    (matita_arithmetics_nat.lt_O_S n0))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) x
                                (matita_arithmetics_nat.S n0)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) m
                                (matita_arithmetics_nat.S n0)))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m
                             (matita_arithmetics_nat.S n0))))
                    (matita_arithmetics_minimization.max
                       (matita_arithmetics_nat.S n0) f)
                    eqm))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (f m) fm)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               auto :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m i) =>
               auto' :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S n0)) =>
               matita_arithmetics_minimization.lt_max_to_false f
                 (matita_arithmetics_nat.S n0) i auto'
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m i))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1)
                          (matita_arithmetics_minimization.max
                             (matita_arithmetics_nat.S n0) f)
                          i))
                    auto
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max
                          (matita_arithmetics_nat.S n0) f)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) x i))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1)
                                   (matita_arithmetics_minimization.max
                                      (matita_arithmetics_nat.S n0) f)
                                   i))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1)
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                i)))
                       m eqm))))
           (fm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x matita_arithmetics_nat.O) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _f :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat
                          (__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.bool)) =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_minimization.max_spec _n _f __1)
                    (matita_arithmetics_nat.S n0) f x))
              (matita_arithmetics_minimization.not_found_max_spec
                 (matita_arithmetics_nat.S n0) f
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.match_nat cic.prop
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) __
                          (matita_arithmetics_nat.S n0))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) __
                               (matita_arithmetics_nat.S n0)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f __) matita_basics_bool.false))
                    (auto :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O
                            (matita_arithmetics_nat.S n0)) =>
                     matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f x) matita_basics_bool.false))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.false
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x matita_basics_bool.false))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.false)
                          (f m) fm)
                       matita_arithmetics_nat.O
                       (matita_arithmetics_minimization.fmax_false f
                          (matita_arithmetics_nat.S n0) m eqm fm))
                    (j :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltj :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            (matita_arithmetics_nat.S j)
                            (matita_arithmetics_nat.S n0)) =>
                     matita_arithmetics_minimization.lt_max_to_false f
                       (matita_arithmetics_nat.S n0)
                       (matita_arithmetics_nat.S j) ltj
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1)
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_minimization.max
                                         (matita_arithmetics_nat.S n0) f)
                                      (matita_arithmetics_minimization.max
                                         (matita_arithmetics_nat.S n0) f))
                                   (matita_arithmetics_nat.S j))))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1)
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                (matita_arithmetics_nat.S j)))
                          (matita_arithmetics_nat.lt_plus_Sn_r
                             (matita_arithmetics_minimization.max
                                (matita_arithmetics_nat.S n0) f)
                             (matita_arithmetics_minimization.max
                                (matita_arithmetics_nat.S n0) f)
                             j)
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_minimization.max
                                      (matita_arithmetics_nat.S n0) f)
                                   (matita_arithmetics_nat.S j)))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1)
                                         (matita_arithmetics_minimization.max
                                            (matita_arithmetics_nat.S n0) f)
                                         x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1)
                                         (matita_arithmetics_minimization.max
                                            (matita_arithmetics_nat.S n0) f)
                                         (matita_arithmetics_nat.S j)))))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            x
                                            (matita_arithmetics_nat.plus x
                                               (matita_arithmetics_nat.plus x
                                                  (matita_arithmetics_nat.S j)))))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            x (matita_arithmetics_nat.S j)))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S j)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.univ (cic.type cic.z)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               m
                                               (matita_arithmetics_nat.plus m
                                                  x)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               m (matita_arithmetics_nat.S j)))))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S j)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.univ (cic.type cic.z)))
                                            (cic.lift cic.prop
                                               (cic.type cic.z)
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  m x))
                                            (cic.lift cic.prop
                                               (cic.type cic.z)
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  m
                                                  (matita_arithmetics_nat.S j)))))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.univ (cic.type cic.z)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               m (matita_arithmetics_nat.S j))))
                                      (matita_arithmetics_nat.plus m
                                         (matita_arithmetics_nat.S j))
                                      (matita_arithmetics_minimization.let_clause_10131
                                         f n m n0 eqm fm i j ltj
                                         (matita_arithmetics_nat.S j)))
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S j))
                                   (matita_arithmetics_minimization.let_clause_10131
                                      f n m n0 eqm fm i j ltj
                                      (matita_arithmetics_nat.S j)))
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                eqm)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_minimization.max
                                      (matita_arithmetics_nat.S n0) f)
                                   (matita_arithmetics_minimization.max
                                      (matita_arithmetics_nat.S n0) f))
                                (matita_arithmetics_nat.S j))
                             (matita_arithmetics_nat.associative_plus
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                (matita_arithmetics_minimization.max
                                   (matita_arithmetics_nat.S n0) f)
                                (matita_arithmetics_nat.S j)))))
                    i))
              m
              (matita_arithmetics_minimization.fmax_false f
                 (matita_arithmetics_nat.S n0) m eqm fm))
           (matita_basics_bool.true_or_false (f m)))
        n.

def max_f_g :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (g :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) (g i))))
                    (__ :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n)
                               (__ :
                                  cic.Term cic.prop
                                    ((__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __ __1) i n) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) (g i)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max n f)
                       (matita_arithmetics_minimization.max n g))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _x_365)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) (g i))))
              (__ :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i _x_365) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) (g i)))) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max _x_365 f)
                 (matita_arithmetics_minimization.max _x_365 g))))
        (auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      matita_arithmetics_nat.O)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           matita_arithmetics_nat.O) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) (g i)))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_minimization.max
                    matita_arithmetics_nat.O g)))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_minimization.max matita_arithmetics_nat.O g)
              (matita_arithmetics_minimization.max_O g))
           (matita_arithmetics_minimization.max matita_arithmetics_nat.O f)
           (matita_arithmetics_minimization.max_O f))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) (g i))))
                (__ :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i m)
                           (__ :
                              cic.Term cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i m) =>
                            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (f i) (g i)))) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.max m f)
                   (matita_arithmetics_minimization.max m g))) =>
         ext :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S m))
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           (matita_arithmetics_nat.S m)) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) (g i)))) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (g m)
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   x (g m)) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_minimization.max' m f
                       matita_arithmetics_nat.O)
                    x)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_minimization.max' m g
                       matita_arithmetics_nat.O)
                    (g m))))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max' m g
                 matita_arithmetics_nat.O)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.max' m g
                         matita_arithmetics_nat.O)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m x (g m))
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m g
                          matita_arithmetics_nat.O)
                       (g m))))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_minimization.max' m g
                       matita_arithmetics_nat.O)
                    (g m)))
              (matita_arithmetics_minimization.max' m f
                 matita_arithmetics_nat.O)
              (Hind
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  ltim :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __)
                         (matita_arithmetics_nat.S i) m) =>
                  ext i
                    (matita_arithmetics_nat.le_S (matita_arithmetics_nat.S i)
                       m ltim))))
           (f m)
           (ext m
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max' m g
                    matita_arithmetics_nat.O)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_minimization.max' m g
                            matita_arithmetics_nat.O)) =>
                  cic.lift cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) m
                       (matita_arithmetics_nat.S m)))
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.plus m
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.S m)))
                    (matita_arithmetics_nat.lt_plus_Sn_r m
                       matita_arithmetics_nat.O matita_arithmetics_nat.O)
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus x
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.S m)))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S m)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.S m)))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.S m))))
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus m
                                matita_arithmetics_nat.O)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S x)
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (matita_arithmetics_nat.plus_n_Sm m
                                matita_arithmetics_nat.O)
                             m (matita_arithmetics_nat.plus_n_O m)))
                       (matita_arithmetics_nat.plus m
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.plus_n_O m)))
                 (matita_arithmetics_minimization.max' m f
                    matita_arithmetics_nat.O)
                 (Hind
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltim :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __)
                            (matita_arithmetics_nat.S i) m) =>
                     ext i
                       (matita_arithmetics_nat.le_S
                          (matita_arithmetics_nat.S i) m ltim))))))
        n.

def le_max_f_max_g :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (g :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (g i) matita_basics_bool.true))))
                    (__ :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n)
                               (__ :
                                  cic.Term cic.prop
                                    ((__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __ __1) i n) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true)
                                  (__1 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __1 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __1)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (f i) matita_basics_bool.true) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (g i) matita_basics_bool.true)))) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_minimization.max n f)
                       (matita_arithmetics_minimization.max n g))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _x_365)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (g i) matita_basics_bool.true))))
              (__ :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i _x_365) =>
                          cic.prod cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true)
                            (__1 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __1)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (f i) matita_basics_bool.true) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (g i) matita_basics_bool.true)))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_minimization.max _x_365 f)
                 (matita_arithmetics_minimization.max _x_365 g))))
        (auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      matita_arithmetics_nat.O)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           matita_arithmetics_nat.O) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (f i) matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (g i) matita_basics_bool.true)))) =>
         matita_arithmetics_minimization.le_max_n f matita_arithmetics_nat.O)
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i m) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)
                         (__1 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f i) matita_basics_bool.true) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (g i) matita_basics_bool.true))))
                (__ :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i m)
                           (__ :
                              cic.Term cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i m) =>
                            cic.prod cic.prop cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f i) matita_basics_bool.true)
                              (__1 :
                                 cic.Term cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (f i) matita_basics_bool.true) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (g i) matita_basics_bool.true)))) =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __1)
                   (matita_arithmetics_minimization.max m f)
                   (matita_arithmetics_minimization.max m g))) =>
         ext :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S m))
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           (matita_arithmetics_nat.S m)) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (f i) matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (g i) matita_basics_bool.true)))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f m) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f m) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m
                 (matita_arithmetics_minimization.max' m f
                    matita_arithmetics_nat.O)
                 (f m))
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m
                 (matita_arithmetics_minimization.max' m g
                    matita_arithmetics_nat.O)
                 (g m)))
           (Heq :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m f
                          matita_arithmetics_nat.O)
                       x)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m g
                          matita_arithmetics_nat.O)
                       (g m))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          m
                          (matita_arithmetics_minimization.max' m f
                             matita_arithmetics_nat.O)
                          matita_basics_bool.true)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          m
                          (matita_arithmetics_minimization.max' m g
                             matita_arithmetics_nat.O)
                          x)))
                 (matita_arithmetics_nat.le_n
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m f
                          matita_arithmetics_nat.O)
                       matita_basics_bool.true))
                 (g m)
                 (ext m
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.plus m
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m
                             (matita_arithmetics_nat.S m)))
                       (matita_arithmetics_nat.lt_plus_Sn_r m
                          matita_arithmetics_nat.O matita_arithmetics_nat.O)
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.plus x
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.S m)))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S m)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m
                                         (matita_arithmetics_nat.S m)))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.S m))))
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus m
                                   matita_arithmetics_nat.O)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S x)
                                      (matita_arithmetics_nat.plus m
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))
                                (matita_arithmetics_nat.plus_n_Sm m
                                   matita_arithmetics_nat.O)
                                m (matita_arithmetics_nat.plus_n_O m)))
                          (matita_arithmetics_nat.plus m
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.plus_n_O m)))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f m) Heq)))
              (f m) Heq)
           (Heq :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m f
                          matita_arithmetics_nat.O)
                       x)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m g
                          matita_arithmetics_nat.O)
                       (g m))))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m f
                          matita_arithmetics_nat.O)
                       matita_basics_bool.false)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_minimization.max' m g
                          matita_arithmetics_nat.O)
                       __))
                 (matita_arithmetics_minimization.le_max_n f m)
                 (Hind
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltim :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m) =>
                     ext i
                       (matita_arithmetics_nat.le_S
                          (matita_arithmetics_nat.S i) m ltim)))
                 (g m))
              (f m) Heq)
           (matita_basics_bool.true_or_false (f m)))
        n.

def f_max_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.true))))
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__ : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat)
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.lift cic.prop cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.And _A _B)
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.true)))) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f (matita_arithmetics_minimization.max n f))
                    matita_basics_bool.true))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.match_max_spec cic.prop n f
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_minimization.max_spec _n _f __1) n f __) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) i n)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true))))
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__1 : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) i n)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)))) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f __) matita_basics_bool.true))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m n) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.true) =>
         auto'' :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m i)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) m i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i n)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i n) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         auto''' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (f m) auto')
        (Hall :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false))) =>
         _clearme :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         matita_basics_logic.match_ex cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) i n)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true)))
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)))) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f matita_arithmetics_nat.O) matita_basics_bool.true)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _clearme0 :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) x n)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f x) matita_basics_bool.true)) =>
            matita_basics_logic.match_And cic.prop
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) x n)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f x) matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) x n)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f x) matita_basics_bool.true)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f matita_arithmetics_nat.O) matita_basics_bool.true)
              (ltx :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) x n) =>
               fx :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f x) matita_basics_bool.true) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f matita_arithmetics_nat.O) matita_basics_bool.true))
                 (matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f x) matita_basics_bool.true)
                    fx
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               x0 matita_basics_bool.false) =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x0 matita_basics_bool.true)))
                       (matita_basics_logic.sym_not_eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true matita_basics_bool.false
                          matita_basics_bool.not_eq_true_false)
                       (f x) (Hall x ltx))))
              _clearme0)
           _clearme)
        (matita_arithmetics_minimization.max n f)
        (matita_arithmetics_minimization.max_to_max_spec f n
           (matita_arithmetics_minimization.max n f)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.max n f))).

def f_false_to_le_max :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i n)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type cic.z) =>
                           _P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                  (__ : cic.Term (cic.type cic.z) A =>
                                   cic.univ cic.prop)) =>
                           matita_basics_logic.ex
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                             _P)
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               matita_arithmetics_nat.nat)
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.lift cic.prop cic.prop
                               ((_A : cic.Univ cic.prop =>
                                 _B : cic.Univ cic.prop =>
                                 matita_basics_logic.And _A _B)
                                  ((__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __ __1) i n)
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true)))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) p m)
                             (__1 :
                                cic.Term cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) p m) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f m) matita_basics_bool.false)))
                       (__1 :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) p m)
                                  (__1 :
                                     cic.Term cic.prop
                                       ((__1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __1 __2) p
                                          m) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f m) matita_basics_bool.false))) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2)
                          (matita_arithmetics_minimization.max n f) p))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      H1 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type cic.z) =>
            _P :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                   (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
            matita_basics_logic.ex
              (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat)
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.lift cic.prop cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true)))) =>
      H2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) p m)
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) p m) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false))) =>
      matita_arithmetics_nat.not_lt_to_le p
        (matita_arithmetics_minimization.max n f)
        (matita_basics_logic.nmk
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) p
              (matita_arithmetics_minimization.max n f))
           (H3 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) p
                   (matita_arithmetics_minimization.max n f)) =>
            matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max n f))
                 (x_1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f (matita_arithmetics_minimization.max n f)) x_1) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true x_1))
                 (matita_basics_logic.sym_eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f (matita_arithmetics_minimization.max n f))
                    matita_basics_bool.true
                    (matita_arithmetics_minimization.f_max_true f n H1))
                 matita_basics_bool.false
                 (H2 (matita_arithmetics_minimization.max n f) H3))
              matita_basics_bool.not_eq_true_false)).

def exists_forall_lt :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.true))))
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i n)
                       (__ :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.false))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i _x_365)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _x_365)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))))
        (matita_basics_logic.or_intror
           ((A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i
                       matita_arithmetics_nat.O)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true))))
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) i
                    matita_arithmetics_nat.O)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         matita_arithmetics_nat.O) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.false)))
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            lti0 :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i
                   matita_arithmetics_nat.O) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.false))
              (matita_basics_logic.absurd
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) i
                    matita_arithmetics_nat.O)
                 lti0
                 (matita_arithmetics_nat.le_to_not_lt
                    matita_arithmetics_nat.O i
                    (matita_arithmetics_nat.le_O_n i)))))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n1)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true))))
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n1)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_basics_logic.match_Or cic.prop
           ((A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i n1)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true))))
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) i n1)
                 (__ :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n1) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.false)))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat)
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n1)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true))))
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n1)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i n1) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false)))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i
                          (matita_arithmetics_nat.S n1))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) i
                       (matita_arithmetics_nat.S n1))
                    (__1 :
                       cic.Term cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) i
                            (matita_arithmetics_nat.S n1)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false))))
           (_clearme0 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n1)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)))) =>
            matita_basics_logic.match_ex cic.prop
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i n1)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true)))
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat)
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n1)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true)))) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__1 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.S n1))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.true))))
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i
                          (matita_arithmetics_nat.S n1))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.S n1)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.false))))
              (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _clearme1 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) a n1)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f a) matita_basics_bool.true)) =>
               matita_basics_logic.match_And cic.prop
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) a n1)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f a) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) a n1)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f a) matita_basics_bool.true)) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__1 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.S n1))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.S n1)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false))))
                 (Ha1 :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) a n1) =>
                  Ha2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f a) matita_basics_bool.true) =>
                  matita_basics_logic.or_introl
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.S n1))
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i
                                  (matita_arithmetics_nat.S n1)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false)))
                    (matita_basics_logic.ex_intro
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true)))
                       a
                       (matita_basics_logic.conj
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) a
                             (matita_arithmetics_nat.S n1))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f a) matita_basics_bool.true)
                          (matita_arithmetics_nat.le_S
                             (matita_arithmetics_nat.S a) n1 Ha1)
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true)
                             (f a) Ha2))))
                 _clearme1)
              _clearme0)
           (H :
              cic.Term cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n1)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false))) =>
            matita_basics_logic.match_Or cic.prop
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f n1) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f n1) matita_basics_bool.false)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f n1) matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f n1) matita_basics_bool.false)) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__1 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.S n1))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.true))))
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i
                          (matita_arithmetics_nat.S n1))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.S n1)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.false))))
              (HfS :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f n1) matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                       ((A : cic.Univ (cic.type cic.z) =>
                         _P :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__1 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_logic.ex
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop cic.prop
                             ((_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.And _A _B)
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i
                                   (matita_arithmetics_nat.S n1))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f i) matita_basics_bool.true))))
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) i
                                (matita_arithmetics_nat.S n1))
                             (__1 :
                                cic.Term cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) i
                                     (matita_arithmetics_nat.S n1)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false)))))
                 (matita_basics_logic.or_introl
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.S n1))
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i
                                  (matita_arithmetics_nat.S n1)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false)))
                    (matita_basics_logic.ex_intro
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true)))
                       n1
                       (matita_basics_logic.conj
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) n1
                             (matita_arithmetics_nat.S n1))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f n1) matita_basics_bool.true)
                          (matita_arithmetics_nat.le_n
                             (matita_arithmetics_nat.S n1))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true)
                             (f n1) HfS))))
                 (f n1) HfS)
              (HfS :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f n1) matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                       ((A : cic.Univ (cic.type cic.z) =>
                         _P :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__1 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_logic.ex
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop cic.prop
                             ((_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.And _A _B)
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i
                                   (matita_arithmetics_nat.S n1))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f i) matita_basics_bool.true))))
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) i
                                (matita_arithmetics_nat.S n1))
                             (__1 :
                                cic.Term cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) i
                                     (matita_arithmetics_nat.S n1)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false)))))
                 (matita_basics_logic.or_intror
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.S n1))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.S n1))
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i
                                  (matita_arithmetics_nat.S n1)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false)))
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     lei :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.S n1)) =>
                     matita_basics_logic.match_Or cic.prop
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S i)
                          (matita_arithmetics_nat.S n1))
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S i)
                          (matita_arithmetics_nat.S n1))
                       (__ :
                          cic.Term cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.Or _A _B)
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1)
                                  (matita_arithmetics_nat.S i)
                                  (matita_arithmetics_nat.S n1))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S i)
                                  (matita_arithmetics_nat.S n1))) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.false)
                       (Hi :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1)
                               (matita_arithmetics_nat.S i)
                               (matita_arithmetics_nat.S n1)) =>
                        H i
                          (matita_arithmetics_nat.le_S_S_to_le
                             (matita_arithmetics_nat.S i) n1 Hi))
                       (Hi :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S i)
                               (matita_arithmetics_nat.S n1)) =>
                        matita_arithmetics_nat.nat_discr
                          (matita_arithmetics_nat.S i)
                          (matita_arithmetics_nat.S n1) Hi
                          (cic.lift cic.prop (cic.type (cic.s cic.z))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false))
                          (e0 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_basics_logic.R0
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat)
                                     i)
                                  n1) =>
                           matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             n1
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     x n1) =>
                              cic.lift cic.prop cic.prop
                                (cic.prod cic.prop cic.prop
                                   ((__1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __2 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __1 __2) x
                                      (matita_arithmetics_nat.S n1))
                                   (__1 :
                                      cic.Term cic.prop
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           x (matita_arithmetics_nat.S n1)) =>
                                    cic.prod cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S x)
                                         (matita_arithmetics_nat.S n1))
                                      (__2 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.S x)
                                              (matita_arithmetics_nat.S n1)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __3 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __3)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (f x) matita_basics_bool.false))))
                             (lei0 :
                                cic.Term cic.prop
                                  ((__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __ __1) n1
                                     (matita_arithmetics_nat.S n1)) =>
                              Hi0 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S n1)
                                     (matita_arithmetics_nat.S n1)) =>
                              matita_basics_logic.streicherK
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S n1)
                                (__ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S n1)
                                        (matita_arithmetics_nat.S n1)) =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (f n1) matita_basics_bool.false))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.false
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         x matita_basics_bool.false))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      matita_basics_bool.false)
                                   (f n1) HfS)
                                Hi0)
                             i e0 lei Hi))
                       (matita_arithmetics_nat.le_to_or_lt_eq
                          (matita_arithmetics_nat.S i)
                          (matita_arithmetics_nat.S n1) lei)))
                 (f n1) HfS)
              (matita_basics_bool.true_or_false (f n1)))
           _clearme)
        n.

def exists_max_forall_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i n)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f (matita_arithmetics_minimization.max n f))
                       matita_basics_bool.true))
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i n)
                          (__ :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i n) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.max n f)
                       matita_arithmetics_nat.O)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.ex
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              (matita_basics_logic.And (matita_arithmetics_nat.lt i n)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true))))
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) =>
               matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f i) matita_basics_bool.false)))
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true))))
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i n)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max n f))
                 matita_basics_bool.true))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2) i n)
                    (__1 :
                       cic.Term cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) i n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max n f)
                 matita_arithmetics_nat.O)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         matita_basics_logic.or_introl
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i n)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max n f))
                 matita_basics_bool.true))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max n f)
                 matita_arithmetics_nat.O))
           (matita_basics_logic.conj
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i n)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max n f))
                 matita_basics_bool.true)
              H (matita_arithmetics_minimization.f_max_true f n H)))
        (H :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false))) =>
         matita_basics_logic.or_intror
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i n)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max n f))
                 matita_basics_bool.true))
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max n f)
                 matita_arithmetics_nat.O))
           (matita_basics_logic.conj
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max n f)
                 matita_arithmetics_nat.O)
              H (matita_arithmetics_minimization.max_not_exists f n H)))
        (matita_arithmetics_minimization.exists_forall_lt f n).

def let_clause_1009 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O n)
                    (posn :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O n) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f n) matita_basics_bool.false)
                       (Hfn :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f n) matita_basics_bool.false) =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_minimization.max m f) n)
                          (Hmax :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __)
                                  (matita_arithmetics_minimization.max m f) n) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_minimization.max m f) n)
                             (Hmax0 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_minimization.max m f)
                                     n) =>
                              cic.prod cic.prop cic.prop
                                ((_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.And _A _B)
                                   (cic.prod (cic.type cic.z) cic.prop
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i m)
                                         (__ :
                                            cic.Term cic.prop
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i m) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (f i) matita_basics_bool.false)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_minimization.max m
                                         f)
                                      matita_arithmetics_nat.O))
                                (_clearme :
                                   cic.Term cic.prop
                                     ((_A : cic.Univ cic.prop =>
                                       _B : cic.Univ cic.prop =>
                                       matita_basics_logic.And _A _B)
                                        (cic.prod (cic.type cic.z) cic.prop
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i m)
                                              (__ :
                                                 cic.Term cic.prop
                                                   ((__ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __ __1)
                                                      i m) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (f i)
                                                 matita_basics_bool.false)))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_minimization.max
                                              m f)
                                           matita_arithmetics_nat.O)) =>
                                 cic.prod cic.prop cic.prop
                                   (cic.prod (cic.type cic.z) cic.prop
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i m)
                                         (__ :
                                            cic.Term cic.prop
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i m) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (f i) matita_basics_bool.false)))
                                   (auto :
                                      cic.Term cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i m)
                                              (__ :
                                                 cic.Term cic.prop
                                                   ((__ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __ __1)
                                                      i m) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (f i)
                                                 matita_basics_bool.false))) =>
                                    cic.prod cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_minimization.max
                                            m f)
                                         matita_arithmetics_nat.O)
                                      (auto' :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_minimization.max
                                                 m f)
                                              matita_arithmetics_nat.O) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O n)))))))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      Hfn :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f n) matita_basics_bool.false) =>
      Hmax :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __)
             (matita_arithmetics_minimization.max m f) n) =>
      Hmax0 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_minimization.max m f) n) =>
      _clearme :
        cic.Term cic.prop
          ((_A : cic.Univ cic.prop =>
            _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i m)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i m) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.false)))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max m f)
                matita_arithmetics_nat.O)) =>
      auto :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i m)
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i m) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f i) matita_basics_bool.false))) =>
      auto' :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_arithmetics_nat.nat)
             (matita_arithmetics_minimization.max m f)
             matita_arithmetics_nat.O) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.max m f)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              x n))
        Hmax0 matita_arithmetics_nat.O auto'.

def false_to_lt_max :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O n)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O n) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f n) matita_basics_bool.false)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f n) matita_basics_bool.false) =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __2)
                             (matita_arithmetics_minimization.max m f) n)
                          (__2 :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __2)
                                  (matita_arithmetics_minimization.max m f) n) =>
                           (__3 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __4 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __3 __4)
                             (matita_arithmetics_minimization.max m f) n)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O n) =>
      Hfn :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f n) matita_basics_bool.false) =>
      Hmax :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __)
             (matita_arithmetics_minimization.max m f) n) =>
      matita_basics_logic.match_Or cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max m f)
           n)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.max m f) n)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1)
                   (matita_arithmetics_minimization.max m f) n)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.max m f) n)) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2)
           (matita_arithmetics_minimization.max m f) n)
        (Hmax0 :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1)
                (matita_arithmetics_minimization.max m f) n) =>
         Hmax0)
        (Hmax0 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.max m f) n) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.And
              (matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    (matita_basics_logic.And (matita_arithmetics_nat.lt i m)
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max m f))
                 matita_basics_bool.true))
           (matita_basics_logic.And
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i m)
                    (__ :
                       cic.Term cic.prop (matita_arithmetics_nat.lt i m) =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max m f)
                 matita_arithmetics_nat.O))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__ : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat)
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.lift cic.prop cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.And _A _B)
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i m)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.true))))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f (matita_arithmetics_minimization.max m f))
                         matita_basics_bool.true))
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m)
                            (__ :
                               cic.Term cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) i m) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.false)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max m f)
                         matita_arithmetics_nat.O))) =>
            (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2)
              (matita_arithmetics_minimization.max m f) n)
           (_clearme :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat)
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f (matita_arithmetics_minimization.max m f))
                      matita_basics_bool.true)) =>
            matita_basics_logic.match_And cic.prop
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) i m)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f i) matita_basics_bool.true))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_minimization.max m f))
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__ : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat)
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.lift cic.prop cic.prop
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.And _A _B)
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) i m)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.true))))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f (matita_arithmetics_minimization.max m f))
                         matita_basics_bool.true)) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2)
                 (matita_arithmetics_minimization.max m f) n)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat)
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.true)))) =>
               Hfmax :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f (matita_arithmetics_minimization.max m f))
                      matita_basics_bool.true) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2)
                       (matita_arithmetics_minimization.max m f) n))
                 (matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false)
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       matita_basics_bool.false
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f n)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x matita_basics_bool.false))
                          Hfn matita_basics_bool.true
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_minimization.max m f)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f x) matita_basics_bool.true))
                             Hfmax n Hmax0)))
                    matita_basics_bool.not_eq_true_false))
              _clearme)
           (_clearme :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.max m f)
                      matita_arithmetics_nat.O)) =>
            matita_basics_logic.match_And cic.prop
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i m)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.max m f)
                 matita_arithmetics_nat.O)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i m)
                            (__ :
                               cic.Term cic.prop
                                 ((__ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __ __1) i m) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.false)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_minimization.max m f)
                         matita_arithmetics_nat.O)) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2)
                 (matita_arithmetics_minimization.max m f) n)
              (auto :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i m)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i m) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false))) =>
               auto' :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.max m f)
                      matita_arithmetics_nat.O) =>
               matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O n))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       (matita_arithmetics_minimization.max m f) n))
                 posn
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    n
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) x n))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1)
                                (matita_arithmetics_minimization.max m f) n))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       n
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) n n))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) x n))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n n)))
                       (matita_arithmetics_minimization.max m f)
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_minimization.max m f) x))
                          auto' n
                          (matita_arithmetics_minimization.let_clause_1009 f
                             n m posn Hfn Hmax Hmax0 _clearme auto auto')))
                    matita_arithmetics_nat.O
                    (matita_arithmetics_minimization.let_clause_1009 f n m
                       posn Hfn Hmax Hmax0 _clearme auto auto')))
              _clearme)
           (matita_arithmetics_minimization.exists_max_forall_false f m))
        (matita_arithmetics_nat.le_to_or_lt_eq
           (matita_arithmetics_minimization.max m f) n Hmax).

def min :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (__2 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__2 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  matita_arithmetics_nat.nat)))).

def min_body :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (__2 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__2 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  matita_arithmetics_nat.nat)))).

[ __ ] min __ -->
  matita_arithmetics_nat.filter_nat (cic.type cic.z)
    (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
       (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool))
          (__2 :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           matita_arithmetics_nat.nat)))
    matita_arithmetics_minimization.min_body __.

[ __ ] min_body __ -->
  b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
  f :
    cic.Term (cic.type cic.z)
      (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_basics_bool.bool)) =>
  matita_arithmetics_nat.match_nat (cic.type cic.z)
    (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    b
    (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     matita_basics_bool.match_bool (cic.type cic.z)
       (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
        matita_arithmetics_nat.nat)
       b
       (matita_arithmetics_minimization.min p (matita_arithmetics_nat.S b) f)
       (f b))
    __.

def min0 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               matita_arithmetics_nat.nat)))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_arithmetics_minimization.min n matita_arithmetics_nat.O f.

def min_O_f :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.min
                    matita_arithmetics_nat.O b f)
                 b)))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat)
        (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f).

def true_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f b) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f b) matita_basics_bool.true) =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.min n b f) b)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      fb :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f b) matita_basics_bool.true) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min __ b f) b)
        (matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           b
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x b))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b)
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f)
           (matita_arithmetics_minimization.min_O_f f b))
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min n0
                       (matita_arithmetics_nat.S b) f)
                    x)
                 b))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b)
           (f b) fb)
        n.

def false_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f b) matita_basics_bool.false)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f b) matita_basics_bool.false) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.min
                          (matita_arithmetics_nat.S n) b f)
                       (matita_arithmetics_minimization.min n
                          (matita_arithmetics_nat.S b) f))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      fb :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f b) matita_basics_bool.false) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.false
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                x matita_basics_bool.false) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 b
                 (matita_arithmetics_minimization.min n
                    (matita_arithmetics_nat.S b) f)
                 x)
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S b) f)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min n
              (matita_arithmetics_nat.S b) f))
        (f b) fb.

def le_min_r :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_minimization.min n b f)
                    (matita_arithmetics_nat.plus n b)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_minimization.min _x_365 b f)
                 (matita_arithmetics_nat.plus _x_365 b))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop (cic.type cic.z)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) b
                 (matita_arithmetics_nat.plus b matita_arithmetics_nat.O)))
           (cic.lift cic.prop (cic.type cic.z)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __)
                 (matita_arithmetics_minimization.min
                    matita_arithmetics_nat.O b f)
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)))
           (matita_arithmetics_nat.le_plus_n_r matita_arithmetics_nat.O b)
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type cic.z)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b
                          (matita_arithmetics_nat.plus b
                             matita_arithmetics_nat.O)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) x
                          (matita_arithmetics_nat.plus
                             matita_arithmetics_nat.O b)))))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus b matita_arithmetics_nat.O)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) b
                             (matita_arithmetics_nat.plus b
                                matita_arithmetics_nat.O)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) b x))))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    b
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b
                                (matita_arithmetics_nat.plus b
                                   matita_arithmetics_nat.O)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b x))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       b
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b x))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b b))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b b)))
                       (matita_arithmetics_nat.plus b
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.plus_n_O b))
                    (matita_arithmetics_nat.plus b matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.plus_n_O b))
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)
                 (matita_arithmetics_nat.commutative_plus
                    matita_arithmetics_nat.O b))
              (matita_arithmetics_minimization.min matita_arithmetics_nat.O b
                 f)
              (matita_arithmetics_minimization.min_O_f f b)))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_minimization.min m b f)
                   (matita_arithmetics_nat.plus m b))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 b
                 (matita_arithmetics_minimization.min m
                    (matita_arithmetics_nat.S b) f)
                 __)
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus m b)))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.plus m
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))
                       (matita_arithmetics_nat.plus m
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
              (cic.lift cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus m b))))
              (matita_arithmetics_nat.minus_le
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.plus b
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus m b) m)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) x
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.plus b
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) b
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.plus m b))))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.S b))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.plus m b) m)
                                (matita_arithmetics_nat.plus m
                                   (matita_arithmetics_nat.plus b
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)))))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b x))))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       b
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) x
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S b))))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S b)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) b
                                      (matita_arithmetics_nat.plus m x)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) b
                                      (matita_arithmetics_nat.plus m
                                         (matita_arithmetics_nat.S b))))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S b)))))
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                matita_arithmetics_nat.O)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S x)
                                   (matita_arithmetics_nat.plus b
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (matita_arithmetics_nat.plus_n_Sm b
                                matita_arithmetics_nat.O)
                             b (matita_arithmetics_nat.plus_n_O b)))
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.plus m b) m)
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b m)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                b (matita_arithmetics_nat.minus x m)))
                          (matita_arithmetics_nat.minus_plus_m_m b m)
                          (matita_arithmetics_nat.plus m b)
                          (matita_arithmetics_nat.commutative_plus b m)))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus m b))
                    (matita_arithmetics_nat.plus_n_Sm m b))
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_arithmetics_nat.plus_minus_plus_plus_l m b m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) f)
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.S b))))
              (cic.lift cic.prop (cic.type cic.z)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) f)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus m b))))
              (Hind (matita_arithmetics_nat.S b))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus m (matita_arithmetics_nat.S b))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type cic.z)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_minimization.min m
                                (matita_arithmetics_nat.S b) f)
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.S b))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_minimization.min m
                                (matita_arithmetics_nat.S b) f)
                             x))))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type cic.z)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __)
                          (matita_arithmetics_minimization.min m
                             (matita_arithmetics_nat.S b) f)
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.S b)))))
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus m b))
                 (matita_arithmetics_nat.plus_n_Sm m b)))
           (f b))
        n.

def le_min_l :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b
                    (matita_arithmetics_minimization.min n b f)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) b
                 (matita_arithmetics_minimization.min _x_365 b f))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le_n b)
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) b
                   (matita_arithmetics_minimization.min m b f))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1) b
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 b
                 (matita_arithmetics_minimization.min m
                    (matita_arithmetics_nat.S b) f)
                 __))
           (matita_arithmetics_nat.le_n b)
           (matita_arithmetics_nat.lt_to_le b
              (matita_arithmetics_minimization.min m
                 (matita_arithmetics_nat.S b) f)
              (Hind (matita_arithmetics_nat.S b)))
           (f b))
        n.

def le_to_le_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) n m)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) n m) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (b :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.min n b f)
                          (matita_arithmetics_minimization.min m b f)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1) __ _0)
              (__1 :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __1) __ _0) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __2)
                    (matita_arithmetics_minimization.min __ b f)
                    (matita_arithmetics_minimization.min _0 b f)))))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) matita_arithmetics_nat.O n) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_arithmetics_minimization.le_min_l f n
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         leSO :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_minimization.min
                       (matita_arithmetics_nat.S n) b f)
                    (matita_arithmetics_minimization.min
                       matita_arithmetics_nat.O b f))))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                 matita_arithmetics_nat.O)
              leSO (matita_arithmetics_nat.not_le_Sn_O n)))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) n m)
                (__ :
                   cic.Term cic.prop
                     ((_n :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.le _n __) n m) =>
                 cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (b :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __1)
                      (matita_arithmetics_minimization.min n b f)
                      (matita_arithmetics_minimization.min m b f)))) =>
         leSS :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S n) b f)
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S m) b f))
           (fb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x b) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_minimization.min
                       (matita_arithmetics_nat.S m) b f)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 b
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x b) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1) b x))
                 (matita_arithmetics_nat.le_n b)
                 (matita_arithmetics_minimization.min
                    (matita_arithmetics_nat.S m) b f)
                 (matita_arithmetics_minimization.true_min f b fb
                    (matita_arithmetics_nat.S m)))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S n) b f)
              (matita_arithmetics_minimization.true_min f b fb
                 (matita_arithmetics_nat.S n)))
           (fb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min n
                 (matita_arithmetics_nat.S b) f)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min n
                         (matita_arithmetics_nat.S b) f)) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_minimization.min
                       (matita_arithmetics_nat.S m) b f)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.min m
                    (matita_arithmetics_nat.S b) f)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_minimization.min m
                            (matita_arithmetics_nat.S b) f)) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_minimization.min n
                          (matita_arithmetics_nat.S b) f)
                       x))
                 (Hind
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.pred
                                (matita_arithmetics_nat.S n))
                             (matita_arithmetics_nat.pred
                                (matita_arithmetics_nat.S m))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) n m))
                       (matita_arithmetics_nat.monotonic_pred
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.S m) leSS)
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) x
                                      (matita_arithmetics_nat.pred
                                         (matita_arithmetics_nat.S m))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) n m))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __) n x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __) n m))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) n m)))
                             (matita_arithmetics_nat.pred
                                (matita_arithmetics_nat.S m))
                             (matita_arithmetics_nat.pred_Sn m))
                          (matita_arithmetics_nat.pred
                             (matita_arithmetics_nat.S n))
                          (matita_arithmetics_nat.pred_Sn n)))
                    (matita_arithmetics_nat.S b))
                 (matita_arithmetics_minimization.min
                    (matita_arithmetics_nat.S m) b f)
                 (matita_arithmetics_minimization.false_min f m b
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (f b) fb)))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S n) b f)
              (matita_arithmetics_minimization.false_min f n b
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (f b) fb)))
           (matita_basics_bool.true_or_false (f b))).

def true_to_le_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b m)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b m) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f m) matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f m) matita_basics_bool.true) =>
                           (_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __2)
                             (matita_arithmetics_minimization.min n b f) m)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) b m)
                    (__ :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b m) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.true) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2)
                          (matita_arithmetics_minimization.min _x_365 b f) m))))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.true) =>
         auto)
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (b :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b m)
                      (__ :
                         cic.Term cic.prop
                           ((_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.le _n __) b m) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f m) matita_basics_bool.true)
                         (__1 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f m) matita_basics_bool.true) =>
                          (_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __2)
                            (matita_arithmetics_minimization.min i b f) m))))) =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         leb :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt b m)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b m)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) b m)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      b m)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f m) matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f m) matita_basics_bool.true) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __2)
                 (matita_arithmetics_minimization.min
                    (matita_arithmetics_nat.S i) b f)
                 m))
           (ltm :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) b m) =>
            fm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true) =>
            matita_basics_bool.match_bool cic.prop
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min i
                       (matita_arithmetics_nat.S b) f)
                    __)
                 m)
              leb
              (Hind m (matita_arithmetics_nat.S b) ltm
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (f m) fm))
              (f b))
           (eqm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   b m) =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      b x_1) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f x_1) matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f x_1) matita_basics_bool.true) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_minimization.min
                          (matita_arithmetics_nat.S i) b f)
                       x_1)))
              (eqb :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          b
                          (matita_arithmetics_minimization.min i
                             (matita_arithmetics_nat.S b) f)
                          x)
                       b))
                 (matita_arithmetics_nat.le_n b) (f b) eqb)
              m eqm)
           (matita_arithmetics_nat.le_to_or_lt_eq b m leb))
        n.

def lt_min_to_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b m)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b m) =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) m
                             (matita_arithmetics_minimization.min n b f))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) m
                                  (matita_arithmetics_minimization.min n b f)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f m) matita_basics_bool.false)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      lebm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _n __) b m) =>
      ltm :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) m
             (matita_arithmetics_minimization.min n b f)) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f m) matita_basics_bool.false)) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f m) matita_basics_bool.false)
        (fm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f m) matita_basics_bool.false))
           (matita_basics_logic.absurd
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) m
                 (matita_arithmetics_minimization.min n b f))
              ltm
              (matita_arithmetics_nat.le_to_not_lt
                 (matita_arithmetics_minimization.min n b f) m
                 (matita_arithmetics_minimization.true_to_le_min f n m b lebm
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f m) fm)))))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.false) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.false))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false)
           (f m) auto)
        (matita_basics_bool.true_or_false (f m)).

def fmin_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m (matita_arithmetics_minimization.min n b f))
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               m (matita_arithmetics_minimization.min n b f)) =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) m
                             (matita_arithmetics_nat.plus n b))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) m
                                  (matita_arithmetics_nat.plus n b)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f m) matita_basics_bool.true)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m (matita_arithmetics_minimization.min _x_365 b f))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_minimization.min _x_365 b f)) =>
                     cic.prod cic.prop cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) m
                          (matita_arithmetics_nat.plus _x_365 b))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) m
                               (matita_arithmetics_nat.plus _x_365 b)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true))))))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqmb :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                m b) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           b
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x b) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_nat.S x) b)
                 (__1 :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __1)
                         (matita_arithmetics_nat.S x) b) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f x) matita_basics_bool.true)))
           (leSb :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __)
                   (matita_arithmetics_nat.S b) b) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f b) matita_basics_bool.true))
              (matita_basics_logic.absurd
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __)
                    (matita_arithmetics_nat.S b) b)
                 leSb (matita_arithmetics_nat.not_le_Sn_n b)))
           m eqmb)
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (b :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         m (matita_arithmetics_minimization.min n0 b f))
                      (__ :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_arithmetics_nat.nat)
                              m (matita_arithmetics_minimization.min n0 b f)) =>
                       cic.prod cic.prop cic.prop
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) m
                            (matita_arithmetics_nat.plus n0 b))
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2) m
                                 (matita_arithmetics_nat.plus n0 b)) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f m) matita_basics_bool.true))))) =>
         m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m
                 (matita_arithmetics_minimization.min
                    (matita_arithmetics_nat.S n0) b f))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_minimization.min
                         (matita_arithmetics_nat.S n0) b f)) =>
               cic.prod cic.prop cic.prop
                 ((__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __3 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __2 __3) m
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S n0) b))
                 (__2 :
                    cic.Term cic.prop
                      ((__2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __3 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __2 __3) m
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S n0) b)) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __3)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f m) matita_basics_bool.true)))
           (caseb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x b) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m x)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m x) =>
                     cic.prod cic.prop cic.prop
                       ((__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3) m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S n0) b))
                       (__2 :
                          cic.Term cic.prop
                            ((__2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __3 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __2 __3) m
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.S n0) b)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true))))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m b) =>
               auto' :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.S n0) b)) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (f m)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    b
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f x) matita_basics_bool.true))
                    caseb m auto))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S n0) b f)
              (matita_arithmetics_minimization.true_min f b
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (f b) caseb)
                 (matita_arithmetics_nat.S n0)))
           (caseb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min n0
                 (matita_arithmetics_nat.S b) f)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min n0
                         (matita_arithmetics_nat.S b) f)) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m x)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            m x) =>
                     cic.prod cic.prop cic.prop
                       ((__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3) m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S n0) b))
                       (__2 :
                          cic.Term cic.prop
                            ((__2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __3 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __2 __3) m
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.S n0) b)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true))))
              (eqm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_minimization.min n0
                         (matita_arithmetics_nat.S b) f)) =>
               ltm :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.S n0) b)) =>
               Hind m (matita_arithmetics_nat.S b)
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m x))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m)
                    (matita_arithmetics_minimization.min n0
                       (matita_arithmetics_nat.S b) f)
                    eqm)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S n0) b)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) m
                          (matita_arithmetics_nat.plus n0
                             (matita_arithmetics_nat.S b))))
                    ltm
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.S n0))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m x))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus n0
                                      (matita_arithmetics_nat.S b))))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus n0
                             (matita_arithmetics_nat.S b))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m
                                      (matita_arithmetics_nat.plus n0
                                         (matita_arithmetics_nat.S b))))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus n0
                                      (matita_arithmetics_nat.S b)))))
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S n0))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.plus b n0))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.plus n0
                                      (matita_arithmetics_nat.S b))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus n0 b)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S x)
                                      (matita_arithmetics_nat.plus n0
                                         (matita_arithmetics_nat.S b))))
                                (matita_arithmetics_nat.plus_n_Sm n0 b)
                                (matita_arithmetics_nat.plus b n0)
                                (matita_arithmetics_nat.commutative_plus n0 b))
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S n0))
                             (matita_arithmetics_nat.plus_n_Sm b n0)))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S n0) b)
                       (matita_arithmetics_nat.commutative_plus
                          (matita_arithmetics_nat.S n0) b))))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S n0) b f)
              (matita_arithmetics_minimization.false_min f n0 b
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (f b) caseb)))
           (matita_basics_bool.true_or_false (f b)))
        n.

def min_exists :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (t : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) m t)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) m t) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f m) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f m) matita_basics_bool.true) =>
                        cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (k :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (b :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __2) b m)
                                (__2 :
                                   cic.Term cic.prop
                                     ((_n :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.le _n __2) b m) =>
                                 cic.prod cic.prop cic.prop
                                   (cic.prod (cic.type cic.z) cic.prop
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __3 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __3)
                                            b i)
                                         (__3 :
                                            cic.Term cic.prop
                                              ((_n :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __3 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.le _n
                                                  __3)
                                                 b i) =>
                                          cic.prod cic.prop cic.prop
                                            ((__4 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __5 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __4
                                                __5)
                                               i m)
                                            (__4 :
                                               cic.Term cic.prop
                                                 ((__4 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __5 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __4 __5)
                                                    i m) =>
                                             (A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __5 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __5)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               (f i) matita_basics_bool.false))))
                                   (__3 :
                                      cic.Term cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              ((_n :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __3 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.le _n
                                                  __3)
                                                 b i)
                                              (__3 :
                                                 cic.Term cic.prop
                                                   ((_n :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __3 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.le
                                                       _n __3)
                                                      b i) =>
                                               cic.prod cic.prop cic.prop
                                                 ((__4 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __5 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __4 __5)
                                                    i m)
                                                 (__4 :
                                                    cic.Term cic.prop
                                                      ((__4 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __5 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __4 __5)
                                                         i m) =>
                                                  (A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __5 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A)
                                                     _x __5)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (f i)
                                                    matita_basics_bool.false)))) =>
                                    cic.prod cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __4 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __4)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         t (matita_arithmetics_nat.plus k b))
                                      (__4 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __4 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __4)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              t
                                              (matita_arithmetics_nat.plus k
                                                 b)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __5 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __5)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_minimization.min
                                            k b f)
                                         m)))))))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      t : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      ltmt :
        cic.Term cic.prop
          ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.lt __ __1) m t) =>
      fm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f m) matita_basics_bool.true) =>
      k : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b m)
                 (__ :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b m) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __1) b i)
                          (__1 :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __1) b i) =>
                           cic.prod cic.prop cic.prop
                             ((__2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __3 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __2 __3) i m)
                             (__2 :
                                cic.Term cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) i m) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __3 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __3)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false))))
                    (__1 :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __1) b i)
                               (__1 :
                                  cic.Term cic.prop
                                    ((_n :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.le _n __1) b i) =>
                                cic.prod cic.prop cic.prop
                                  ((__2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __3 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __2 __3) i m)
                                  (__2 :
                                     cic.Term cic.prop
                                       ((__2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __3 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __2 __3) i
                                          m) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __3 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __3)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.false)))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          t (matita_arithmetics_nat.plus _x_365 b))
                       (__2 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               t (matita_arithmetics_nat.plus _x_365 b)) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.min _x_365 b f) m))))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         lebm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m) =>
         ismin :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         eqtb :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                t (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_minimization.min
                    matita_arithmetics_nat.O b f)
                 m))
           (matita_basics_logic.absurd
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) b m)
              lebm
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 t
                 (x_1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         t x_1) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b m)))
                 (matita_arithmetics_nat.lt_to_not_le m b
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m t))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) m b))
                       ltmt
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          t
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m t))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) m x))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m t)))
                          b
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                matita_arithmetics_nat.O)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   t x))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus
                                   matita_arithmetics_nat.O b)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      t x))
                                eqtb
                                (matita_arithmetics_nat.plus b
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.commutative_plus
                                   matita_arithmetics_nat.O b))
                             b (matita_arithmetics_nat.plus_n_O b)))))
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)
                 eqtb)))
        (d : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b m)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b m) =>
                    cic.prod cic.prop cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1) b i)
                            (__1 :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __1) b i) =>
                             cic.prod cic.prop cic.prop
                               ((__2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __3 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __2 __3) i m)
                               (__2 :
                                  cic.Term cic.prop
                                    ((__2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __3 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __2 __3) i m) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __3 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __3)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.false))))
                      (__1 :
                         cic.Term cic.prop
                           (cic.prod (cic.type cic.z) cic.prop
                              matita_arithmetics_nat.nat
                              (i :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               cic.prod cic.prop cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __1) b i)
                                 (__1 :
                                    cic.Term cic.prop
                                      ((_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __1) b i) =>
                                  cic.prod cic.prop cic.prop
                                    ((__2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __3 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __2 __3) i m)
                                    (__2 :
                                       cic.Term cic.prop
                                         ((__2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __3 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __2 __3)
                                            i m) =>
                                     (A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __3 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __3)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (f i) matita_basics_bool.false)))) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            t (matita_arithmetics_nat.plus d b))
                         (__2 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_arithmetics_nat.nat)
                                 t (matita_arithmetics_nat.plus d b)) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __3 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __3)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_minimization.min d b f) m))))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         lebm :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m) =>
         ismin :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         eqt :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                t
                (matita_arithmetics_nat.plus (matita_arithmetics_nat.S d) b)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_arithmetics_nat.lt b m)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b m)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) b m)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      b m)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S d) b f)
              m)
           (ltbm :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) b m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min d
                 (matita_arithmetics_nat.S b) f)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min d
                         (matita_arithmetics_nat.S b) f)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x m))
              (Hind (matita_arithmetics_nat.S b) ltbm
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  H :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __)
                         (matita_arithmetics_nat.S b) i) =>
                  H1 :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m) =>
                  ismin i (matita_arithmetics_nat.lt_to_le b i H) H1)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus (matita_arithmetics_nat.S d)
                       b)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.S d) b)) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.plus d
                             (matita_arithmetics_nat.S b))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus d
                          (matita_arithmetics_nat.S b))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.plus d
                                (matita_arithmetics_nat.S b))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus d
                             (matita_arithmetics_nat.S b)))
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus d b))
                       (matita_arithmetics_nat.plus_n_Sm d b))
                    t eqt))
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S d) b f)
              (matita_arithmetics_minimization.false_min f d b
                 (ismin b (matita_arithmetics_nat.le_n b) ltbm)))
           (eqbm :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   b m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x b) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x m))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       x m))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m)
                 b eqbm)
              (matita_arithmetics_minimization.min
                 (matita_arithmetics_nat.S d) b f)
              (matita_arithmetics_minimization.true_min f b
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    m
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f x) matita_basics_bool.true))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f m) fm)
                    b eqbm)
                 (matita_arithmetics_nat.S d)))
           (matita_arithmetics_nat.le_to_or_lt_eq b m lebm))
        k.

def min_not_exists :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __) b i)
                          (__ :
                             cic.Term cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __) b i) =>
                           cic.prod cic.prop cic.prop
                             ((__1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __1 __2) i
                                (matita_arithmetics_nat.plus n b))
                             (__1 :
                                cic.Term cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) i
                                     (matita_arithmetics_nat.plus n b)) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.false))))
                    (__ :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __) b i)
                               (__ :
                                  cic.Term cic.prop
                                    ((_n :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.le _n __) b i) =>
                                cic.prod cic.prop cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) i
                                     (matita_arithmetics_nat.plus n b))
                                  (__1 :
                                     cic.Term cic.prop
                                       ((__1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __1 __2) i
                                          (matita_arithmetics_nat.plus n b)) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.false)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.min n b f)
                       (matita_arithmetics_nat.plus n b))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b i)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i) =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.plus _x_365 b))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) matita_basics_bool.false))))
                 (__ :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i)
                            (__ :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __) b i) =>
                             cic.prod cic.prop cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b))
                               (__1 :
                                  cic.Term cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) i
                                       (matita_arithmetics_nat.plus _x_365 b)) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.false)))) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.min _x_365 b f)
                    (matita_arithmetics_nat.plus _x_365 b)))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            matita_arithmetics_nat.O b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 matita_arithmetics_nat.O b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           b
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus b matita_arithmetics_nat.O)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    b x))
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 b
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       b x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    b)
                 (matita_arithmetics_nat.plus b matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus_n_O b))
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)
              (matita_arithmetics_nat.commutative_plus
                 matita_arithmetics_nat.O b))
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f)
           (matita_arithmetics_minimization.min_O_f f b))
        (p : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i) =>
                          cic.prod cic.prop cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.plus p b))
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus p b)) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) matita_basics_bool.false))))
                   (__ :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop
                           matita_arithmetics_nat.nat
                           (i :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            cic.prod cic.prop cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i)
                              (__ :
                                 cic.Term cic.prop
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) b i) =>
                               cic.prod cic.prop cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus p b))
                                 (__1 :
                                    cic.Term cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) i
                                         (matita_arithmetics_nat.plus p b)) =>
                                  (A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __2 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __2)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (f i) matita_basics_bool.false)))) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.min p b f)
                      (matita_arithmetics_nat.plus p b)))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ffalse :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S p) b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.S p) b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min p
              (matita_arithmetics_nat.S b) f)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_minimization.min p
                      (matita_arithmetics_nat.S b) f)) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S p) b)))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus p (matita_arithmetics_nat.S b))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.plus p
                         (matita_arithmetics_nat.S b))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_nat.plus (matita_arithmetics_nat.S p)
                       b)))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus b (matita_arithmetics_nat.S p))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus p
                          (matita_arithmetics_nat.S b))
                       x))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus b
                       (matita_arithmetics_nat.S p))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S p))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.S p)))
                    (matita_arithmetics_nat.plus p
                       (matita_arithmetics_nat.S b))
                    (matita_basics_logic.rewrite_l
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus p b))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S p))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b p)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S x)
                                (matita_arithmetics_nat.plus b
                                   (matita_arithmetics_nat.S p))))
                          (matita_arithmetics_nat.plus_n_Sm b p)
                          (matita_arithmetics_nat.plus p b)
                          (matita_arithmetics_nat.commutative_plus b p))
                       (matita_arithmetics_nat.plus p
                          (matita_arithmetics_nat.S b))
                       (matita_arithmetics_nat.plus_n_Sm p b)))
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S p) b)
                 (matita_arithmetics_nat.commutative_plus
                    (matita_arithmetics_nat.S p) b))
              (matita_arithmetics_minimization.min p
                 (matita_arithmetics_nat.S b) f)
              (Hind (matita_arithmetics_nat.S b)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  H :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __)
                         (matita_arithmetics_nat.S b) i) =>
                  H1 :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         (matita_arithmetics_nat.plus p
                            (matita_arithmetics_nat.S b))) =>
                  ffalse i (matita_arithmetics_nat.lt_to_le b i H)
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.plus p
                                (matita_arithmetics_nat.S b))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S p) b)))
                       H1
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S p))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i
                                      (matita_arithmetics_nat.plus p
                                         (matita_arithmetics_nat.S b))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i x))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S p))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S p))))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S p)))))
                             (matita_arithmetics_nat.plus p
                                (matita_arithmetics_nat.S b))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.plus p b))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S p))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus b p)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S x)
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S p))))
                                   (matita_arithmetics_nat.plus_n_Sm b p)
                                   (matita_arithmetics_nat.plus p b)
                                   (matita_arithmetics_nat.commutative_plus b
                                      p))
                                (matita_arithmetics_nat.plus p
                                   (matita_arithmetics_nat.S b))
                                (matita_arithmetics_nat.plus_n_Sm p b)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S p) b)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.S p) b))))))
           (matita_arithmetics_minimization.min (matita_arithmetics_nat.S p)
              b f)
           (matita_arithmetics_minimization.false_min f p b
              (ffalse b (matita_arithmetics_nat.le_n b)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) b
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.plus b
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.S p))))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((__ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __ __1) b
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S p) b)))
                    (matita_arithmetics_nat.lt_plus_Sn_r b
                       matita_arithmetics_nat.O p)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.plus
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.S p)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) b x))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) b
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S p) b)))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S p))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.plus
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_nat.S p)))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b x))))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S p)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) b
                                         (matita_arithmetics_nat.plus b x)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) b
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S p))))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S p)))))
                             (matita_arithmetics_nat.plus
                                matita_arithmetics_nat.O
                                (matita_arithmetics_nat.S p))
                             (matita_arithmetics_nat.plus_O_n
                                (matita_arithmetics_nat.S p)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S p) b)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.S p) b))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.plus b
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.S p))
                       (matita_arithmetics_nat.associative_plus b
                          matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S p)))))))
        n.

def let_m :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.min n b f.

def let_m1 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (_x_365 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.min _x_365 b f.

def let_m2 :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.min i b f.

def let_clause_1012 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (b :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f
                                (matita_arithmetics_minimization.let_m2 f n i
                                   b))
                             matita_basics_bool.false)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f
                                     (matita_arithmetics_minimization.let_m2
                                        f n i b))
                                  matita_basics_bool.false) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_minimization.let_m2 f n i b)
                             (matita_arithmetics_nat.plus i b))))
                    (Hind :
                       cic.Term cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (b :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f
                                     (matita_arithmetics_minimization.let_m2
                                        f n i b))
                                  matita_basics_bool.false)
                               (__ :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (f
                                          (matita_arithmetics_minimization.let_m2
                                             f n i b))
                                       matita_basics_bool.false) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_minimization.let_m2 f n
                                     i b)
                                  (matita_arithmetics_nat.plus i b)))) =>
                     cic.prod (cic.type cic.z) cic.prop
                       matita_arithmetics_nat.nat
                       (b :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f b) matita_basics_bool.true)
                          (fb :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f b) matita_basics_bool.true) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f b) matita_basics_bool.false)
                             (eqm :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f b) matita_basics_bool.false) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.false
                                matita_basics_bool.true))))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hind :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f (matita_arithmetics_minimization.let_m2 f n i b))
                   matita_basics_bool.false)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (f (matita_arithmetics_minimization.let_m2 f n i b))
                        matita_basics_bool.false) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.let_m2 f n i b)
                   (matita_arithmetics_nat.plus i b)))) =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      fb :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f b) matita_basics_bool.true) =>
      eqm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f b) matita_basics_bool.false) =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        (f b)
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              x matita_basics_bool.true))
        fb matita_basics_bool.false eqm.

def fmin_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f (matita_arithmetics_minimization.let_m f n b))
                       matita_basics_bool.false)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f (matita_arithmetics_minimization.let_m f n b))
                            matita_basics_bool.false) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_minimization.let_m f n b)
                       (matita_arithmetics_nat.plus n b))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f (matita_arithmetics_minimization.let_m1 f n _x_365 b))
                    matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f
                            (matita_arithmetics_minimization.let_m1 f n
                               _x_365 b))
                         matita_basics_bool.false) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.let_m1 f n _x_365 b)
                    (matita_arithmetics_nat.plus _x_365 b)))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.eq_f
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            matita_arithmetics_minimization.min matita_arithmetics_nat.O b f)
           (f
              (matita_arithmetics_minimization.min matita_arithmetics_nat.O b
                 f))
           matita_basics_bool.false)
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f (matita_arithmetics_minimization.let_m2 f n i b))
                      matita_basics_bool.false)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (f
                              (matita_arithmetics_minimization.let_m2 f n i b))
                           matita_basics_bool.false) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.let_m2 f n i b)
                      (matita_arithmetics_nat.plus i b)))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min i
                          (matita_arithmetics_nat.S b) f)
                       (f b)))
                 matita_basics_bool.false)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             matita_arithmetics_nat.nat)
                            b
                            (matita_arithmetics_minimization.min i
                               (matita_arithmetics_nat.S b) f)
                            (f b)))
                      matita_basics_bool.false) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min i
                       (matita_arithmetics_nat.S b) f)
                    (f b))
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus i b))))
           (fb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             b
                             (matita_arithmetics_minimization.min i
                                (matita_arithmetics_nat.S b) f)
                             x))
                       matita_basics_bool.false)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_arithmetics_nat.nat)
                                  b
                                  (matita_arithmetics_minimization.min i
                                     (matita_arithmetics_nat.S b) f)
                                  x))
                            matita_basics_bool.false) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          b
                          (matita_arithmetics_minimization.min i
                             (matita_arithmetics_nat.S b) f)
                          x)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus i b)))))
              (eqm :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus i b))))
                 (matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f b) matita_basics_bool.true)
                    fb
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                matita_basics_bool.false)))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f b) matita_basics_bool.true)))
                       matita_basics_bool.not_eq_true_false
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_A : cic.Univ cic.prop =>
                                     matita_basics_logic.Not _A)
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         matita_basics_bool.true x)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_A : cic.Univ cic.prop =>
                                     matita_basics_logic.Not _A)
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (f b) matita_basics_bool.true)))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_A : cic.Univ cic.prop =>
                                        matita_basics_logic.Not _A)
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            matita_basics_bool.true
                                            matita_basics_bool.true)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((_A : cic.Univ cic.prop =>
                                        matita_basics_logic.Not _A)
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            x matita_basics_bool.true)))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_A : cic.Univ cic.prop =>
                                     matita_basics_logic.Not _A)
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         matita_basics_bool.true
                                         matita_basics_bool.true))))
                             (f b)
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.false
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (f b) x))
                                eqm matita_basics_bool.true
                                (matita_arithmetics_minimization.let_clause_1012
                                   f n i Hind b fb eqm)))
                          matita_basics_bool.false
                          (matita_arithmetics_minimization.let_clause_1012 f
                             n i Hind b fb eqm)))))
              (f b) fb)
           (fb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             b
                             (matita_arithmetics_minimization.min i
                                (matita_arithmetics_nat.S b) f)
                             x))
                       matita_basics_bool.false)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_arithmetics_nat.nat)
                                  b
                                  (matita_arithmetics_minimization.min i
                                     (matita_arithmetics_nat.S b) f)
                                  x))
                            matita_basics_bool.false) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          b
                          (matita_arithmetics_minimization.min i
                             (matita_arithmetics_nat.S b) f)
                          x)
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus i b)))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus i (matita_arithmetics_nat.S b))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus i
                            (matita_arithmetics_nat.S b))) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f
                             (matita_arithmetics_minimization.min i
                                (matita_arithmetics_nat.S b) f))
                          matita_basics_bool.false)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f
                                  (matita_arithmetics_minimization.min i
                                     (matita_arithmetics_nat.S b) f))
                               matita_basics_bool.false) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.min i
                             (matita_arithmetics_nat.S b) f)
                          x)))
                 (Hind (matita_arithmetics_nat.S b))
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus i b))
                 (matita_arithmetics_nat.plus_n_Sm i b))
              (f b) fb)
           (matita_basics_bool.true_or_false (f b)))
        n.

min_spec :
  cic.Term (cic.type cic.z)
    (cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
       (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) (cic.type cic.z) matita_arithmetics_nat.nat
          (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.prod (cic.type cic.z) (cic.type cic.z)
             (cic.prod (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat
                (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_basics_bool.bool))
             (_f :
                cic.Term (cic.type cic.z)
                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                     matita_arithmetics_nat.nat
                     (__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_basics_bool.bool)) =>
              cic.prod (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat
                (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.univ cic.prop))))).

found_min_spec :
  cic.Term cic.prop
    (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
       (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
          (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.prod (cic.type cic.z) cic.prop
             (cic.prod (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat
                (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_basics_bool.bool))
             (f :
                cic.Term (cic.type cic.z)
                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                     matita_arithmetics_nat.nat
                     (__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_basics_bool.bool)) =>
              cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.le b m)
                   (__ : cic.Term cic.prop (matita_arithmetics_nat.le b m) =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.lt m
                         (matita_arithmetics_nat.plus n b))
                      (__1 :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.lt m
                              (matita_arithmetics_nat.plus n b)) =>
                       cic.prod cic.prop cic.prop
                         (matita_basics_logic.eq
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f m) matita_basics_bool.true)
                         (__2 :
                            cic.Term cic.prop
                              (matita_basics_logic.eq
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f m) matita_basics_bool.true) =>
                          cic.prod cic.prop cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  (matita_arithmetics_nat.le b i)
                                  (__3 :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le b i) =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt i m)
                                     (__4 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt i m) =>
                                      matita_basics_logic.eq
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (f i) matita_basics_bool.false))))
                            (__3 :
                               cic.Term cic.prop
                                 (cic.prod (cic.type cic.z) cic.prop
                                    matita_arithmetics_nat.nat
                                    (i :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     cic.prod cic.prop cic.prop
                                       (matita_arithmetics_nat.le b i)
                                       (__3 :
                                          cic.Term cic.prop
                                            (matita_arithmetics_nat.le b i) =>
                                        cic.prod cic.prop cic.prop
                                          (matita_arithmetics_nat.lt i m)
                                          (__4 :
                                             cic.Term cic.prop
                                               (matita_arithmetics_nat.lt i m) =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (f i) matita_basics_bool.false)))) =>
                             matita_arithmetics_minimization.min_spec n b f m))))))))).

not_found_min_spec :
  cic.Term cic.prop
    (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
       (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
        cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
          (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           cic.prod (cic.type cic.z) cic.prop
             (cic.prod (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat
                (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_basics_bool.bool))
             (f :
                cic.Term (cic.type cic.z)
                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                     matita_arithmetics_nat.nat
                     (__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_basics_bool.bool)) =>
              cic.prod cic.prop cic.prop
                (cic.prod (cic.type cic.z) cic.prop
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le b i)
                      (__ :
                         cic.Term cic.prop (matita_arithmetics_nat.le b i) =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.lt i
                            (matita_arithmetics_nat.plus n b))
                         (__1 :
                            cic.Term cic.prop
                              (matita_arithmetics_nat.lt i
                                 (matita_arithmetics_nat.plus n b)) =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.false))))
                (__ :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop
                           (matita_arithmetics_nat.le b i)
                           (__ :
                              cic.Term cic.prop
                                (matita_arithmetics_nat.le b i) =>
                            cic.prod cic.prop cic.prop
                              (matita_arithmetics_nat.lt i
                                 (matita_arithmetics_nat.plus n b))
                              (__1 :
                                 cic.Term cic.prop
                                   (matita_arithmetics_nat.lt i
                                      (matita_arithmetics_nat.plus n b)) =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f i) matita_basics_bool.false)))) =>
                 matita_arithmetics_minimization.min_spec n b f
                   (matita_arithmetics_nat.plus n b)))))).

def match_min_spec_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type cic.z)
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ cic.prop)))
                    (return_type :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type cic.z)
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ cic.prop))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop cic.prop
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop cic.prop
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Prop _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Prop _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.prod (cic.type cic.z)
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.prod (cic.type cic.z)
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod (cic.type cic.z)
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop
                                   (cic.type
                                      (cic.s
                                         (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop
                                      (cic.type
                                         (cic.s
                                            (cic.s
                                               (cic.s (cic.s (cic.s cic.z))))))
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod (cic.type cic.z)
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z))))))
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s
                                              (cic.s
                                                 (cic.s (cic.s (cic.s cic.z))))))
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop
                                           (cic.type
                                              (cic.s
                                                 (cic.s
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))))
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z)
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type5 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type5 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.prod (cic.type cic.z)
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                    (return_type :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.prod (cic.type cic.z)
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop
                                   (cic.type
                                      (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop
                                      (cic.type
                                         (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod (cic.type cic.z)
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z)))))
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop
                                           (cic.type
                                              (cic.s
                                                 (cic.s (cic.s (cic.s cic.z)))))
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type4 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type4 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))))
                    (return_type :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))))) =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type3 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type3 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z))))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z)))))) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type2 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type2 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.prod (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s cic.z)))))
                    (return_type :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type (cic.s cic.z))))) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop (cic.type (cic.s cic.z))
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop
                                      (cic.type (cic.s cic.z))
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s cic.z))
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop
                                           (cic.type (cic.s cic.z))
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term (cic.type (cic.s cic.z))
                               (cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type1 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type1 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def match_min_spec_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type cic.z))))
                    (return_type :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                            matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type cic.z)))) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_arithmetics_nat.le _b m)
                             (__ :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le _b m) =>
                              cic.prod cic.prop (cic.type cic.z)
                                (matita_arithmetics_nat.lt m
                                   (matita_arithmetics_nat.plus _n _b))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop (cic.type cic.z)
                                   (matita_basics_logic.eq
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop (cic.type cic.z)
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            (matita_arithmetics_nat.le _b i)
                                            (__3 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               (matita_arithmetics_nat.lt i m)
                                               (__4 :
                                                  cic.Term cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m) =>
                                                matita_basics_logic.eq
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (__3 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       return_type m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m __ __1 __2 __3)))))))
                       (case_found_min_spec :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop (cic.type cic.z)
                                  (matita_arithmetics_nat.le _b m)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le _b m) =>
                                   cic.prod cic.prop (cic.type cic.z)
                                     (matita_arithmetics_nat.lt m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (__1 :
                                        cic.Term cic.prop
                                          (matita_arithmetics_nat.lt m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop (cic.type cic.z)
                                        (matita_basics_logic.eq
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop (cic.type cic.z)
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 (matita_arithmetics_nat.le
                                                    _b i)
                                                 (__3 :
                                                    cic.Term cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       i m)
                                                    (__4 :
                                                       cic.Term cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m) =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (__3 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      (matita_arithmetics_nat.le
                                                         _b i)
                                                      (__3 :
                                                         cic.Term cic.prop
                                                           (matita_arithmetics_nat.le
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            i m)
                                                         (__4 :
                                                            cic.Term cic.prop
                                                              (matita_arithmetics_nat.lt
                                                                 i m) =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            return_type m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m __ __1 __2 __3))))))) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.prod cic.prop (cic.type cic.z)
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_nat.le _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        (matita_arithmetics_nat.le _b i) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_nat.lt i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              return_type (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f __)))
                          (case_not_found_min_spec :
                             cic.Term (cic.type cic.z)
                               (cic.prod cic.prop (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        (matita_arithmetics_nat.le _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             (matita_arithmetics_nat.le _b i) =>
                                         cic.prod cic.prop cic.prop
                                           (matita_arithmetics_nat.lt i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            matita_basics_logic.eq
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             (matita_arithmetics_nat.le _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  (matita_arithmetics_nat.le
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                (matita_arithmetics_nat.lt i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     (matita_arithmetics_nat.lt
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 matita_basics_logic.eq
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   return_type
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f __))) =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop (cic.type cic.z)
                                (matita_arithmetics_minimization.min_spec _n
                                   _b _f __)
                                (z :
                                   cic.Term cic.prop
                                     (matita_arithmetics_minimization.min_spec
                                        _n _b _f __) =>
                                 return_type __ z))))))))).

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, m,
  __, __1, __2, __3 ]
  match_min_spec_Type0 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ _n, _b, _f, return_type, case_found_min_spec, case_not_found_min_spec, __ ]
  match_min_spec_Type0 _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def filter_min_spec_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod (cic.type cic.z) cic.prop
                       (cic.prod cic.prop (cic.type cic.z)
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ cic.prop))
                       (return_type :
                          cic.Term (cic.type cic.z)
                            (cic.prod cic.prop (cic.type cic.z)
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ cic.prop)) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Prop (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Prop (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z)
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                       (return_type :
                          cic.Term
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                        cic.prod
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type5 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type5 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (return_type :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                        cic.prod
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type4 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type4 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                       (return_type :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type3 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type3 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))
                       (return_type :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type2 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type2 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type (cic.s cic.z))))
                       (return_type :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type (cic.s cic.z)))) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type (cic.s cic.z))
                               (cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type1 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type1 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def filter_min_spec_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                       (cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_arithmetics_minimization.min_spec _n _b _f
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __) =>
                           cic.univ (cic.type cic.z)))
                       (return_type :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_arithmetics_minimization.min_spec _n
                                  _b _f __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_arithmetics_minimization.min_spec
                                       _n _b _f __) =>
                                cic.univ (cic.type cic.z))) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.prod cic.prop (cic.type cic.z)
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type cic.z)
                               (cic.prod cic.prop (cic.type cic.z)
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_arithmetics_minimization.min_spec
                                          _n _b _f __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                             (z :
                                cic.Term cic.prop
                                  (matita_arithmetics_minimization.min_spec
                                     _n _b _f __) =>
                              return_type z)))))))).

[ n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec_Type0 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ n, b, f, __, return_type, return ]
  filter_min_spec_Type0 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def match_min_spec :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) ->
      return_type :
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
         z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.min_spec _n _b _f __) ->
         cic.Univ return_sort) ->
      case_found_min_spec :
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le _b m) ->
         __1 :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b)) ->
         __2 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (_f m) matita_basics_bool.true) ->
         __3 :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.le _b i)
                   (__3 :
                      cic.Term cic.prop (matita_arithmetics_nat.le _b i) =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.lt i m)
                      (__4 :
                         cic.Term cic.prop (matita_arithmetics_nat.lt i m) =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (_f i) matita_basics_bool.false)))) ->
         cic.Term return_sort
           (return_type m
              (matita_arithmetics_minimization.found_min_spec _n _b _f m __
                 __1 __2 __3))) ->
      case_not_found_min_spec :
        (__ :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop (matita_arithmetics_nat.le _b i)
                   (__ :
                      cic.Term cic.prop (matita_arithmetics_nat.le _b i) =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.lt i
                         (matita_arithmetics_nat.plus _n _b))
                      (__1 :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.lt i
                              (matita_arithmetics_nat.plus _n _b)) =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (_f i) matita_basics_bool.false)))) ->
         cic.Term return_sort
           (return_type (matita_arithmetics_nat.plus _n _b)
              (matita_arithmetics_minimization.not_found_min_spec _n _b _f __))) ->
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      z :
        cic.Term cic.prop
          (matita_arithmetics_minimization.min_spec _n _b _f __) ->
      cic.Term return_sort (return_type __ z).

[  ] match_min_spec cic.prop -->
  matita_arithmetics_minimization.match_min_spec_Prop.

[  ]
  match_min_spec (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_minimization.match_min_spec_Type5.

[  ] match_min_spec (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_minimization.match_min_spec_Type4.

[  ] match_min_spec (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_minimization.match_min_spec_Type3.

[  ] match_min_spec (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_minimization.match_min_spec_Type2.

[  ] match_min_spec (cic.type (cic.s cic.z)) -->
  matita_arithmetics_minimization.match_min_spec_Type1.

[  ] match_min_spec (cic.type cic.z) -->
  matita_arithmetics_minimization.match_min_spec_Type0.

[ return_sort, _n, _b, _f, return_type, case_found_min_spec,
  case_not_found_min_spec, m, __, __1, __2, __3 ]
  match_min_spec return_sort _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (m)
    (matita_arithmetics_minimization.found_min_spec _n _b _f m __ __1 __2 __3) -->
  case_found_min_spec m __ __1 __2 __3.

[ return_sort, _n, _b, _f, return_type, case_found_min_spec,
  case_not_found_min_spec, __ ]
  match_min_spec return_sort _n _b _f return_type case_found_min_spec
    case_not_found_min_spec (matita_arithmetics_nat.plus _n _b)
    (matita_arithmetics_minimization.not_found_min_spec _n _b _f __) -->
  case_not_found_min_spec __.

def filter_min_spec :
      return_sort : cic.Sort ->
      _n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      _f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) ->
      __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat ->
      return_type :
        (z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.min_spec _n _b _f __) ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term cic.prop
             (matita_arithmetics_minimization.min_spec _n _b _f __) ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term cic.prop
          (matita_arithmetics_minimization.min_spec _n _b _f __) ->
      cic.Term return_sort (return_type z).

[  ] filter_min_spec cic.prop -->
  matita_arithmetics_minimization.filter_min_spec_Prop.

[  ]
  filter_min_spec (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_arithmetics_minimization.filter_min_spec_Type5.

[  ] filter_min_spec (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_arithmetics_minimization.filter_min_spec_Type4.

[  ] filter_min_spec (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_arithmetics_minimization.filter_min_spec_Type3.

[  ] filter_min_spec (cic.type (cic.s (cic.s cic.z))) -->
  matita_arithmetics_minimization.filter_min_spec_Type2.

[  ] filter_min_spec (cic.type (cic.s cic.z)) -->
  matita_arithmetics_minimization.filter_min_spec_Type1.

[  ] filter_min_spec (cic.type cic.z) -->
  matita_arithmetics_minimization.filter_min_spec_Type0.

[ return_sort1, n, b, f, m, __, __1, __2, __3, return_type, return ]
  filter_min_spec return_sort1 (n) (b) (f) (m) return_type return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3) -->
  return
    (matita_arithmetics_minimization.found_min_spec n b f m __ __1 __2 __3).

[ return_sort1, n, b, f, __, return_type, return ]
  filter_min_spec return_sort1 (n) (b) (f) (matita_arithmetics_nat.plus n b)
    return_type return
    (matita_arithmetics_minimization.not_found_min_spec n b f __) -->
  return (matita_arithmetics_minimization.not_found_min_spec n b f __).

def min_spec_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (x_1075 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((_n1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _b1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _f1 :
                              cic.Term (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   matita_arithmetics_nat.nat
                                   (__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.bool)) =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_minimization.min_spec _n1 _b1
                              _f1 __)
                             _n _b _f x_1075)
                          (_x_1076 :
                             cic.Term cic.prop
                               ((_n1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _b1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _f1 :
                                   cic.Term (cic.type cic.z)
                                     (cic.prod (cic.type cic.z)
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat
                                        (__ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_basics_bool.bool)) =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_minimization.min_spec _n1
                                   _b1 _f1 __)
                                  _n _b _f x_1075) =>
                           cic.univ cic.prop)))
                    (Q_ :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat
                            (x_1075 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((_n1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _b1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _f1 :
                                   cic.Term (cic.type cic.z)
                                     (cic.prod (cic.type cic.z)
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat
                                        (__ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_basics_bool.bool)) =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_minimization.min_spec _n1
                                   _b1 _f1 __)
                                  _n _b _f x_1075)
                               (_x_1076 :
                                  cic.Term cic.prop
                                    ((_n1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      _b1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      _f1 :
                                        cic.Term (cic.type cic.z)
                                          (cic.prod (cic.type cic.z)
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat
                                             (__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_bool.bool)) =>
                                      __ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_minimization.min_spec
                                        _n1 _b1 _f1 __)
                                       _n _b _f x_1075) =>
                                cic.univ cic.prop))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n1 __) _b m)
                             (x_1080 :
                                cic.Term cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n1 __) _b m) =>
                              cic.prod cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus _n _b))
                                (x_1079 :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (x_1078 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop cic.prop
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            ((_n1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n1
                                                __)
                                               _b i)
                                            (__ :
                                               cic.Term cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               ((__1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __2 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt
                                                   __1 __2)
                                                  i m)
                                               (__1 :
                                                  cic.Term cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m) =>
                                                (A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __2 :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __2)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (x_1077 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       (x_1075 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _x_1076 :
                                          cic.Term cic.prop
                                            (matita_arithmetics_minimization.min_spec
                                               _n _b _f x_1075) =>
                                        Q_ x_1075 _x_1076) m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m x_1080 x_1079 x_1078
                                            x_1077)))))))
                       (_H_found_min_spec :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n1 __) _b m)
                                  (x_1080 :
                                     cic.Term cic.prop
                                       ((_n1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.le _n1 __) _b
                                          m) =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (x_1079 :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (x_1078 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (x_1077 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i)
                                                      (__ :
                                                         cic.Term cic.prop
                                                           ((_n1 :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             __ :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_arithmetics_nat.le
                                                               _n1 __)
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m)
                                                         (__1 :
                                                            cic.Term cic.prop
                                                              ((__1 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                __2 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_arithmetics_nat.lt
                                                                  __1 __2)
                                                                 i m) =>
                                                          (A :
                                                             cic.Univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                           _x :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           matita_basics_logic.eq
                                                             (cic.lift
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A)
                                                             _x __2)
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            (x_1075 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             _x_1076 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_minimization.min_spec
                                                    _n _b _f x_1075) =>
                                             Q_ x_1075 _x_1076) m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m x_1080 x_1079
                                                 x_1078 x_1077))))))) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   ((_n1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n1 __) _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i) =>
                                    cic.prod cic.prop cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (x_1081 :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i) =>
                                         cic.prod cic.prop cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              (x_1075 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _x_1076 :
                                 cic.Term cic.prop
                                   (matita_arithmetics_minimization.min_spec
                                      _n _b _f x_1075) =>
                               Q_ x_1075 _x_1076)
                                (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f x_1081)))
                          (_H_not_found_min_spec :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i) =>
                                         cic.prod cic.prop cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (x_1081 :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  ((_n1 :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    matita_arithmetics_nat.le
                                                      _n1 __)
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     ((__1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __2 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __1 __2)
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 (A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __2 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A)
                                                    _x __2)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   (x_1075 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _x_1076 :
                                      cic.Term cic.prop
                                        (matita_arithmetics_minimization.min_spec
                                           _n _b _f x_1075) =>
                                    Q_ x_1075 _x_1076)
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f x_1081))) =>
                           cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (x_1075 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((_n1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _b1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _f1 :
                                    cic.Term (cic.type cic.z)
                                      (cic.prod (cic.type cic.z)
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat
                                         (__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_basics_bool.bool)) =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_minimization.min_spec
                                    _n1 _b1 _f1 __)
                                   _n _b _f x_1075)
                                (x_1076 :
                                   cic.Term cic.prop
                                     ((_n1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _b1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _f1 :
                                         cic.Term (cic.type cic.z)
                                           (cic.prod (cic.type cic.z)
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat
                                              (__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_basics_bool.bool)) =>
                                       __ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_minimization.min_spec
                                         _n1 _b1 _f1 __)
                                        _n _b _f x_1075) =>
                                 (x_10751 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _x_1076 :
                                    cic.Term cic.prop
                                      (matita_arithmetics_minimization.min_spec
                                         _n _b _f x_10751) =>
                                  Q_ x_10751 _x_1076) x_1075 x_1076))))))))).

def min_spec_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (_b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (x_1075 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((_n1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _b1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            _f1 :
                              cic.Term (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   matita_arithmetics_nat.nat
                                   (__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.bool)) =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_minimization.min_spec _n1 _b1
                              _f1 __)
                             _n _b _f x_1075)
                          (_x_1076 :
                             cic.Term cic.prop
                               ((_n1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _b1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _f1 :
                                   cic.Term (cic.type cic.z)
                                     (cic.prod (cic.type cic.z)
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat
                                        (__ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_basics_bool.bool)) =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_minimization.min_spec _n1
                                   _b1 _f1 __)
                                  _n _b _f x_1075) =>
                           cic.univ cic.prop)))
                    (Q_ :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            matita_arithmetics_nat.nat
                            (x_1075 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((_n1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _b1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 _f1 :
                                   cic.Term (cic.type cic.z)
                                     (cic.prod (cic.type cic.z)
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat
                                        (__ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_basics_bool.bool)) =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_minimization.min_spec _n1
                                   _b1 _f1 __)
                                  _n _b _f x_1075)
                               (_x_1076 :
                                  cic.Term cic.prop
                                    ((_n1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      _b1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      _f1 :
                                        cic.Term (cic.type cic.z)
                                          (cic.prod (cic.type cic.z)
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat
                                             (__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_bool.bool)) =>
                                      __ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_minimization.min_spec
                                        _n1 _b1 _f1 __)
                                       _n _b _f x_1075) =>
                                cic.univ cic.prop))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (m :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n1 __) _b m)
                             (x_1080 :
                                cic.Term cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n1 __) _b m) =>
                              cic.prod cic.prop cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) m
                                   (matita_arithmetics_nat.plus _n _b))
                                (x_1079 :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m
                                        (matita_arithmetics_nat.plus _n _b)) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (_f m) matita_basics_bool.true)
                                   (x_1078 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true) =>
                                    cic.prod cic.prop cic.prop
                                      (cic.prod (cic.type cic.z) cic.prop
                                         matita_arithmetics_nat.nat
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.prod cic.prop cic.prop
                                            ((_n1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n1
                                                __)
                                               _b i)
                                            (__ :
                                               cic.Term cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i) =>
                                             cic.prod cic.prop cic.prop
                                               ((__1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __2 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt
                                                   __1 __2)
                                                  i m)
                                               (__1 :
                                                  cic.Term cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m) =>
                                                (A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __2 :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __2)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (_f i)
                                                  matita_basics_bool.false))))
                                      (x_1077 :
                                         cic.Term cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false)))) =>
                                       (x_1075 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        _x_1076 :
                                          cic.Term cic.prop
                                            (matita_arithmetics_minimization.min_spec
                                               _n _b _f x_1075) =>
                                        Q_ x_1075 _x_1076) m
                                         (matita_arithmetics_minimization.found_min_spec
                                            _n _b _f m x_1080 x_1079 x_1078
                                            x_1077)))))))
                       (_H_found_min_spec :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (m :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((_n1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n1 __) _b m)
                                  (x_1080 :
                                     cic.Term cic.prop
                                       ((_n1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.le _n1 __) _b
                                          m) =>
                                   cic.prod cic.prop cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) m
                                        (matita_arithmetics_nat.plus _n _b))
                                     (x_1079 :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             m
                                             (matita_arithmetics_nat.plus _n
                                                _b)) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (_f m) matita_basics_bool.true)
                                        (x_1078 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (_f m)
                                                matita_basics_bool.true) =>
                                         cic.prod cic.prop cic.prop
                                           (cic.prod (cic.type cic.z)
                                              cic.prop
                                              matita_arithmetics_nat.nat
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               cic.prod cic.prop cic.prop
                                                 ((_n1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n1 __)
                                                    _b i)
                                                 (__ :
                                                    cic.Term cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((__1 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __1 __2)
                                                       i m)
                                                    (__1 :
                                                       cic.Term cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m) =>
                                                     (A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_basics_bool.bool)
                                                       (_f i)
                                                       matita_basics_bool.false))))
                                           (x_1077 :
                                              cic.Term cic.prop
                                                (cic.prod (cic.type cic.z)
                                                   cic.prop
                                                   matita_arithmetics_nat.nat
                                                   (i :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      ((_n1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __ :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n1 __)
                                                         _b i)
                                                      (__ :
                                                         cic.Term cic.prop
                                                           ((_n1 :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             __ :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_arithmetics_nat.le
                                                               _n1 __)
                                                              _b i) =>
                                                       cic.prod cic.prop
                                                         cic.prop
                                                         ((__1 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  cic.z)
                                                               matita_arithmetics_nat.nat =>
                                                           matita_arithmetics_nat.lt
                                                             __1 __2)
                                                            i m)
                                                         (__1 :
                                                            cic.Term cic.prop
                                                              ((__1 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                __2 :
                                                                  cic.Term
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_arithmetics_nat.lt
                                                                  __1 __2)
                                                                 i m) =>
                                                          (A :
                                                             cic.Univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                           _x :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           __2 :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           matita_basics_logic.eq
                                                             (cic.lift
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A)
                                                             _x __2)
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_basics_bool.bool)
                                                            (_f i)
                                                            matita_basics_bool.false)))) =>
                                            (x_1075 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             _x_1076 :
                                               cic.Term cic.prop
                                                 (matita_arithmetics_minimization.min_spec
                                                    _n _b _f x_1075) =>
                                             Q_ x_1075 _x_1076) m
                                              (matita_arithmetics_minimization.found_min_spec
                                                 _n _b _f m x_1080 x_1079
                                                 x_1078 x_1077))))))) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   ((_n1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n1 __) _b i)
                                   (__ :
                                      cic.Term cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i) =>
                                    cic.prod cic.prop cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) i
                                         (matita_arithmetics_nat.plus _n _b))
                                      (__1 :
                                         cic.Term cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (_f i) matita_basics_bool.false))))
                             (x_1081 :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i) =>
                                         cic.prod cic.prop cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false)))) =>
                              (x_1075 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               _x_1076 :
                                 cic.Term cic.prop
                                   (matita_arithmetics_minimization.min_spec
                                      _n _b _f x_1075) =>
                               Q_ x_1075 _x_1076)
                                (matita_arithmetics_nat.plus _n _b)
                                (matita_arithmetics_minimization.not_found_min_spec
                                   _n _b _f x_1081)))
                          (_H_not_found_min_spec :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        ((_n1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n1 __)
                                           _b i)
                                        (__ :
                                           cic.Term cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i) =>
                                         cic.prod cic.prop cic.prop
                                           ((__1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __1
                                               __2)
                                              i
                                              (matita_arithmetics_nat.plus _n
                                                 _b))
                                           (__1 :
                                              cic.Term cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b)) =>
                                            (A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (_f i) matita_basics_bool.false))))
                                  (x_1081 :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             ((_n1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n1
                                                 __)
                                                _b i)
                                             (__ :
                                                cic.Term cic.prop
                                                  ((_n1 :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    matita_arithmetics_nat.le
                                                      _n1 __)
                                                     _b i) =>
                                              cic.prod cic.prop cic.prop
                                                ((__1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __1 __2)
                                                   i
                                                   (matita_arithmetics_nat.plus
                                                      _n _b))
                                                (__1 :
                                                   cic.Term cic.prop
                                                     ((__1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __2 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __1 __2)
                                                        i
                                                        (matita_arithmetics_nat.plus
                                                           _n _b)) =>
                                                 (A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __2 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A)
                                                    _x __2)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_basics_bool.bool)
                                                   (_f i)
                                                   matita_basics_bool.false)))) =>
                                   (x_1075 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    _x_1076 :
                                      cic.Term cic.prop
                                        (matita_arithmetics_minimization.min_spec
                                           _n _b _f x_1075) =>
                                    Q_ x_1075 _x_1076)
                                     (matita_arithmetics_nat.plus _n _b)
                                     (matita_arithmetics_minimization.not_found_min_spec
                                        _n _b _f x_1081))) =>
                           cic.prod (cic.type cic.z) cic.prop
                             matita_arithmetics_nat.nat
                             (x_1075 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop
                                ((_n1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _b1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _f1 :
                                    cic.Term (cic.type cic.z)
                                      (cic.prod (cic.type cic.z)
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat
                                         (__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_basics_bool.bool)) =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_minimization.min_spec
                                    _n1 _b1 _f1 __)
                                   _n _b _f x_1075)
                                (x_1076 :
                                   cic.Term cic.prop
                                     ((_n1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _b1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       _f1 :
                                         cic.Term (cic.type cic.z)
                                           (cic.prod (cic.type cic.z)
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat
                                              (__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_basics_bool.bool)) =>
                                       __ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_minimization.min_spec
                                         _n1 _b1 _f1 __)
                                        _n _b _f x_1075) =>
                                 (x_10751 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  _x_1076 :
                                    cic.Term cic.prop
                                      (matita_arithmetics_minimization.min_spec
                                         _n _b _f x_10751) =>
                                  Q_ x_10751 _x_1076) x_1075 x_1076))))))))).

[ _n, _b, _f, Q_, _H_found_min_spec, _H_not_found_min_spec, x_1075, x_1076 ]
  min_spec_ind _n _b _f Q_ _H_found_min_spec _H_not_found_min_spec x_1075
    x_1076 -->
  matita_arithmetics_minimization.filter_min_spec cic.prop _n _b _f x_1075
    (x_1076 :
       cic.Term cic.prop
         ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           _b1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           _f1 :
             cic.Term (cic.type cic.z)
               (cic.prod (cic.type cic.z) (cic.type cic.z)
                  matita_arithmetics_nat.nat
                  (__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_basics_bool.bool)) =>
           __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_minimization.min_spec _n1 _b1 _f1 __) _n _b _f
            x_1075) =>
     (x_10751 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      _x_1076 :
        cic.Term cic.prop
          (matita_arithmetics_minimization.min_spec _n _b _f x_10751) =>
      Q_ x_10751 _x_1076) x_1075 x_1076)
    (matita_arithmetics_minimization.min_spec_ind_body _n _b _f Q_
       _H_found_min_spec _H_not_found_min_spec x_1075)
    x_1076.

[ _n, _b, _f, Q_, _H_found_min_spec, _H_not_found_min_spec, x_1075, x_1076 ]
  min_spec_ind_body _n _b _f Q_ _H_found_min_spec _H_not_found_min_spec
    x_1075 x_1076 -->
  matita_arithmetics_minimization.match_min_spec cic.prop _n _b _f
    (x_10751 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     _x_1076 :
       cic.Term cic.prop
         (matita_arithmetics_minimization.min_spec _n _b _f x_10751) =>
     Q_ x_10751 _x_1076)
    (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
     x_1080 :
       cic.Term cic.prop
         ((_n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.le _n1 __) _b m) =>
     x_1079 :
       cic.Term cic.prop
         ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.lt __ __1) m
            (matita_arithmetics_nat.plus _n _b)) =>
     x_1078 :
       cic.Term cic.prop
         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
           _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           matita_basics_logic.eq
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) A)
             _x __)
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_basics_bool.bool)
            (_f m) matita_basics_bool.true) =>
     x_1077 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
            (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             cic.prod cic.prop cic.prop
               ((_n1 :
                   cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.le _n1 __) _b i)
               (__ :
                  cic.Term cic.prop
                    ((_n1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n1 __) _b i) =>
                cic.prod cic.prop cic.prop
                  ((__1 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    __2 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.lt __1 __2) i m)
                  (__1 :
                     cic.Term cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i m) =>
                   (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __2)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_bool.bool)
                     (_f i) matita_basics_bool.false)))) =>
     _H_found_min_spec m x_1080 x_1079 x_1078 x_1077)
    (x_1081 :
       cic.Term cic.prop
         (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
            (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             cic.prod cic.prop cic.prop
               ((_n1 :
                   cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.le _n1 __) _b i)
               (__ :
                  cic.Term cic.prop
                    ((_n1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n1 __) _b i) =>
                cic.prod cic.prop cic.prop
                  ((__1 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    __2 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.lt __1 __2) i
                     (matita_arithmetics_nat.plus _n _b))
                  (__1 :
                     cic.Term cic.prop
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i
                          (matita_arithmetics_nat.plus _n _b)) =>
                   (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __2)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_bool.bool)
                     (_f i) matita_basics_bool.false)))) =>
     _H_not_found_min_spec x_1081)
    x_1075 x_1076.

def min_spec_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
           (x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (x2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (x3 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (x4 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _b :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                matita_arithmetics_nat.nat
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.bool)) =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_minimization.min_spec _n _b _f __)
                          x1 x2 x3 x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _b :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                               x1 x2 x3 x4) =>
                        cic.prod (cic.type cic.z) cic.prop
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (_z1890 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.univ cic.prop))
                          (P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z)
                                  matita_arithmetics_nat.nat
                                  (_z1890 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.univ cic.prop)) =>
                           cic.prod cic.prop cic.prop
                             (cic.prod (cic.type cic.z) cic.prop
                                matita_arithmetics_nat.nat
                                (m :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) x2 m)
                                   (_x_1080 :
                                      cic.Term cic.prop
                                        ((_n :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n __) x2
                                           m) =>
                                    cic.prod cic.prop cic.prop
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) m
                                         (matita_arithmetics_nat.plus x1 x2))
                                      (_x_1079 :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m
                                              (matita_arithmetics_nat.plus x1
                                                 x2)) =>
                                       cic.prod cic.prop cic.prop
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (x3 m) matita_basics_bool.true)
                                         (_x_1078 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (x3 m)
                                                 matita_basics_bool.true) =>
                                          cic.prod cic.prop cic.prop
                                            (cic.prod (cic.type cic.z)
                                               cic.prop
                                               matita_arithmetics_nat.nat
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                cic.prod cic.prop cic.prop
                                                  ((_n :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    matita_arithmetics_nat.le
                                                      _n __)
                                                     x2 i)
                                                  (__ :
                                                     cic.Term cic.prop
                                                       ((_n :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         matita_arithmetics_nat.le
                                                           _n __)
                                                          x2 i) =>
                                                   cic.prod cic.prop cic.prop
                                                     ((__1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __2 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __1 __2)
                                                        i m)
                                                     (__1 :
                                                        cic.Term cic.prop
                                                          ((__1 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            matita_arithmetics_nat.lt
                                                              __1 __2)
                                                             i m) =>
                                                      (A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __2 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __2)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (x3 i)
                                                        matita_basics_bool.false))))
                                            (_x_1077 :
                                               cic.Term cic.prop
                                                 (cic.prod (cic.type cic.z)
                                                    cic.prop
                                                    matita_arithmetics_nat.nat
                                                    (i :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     cic.prod cic.prop
                                                       cic.prop
                                                       ((_n :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         matita_arithmetics_nat.le
                                                           _n __)
                                                          x2 i)
                                                       (__ :
                                                          cic.Term cic.prop
                                                            ((_n :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              __ :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              matita_arithmetics_nat.le
                                                                _n __)
                                                               x2 i) =>
                                                        cic.prod cic.prop
                                                          cic.prop
                                                          ((__1 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            matita_arithmetics_nat.lt
                                                              __1 __2)
                                                             i m)
                                                          (__1 :
                                                             cic.Term
                                                               cic.prop
                                                               ((__1 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 __2 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 matita_arithmetics_nat.lt
                                                                   __1 __2)
                                                                  i m) =>
                                                           (A :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A)
                                                              _x __2)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                matita_basics_bool.bool)
                                                             (x3 i)
                                                             matita_basics_bool.false)))) =>
                                             cic.prod cic.prop cic.prop
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_arithmetics_nat.nat)
                                                  x4 m)
                                               (_z1891 :
                                                  cic.Term cic.prop
                                                    ((A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __ :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_arithmetics_nat.nat)
                                                       x4 m) =>
                                                (_z1890 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 P _z1890) m)))))))
                             (_H1 :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     matita_arithmetics_nat.nat
                                     (m :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop
                                        ((_n :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n __) x2
                                           m)
                                        (_x_1080 :
                                           cic.Term cic.prop
                                             ((_n :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.le _n
                                                 __)
                                                x2 m) =>
                                         cic.prod cic.prop cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              m
                                              (matita_arithmetics_nat.plus x1
                                                 x2))
                                           (_x_1079 :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   m
                                                   (matita_arithmetics_nat.plus
                                                      x1 x2)) =>
                                            cic.prod cic.prop cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (x3 m)
                                                 matita_basics_bool.true)
                                              (_x_1078 :
                                                 cic.Term cic.prop
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __ :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A)
                                                       _x __)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         matita_basics_bool.bool)
                                                      (x3 m)
                                                      matita_basics_bool.true) =>
                                               cic.prod cic.prop cic.prop
                                                 (cic.prod (cic.type cic.z)
                                                    cic.prop
                                                    matita_arithmetics_nat.nat
                                                    (i :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     cic.prod cic.prop
                                                       cic.prop
                                                       ((_n :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         matita_arithmetics_nat.le
                                                           _n __)
                                                          x2 i)
                                                       (__ :
                                                          cic.Term cic.prop
                                                            ((_n :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              __ :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              matita_arithmetics_nat.le
                                                                _n __)
                                                               x2 i) =>
                                                        cic.prod cic.prop
                                                          cic.prop
                                                          ((__1 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   cic.z)
                                                                matita_arithmetics_nat.nat =>
                                                            matita_arithmetics_nat.lt
                                                              __1 __2)
                                                             i m)
                                                          (__1 :
                                                             cic.Term
                                                               cic.prop
                                                               ((__1 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 __2 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 matita_arithmetics_nat.lt
                                                                   __1 __2)
                                                                  i m) =>
                                                           (A :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            __2 :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A)
                                                              _x __2)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                matita_basics_bool.bool)
                                                             (x3 i)
                                                             matita_basics_bool.false))))
                                                 (_x_1077 :
                                                    cic.Term cic.prop
                                                      (cic.prod
                                                         (cic.type cic.z)
                                                         cic.prop
                                                         matita_arithmetics_nat.nat
                                                         (i :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          cic.prod cic.prop
                                                            cic.prop
                                                            ((_n :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              __ :
                                                                cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat =>
                                                              matita_arithmetics_nat.le
                                                                _n __)
                                                               x2 i)
                                                            (__ :
                                                               cic.Term
                                                                 cic.prop
                                                                 ((_n :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                   __ :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_arithmetics_nat.le
                                                                    _n __) x2
                                                                    i) =>
                                                             cic.prod
                                                               cic.prop
                                                               cic.prop
                                                               ((__1 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 __2 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                 matita_arithmetics_nat.lt
                                                                   __1 __2)
                                                                  i m)
                                                               (__1 :
                                                                  cic.Term
                                                                    cic.prop
                                                                    (
                                                                  (__1 :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                   __2 :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_arithmetics_nat.lt
                                                                    __1 __2)
                                                                    i m) =>
                                                                (A :
                                                                   cic.Univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                                 _x :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    A =>
                                                                 __2 :
                                                                   cic.Term
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    A =>
                                                                 matita_basics_logic.eq
                                                                   (cic.lift
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                    A)
                                                                   _x __2)
                                                                  (cic.lift
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    matita_basics_bool.bool)
                                                                  (x3 i)
                                                                  matita_basics_bool.false)))) =>
                                                  cic.prod cic.prop cic.prop
                                                    ((A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __ :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          matita_arithmetics_nat.nat)
                                                       x4 m)
                                                    (_z1891 :
                                                       cic.Term cic.prop
                                                         ((A :
                                                             cic.Univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))) =>
                                                           _x :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           __ :
                                                             cic.Term
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A =>
                                                           matita_basics_logic.eq
                                                             (cic.lift
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A)
                                                             _x __)
                                                            (cic.lift
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               matita_arithmetics_nat.nat)
                                                            x4 m) =>
                                                     (_z1890 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      P _z1890) m))))))) =>
                              cic.prod cic.prop cic.prop
                                (cic.prod cic.prop cic.prop
                                   (cic.prod (cic.type cic.z) cic.prop
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            x2 i)
                                         (__ :
                                            cic.Term cic.prop
                                              ((_n :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.le _n
                                                  __)
                                                 x2 i) =>
                                          cic.prod cic.prop cic.prop
                                            ((__1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __2 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __1
                                                __2)
                                               i
                                               (matita_arithmetics_nat.plus
                                                  x1 x2))
                                            (__1 :
                                               cic.Term cic.prop
                                                 ((__1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __1 __2)
                                                    i
                                                    (matita_arithmetics_nat.plus
                                                       x1 x2)) =>
                                             (A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __2 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A)
                                                _x __2)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               (x3 i)
                                               matita_basics_bool.false))))
                                   (_x_1081 :
                                      cic.Term cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              ((_n :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.le _n
                                                  __)
                                                 x2 i)
                                              (__ :
                                                 cic.Term cic.prop
                                                   ((_n :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.le
                                                       _n __)
                                                      x2 i) =>
                                               cic.prod cic.prop cic.prop
                                                 ((__1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __1 __2)
                                                    i
                                                    (matita_arithmetics_nat.plus
                                                       x1 x2))
                                                 (__1 :
                                                    cic.Term cic.prop
                                                      ((__1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __1 __2)
                                                         i
                                                         (matita_arithmetics_nat.plus
                                                            x1 x2)) =>
                                                  (A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A)
                                                     _x __2)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (x3 i)
                                                    matita_basics_bool.false)))) =>
                                    cic.prod cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         x4
                                         (matita_arithmetics_nat.plus x1 x2))
                                      (_z1891 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              x4
                                              (matita_arithmetics_nat.plus x1
                                                 x2)) =>
                                       (_z1890 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        P _z1890)
                                         (matita_arithmetics_nat.plus x1 x2))))
                                (_H2 :
                                   cic.Term cic.prop
                                     (cic.prod cic.prop cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              ((_n :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.le _n
                                                  __)
                                                 x2 i)
                                              (__ :
                                                 cic.Term cic.prop
                                                   ((_n :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.le
                                                       _n __)
                                                      x2 i) =>
                                               cic.prod cic.prop cic.prop
                                                 ((__1 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.lt
                                                     __1 __2)
                                                    i
                                                    (matita_arithmetics_nat.plus
                                                       x1 x2))
                                                 (__1 :
                                                    cic.Term cic.prop
                                                      ((__1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __1 __2)
                                                         i
                                                         (matita_arithmetics_nat.plus
                                                            x1 x2)) =>
                                                  (A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A)
                                                     _x __2)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (x3 i)
                                                    matita_basics_bool.false))))
                                        (_x_1081 :
                                           cic.Term cic.prop
                                             (cic.prod (cic.type cic.z)
                                                cic.prop
                                                matita_arithmetics_nat.nat
                                                (i :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 cic.prod cic.prop cic.prop
                                                   ((_n :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.le
                                                       _n __)
                                                      x2 i)
                                                   (__ :
                                                      cic.Term cic.prop
                                                        ((_n :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          __ :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          matita_arithmetics_nat.le
                                                            _n __)
                                                           x2 i) =>
                                                    cic.prod cic.prop
                                                      cic.prop
                                                      ((__1 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.lt
                                                          __1 __2)
                                                         i
                                                         (matita_arithmetics_nat.plus
                                                            x1 x2))
                                                      (__1 :
                                                         cic.Term cic.prop
                                                           ((__1 :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             __2 :
                                                               cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_arithmetics_nat.lt
                                                               __1 __2)
                                                              i
                                                              (matita_arithmetics_nat.plus
                                                                 x1 x2)) =>
                                                       (A :
                                                          cic.Univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))) =>
                                                        _x :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        matita_basics_logic.eq
                                                          (cic.lift
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A)
                                                          _x __2)
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            matita_basics_bool.bool)
                                                         (x3 i)
                                                         matita_basics_bool.false)))) =>
                                         cic.prod cic.prop cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_arithmetics_nat.nat)
                                              x4
                                              (matita_arithmetics_nat.plus x1
                                                 x2))
                                           (_z1891 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __ :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A)
                                                    _x __)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      matita_arithmetics_nat.nat)
                                                   x4
                                                   (matita_arithmetics_nat.plus
                                                      x1 x2)) =>
                                            (_z1890 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             P _z1890)
                                              (matita_arithmetics_nat.plus x1
                                                 x2)))) =>
                                 (_z1890 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  P _z1890) x4)))))))))
      :=
      x1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x3 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      x4 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hterm :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_minimization.min_spec _n _b _f __) x1 x2 x3 x4) =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (_z1890 :
                cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.univ cic.prop)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
             (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) x2 m)
                (_x_1080 :
                   cic.Term cic.prop
                     ((_n :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.le _n __) x2 m) =>
                 cic.prod cic.prop cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m
                      (matita_arithmetics_nat.plus x1 x2))
                   (_x_1079 :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) m
                           (matita_arithmetics_nat.plus x1 x2)) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (x3 m) matita_basics_bool.true)
                      (_x_1078 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (x3 m) matita_basics_bool.true) =>
                       cic.prod cic.prop cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               ((_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __) x2 i)
                               (__ :
                                  cic.Term cic.prop
                                    ((_n :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.le _n __) x2 i) =>
                                cic.prod cic.prop cic.prop
                                  ((__1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __2 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __1 __2) i m)
                                  (__1 :
                                     cic.Term cic.prop
                                       ((__1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __1 __2) i
                                          m) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (x3 i) matita_basics_bool.false))))
                         (_x_1077 :
                            cic.Term cic.prop
                              (cic.prod (cic.type cic.z) cic.prop
                                 matita_arithmetics_nat.nat
                                 (i :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  cic.prod cic.prop cic.prop
                                    ((_n :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.le _n __) x2 i)
                                    (__ :
                                       cic.Term cic.prop
                                         ((_n :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.le _n __)
                                            x2 i) =>
                                     cic.prod cic.prop cic.prop
                                       ((__1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __2 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __1 __2) i
                                          m)
                                       (__1 :
                                          cic.Term cic.prop
                                            ((__1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __2 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __1
                                                __2)
                                               i m) =>
                                        (A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __2 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __2)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (x3 i) matita_basics_bool.false)))) =>
                          cic.prod cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               x4 m)
                            (_z1891 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_arithmetics_nat.nat)
                                    x4 m) =>
                             (_z1890 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              P _z1890) m))))))) =>
      H2 :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) x2 i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) x2 i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus x1 x2))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus x1 x2)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (x3 i) matita_basics_bool.false))))
             (_x_1081 :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop
                     matita_arithmetics_nat.nat
                     (i :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      cic.prod cic.prop cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) x2 i)
                        (__ :
                           cic.Term cic.prop
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) x2 i) =>
                         cic.prod cic.prop cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus x1 x2))
                           (__1 :
                              cic.Term cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i
                                   (matita_arithmetics_nat.plus x1 x2)) =>
                            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __2 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __2)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (x3 i) matita_basics_bool.false)))) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x4 (matita_arithmetics_nat.plus x1 x2))
                (_z1891 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_arithmetics_nat.nat)
                        x4 (matita_arithmetics_nat.plus x1 x2)) =>
                 (_z1890 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  P _z1890) (matita_arithmetics_nat.plus x1 x2)))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x4 x4)
              (_z1891 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x4 x4) =>
               (_z1890 :
                  cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                P _z1890) x4)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
               matita_arithmetics_nat.nat)
            x4))
        (matita_arithmetics_minimization.min_spec_ind x1 x2 x3
           (x_1075 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_1076 :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _b :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_minimization.min_spec _n _b _f __) x1 x2
                   x3 x_1075) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    x4 x_1075)
                 (_z1891 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x4 x_1075) =>
                  (_z1890 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   P _z1890) x_1075)))
           H1 H2 x4 Hterm).

def min_spec_to_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _b :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                matita_arithmetics_nat.nat
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.bool)) =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_minimization.min_spec _n _b _f __)
                          n b f m)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _b :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _f :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     matita_arithmetics_nat.nat
                                     (__ :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.bool)) =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_minimization.min_spec _n _b
                                _f __)
                               n b f m) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.min n b f) m))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      spec :
        cic.Term cic.prop
          ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            matita_arithmetics_minimization.min_spec _n _b _f __) n b f m) =>
      matita_arithmetics_minimization.match_min_spec cic.prop n b f
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_minimization.min_spec _n _b _f __1) n b f
                __) =>
         (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __1)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min n b f) __)
        (m0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         lem :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m0) =>
         ltm :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m0
                (matita_arithmetics_nat.plus n b)) =>
         fm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m0) matita_basics_bool.true) =>
         ismin :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i m0)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i m0) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_arithmetics_minimization.min_exists f
           (matita_arithmetics_nat.plus n b) m0 ltm
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (f m0) fm)
           n b lem ismin
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n b)))
        (ffalse :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus n b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus n b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         matita_arithmetics_minimization.min_not_exists f n b ffalse)
        m spec.

def min_to_min_spec :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (m :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.min n b f) m)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_minimization.min n b f) m) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _b :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                matita_arithmetics_nat.nat
                                (__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.bool)) =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_minimization.min_spec _n _b _f
                           __1)
                          n b f m))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min __ b f) m)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.min __ b f) m) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             _f :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    matita_arithmetics_nat.nat
                    (__2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool)) =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_minimization.min_spec _n _b _f __2) __ b f m))
        (eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.min matita_arithmetics_nat.O
                   b f)
                m) =>
         matita_basics_logic.eq_ind
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f)
           (x_1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_minimization.min
                      matita_arithmetics_nat.O b f)
                   x_1) =>
            cic.lift cic.prop cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _f :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.bool)) =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_minimization.min_spec _n _b _f __)
                 matita_arithmetics_nat.O b f x_1))
           (matita_arithmetics_minimization.not_found_min_spec
              matita_arithmetics_nat.O b f
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               lei :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i) =>
               lti :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.plus matita_arithmetics_nat.O b)) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.false))
                 (matita_basics_logic.absurd
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          b))
                    lti
                    (matita_arithmetics_nat.le_to_not_lt
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          b)
                       i lei))))
           m eqm)
        (n0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         eqm :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_minimization.min
                   (matita_arithmetics_nat.S n0) b f)
                m) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           m
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_arithmetics_nat.nat)
                   x m) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S n0) b))
                 (__1 :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __1) x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S n0) b)) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _b :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   _f :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat
                          (__2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.bool)) =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_minimization.min_spec _n _b _f __2)
                    (matita_arithmetics_nat.S n0) b f m)))
           (lem :
              cic.Term cic.prop
                ((_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __) m
                   (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0)
                      b)) =>
            matita_basics_logic.match_Or cic.prop
              (matita_arithmetics_nat.lt m
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0) b))
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 m
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0) b))
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) m
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S n0) b))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         m
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S n0) b))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                _f :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       matita_arithmetics_nat.nat
                       (__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.bool)) =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_minimization.min_spec _n _b _f __1)
                 (matita_arithmetics_nat.S n0) b f m)
              (mcase :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) m
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.S n0) b)) =>
               matita_arithmetics_minimization.found_min_spec
                 (matita_arithmetics_nat.S n0) b f m
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b
                          (matita_arithmetics_minimization.min
                             (matita_arithmetics_nat.S n0) b f)))
                    (cic.lift cic.prop (cic.type cic.z)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b m))
                    (matita_arithmetics_minimization.le_min_l f
                       (matita_arithmetics_nat.S n0) b)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b x))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b m))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b m)))
                       (matita_arithmetics_minimization.min
                          (matita_arithmetics_nat.S n0) b f)
                       eqm))
                 mcase
                 (matita_arithmetics_minimization.fmin_true f
                    (matita_arithmetics_nat.S n0) m b
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       m
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             m x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m)
                       (matita_arithmetics_minimization.min
                          (matita_arithmetics_nat.S n0) b f)
                       eqm)
                    mcase)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  H :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b i) =>
                  H1 :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i m) =>
                  matita_arithmetics_minimization.lt_min_to_false f
                    (matita_arithmetics_nat.S n0) i b H
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i m))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_minimization.min
                                (matita_arithmetics_nat.S n0) b f)))
                       H1
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          m
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i m))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i x))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i m)))
                          (matita_arithmetics_minimization.min
                             (matita_arithmetics_nat.S n0) b f)
                          eqm))))
              (mcase :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.S n0) b)) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0) b)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S n0) b)) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _b :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      _f :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             matita_arithmetics_nat.nat
                             (__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.bool)) =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_minimization.min_spec _n _b _f __1)
                       (matita_arithmetics_nat.S n0) b f x))
                 (matita_arithmetics_minimization.not_found_min_spec
                    (matita_arithmetics_nat.S n0) b f
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     lebi :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i) =>
                     lti :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.S n0) b)) =>
                     matita_arithmetics_minimization.lt_min_to_false f
                       (matita_arithmetics_nat.S n0) i b lebi
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S n0) b)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_minimization.min
                                   (matita_arithmetics_nat.S n0) b f)))
                          lti
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S n0))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_minimization.min
                                            (matita_arithmetics_nat.S n0) b f)))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                m
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i x))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i
                                            (matita_arithmetics_minimization.min
                                               (matita_arithmetics_nat.S n0)
                                               b f)))))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   m
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.univ (cic.type cic.z)))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               i m))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               i x))))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i m)))
                                   (matita_arithmetics_minimization.min
                                      (matita_arithmetics_nat.S n0) b f)
                                   eqm)
                                (matita_arithmetics_nat.plus b
                                   (matita_arithmetics_nat.S n0))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.S n0) b)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         m x))
                                   mcase
                                   (matita_arithmetics_nat.plus b
                                      (matita_arithmetics_nat.S n0))
                                   (matita_arithmetics_nat.commutative_plus
                                      (matita_arithmetics_nat.S n0) b)))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S n0) b)
                             (matita_arithmetics_nat.commutative_plus
                                (matita_arithmetics_nat.S n0) b)))))
                 m mcase)
              (matita_arithmetics_nat.le_to_or_lt_eq m
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.S n0) b)
                 lem))
           (matita_arithmetics_minimization.min (matita_arithmetics_nat.S n0)
              b f)
           eqm
           (matita_arithmetics_minimization.le_min_r f
              (matita_arithmetics_nat.S n0) b))
        n.

def min_f_g :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (g :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b i)
                             (__ :
                                cic.Term cic.prop
                                  ((_n :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n __) b i) =>
                              cic.prod cic.prop cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i
                                   (matita_arithmetics_nat.plus n b))
                                (__1 :
                                   cic.Term cic.prop
                                     ((__1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __1 __2) i
                                        (matita_arithmetics_nat.plus n b)) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __2 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __2)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (f i) (g i)))))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((_n :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n __) b i)
                                  (__ :
                                     cic.Term cic.prop
                                       ((_n :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.le _n __) b i) =>
                                   cic.prod cic.prop cic.prop
                                     ((__1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __1 __2) i
                                        (matita_arithmetics_nat.plus n b))
                                     (__1 :
                                        cic.Term cic.prop
                                          ((__1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __2 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __1 __2)
                                             i
                                             (matita_arithmetics_nat.plus n b)) =>
                                      (A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __2 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __2)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (f i) (g i))))) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_minimization.min n b f)
                          (matita_arithmetics_minimization.min n b g)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b i)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i) =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.plus _x_365 b))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f i) (g i)))))
                 (__ :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i)
                            (__ :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __) b i) =>
                             cic.prod cic.prop cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b))
                               (__1 :
                                  cic.Term cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) i
                                       (matita_arithmetics_nat.plus _x_365 b)) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) (g i))))) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_minimization.min _x_365 b f)
                    (matita_arithmetics_minimization.min _x_365 b g)))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            matita_arithmetics_nat.O b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 matita_arithmetics_nat.O b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) (g i))))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_arithmetics_nat.nat)
           b
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_minimization.min
                    matita_arithmetics_nat.O b g)))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              b
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    b x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 b)
              (matita_arithmetics_minimization.min matita_arithmetics_nat.O b
                 g)
              (matita_arithmetics_minimization.min_O_f g b))
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b f)
           (matita_arithmetics_minimization.min_O_f f b))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i) =>
                          cic.prod cic.prop cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.plus m b))
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus m b)) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f i) (g i)))))
                   (__ :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop
                           matita_arithmetics_nat.nat
                           (i :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            cic.prod cic.prop cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i)
                              (__ :
                                 cic.Term cic.prop
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) b i) =>
                               cic.prod cic.prop cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus m b))
                                 (__1 :
                                    cic.Term cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) i
                                         (matita_arithmetics_nat.plus m b)) =>
                                  (A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __2 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A)
                                     _x __2)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_bool.bool)
                                    (f i) (g i))))) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_minimization.min m b f)
                      (matita_arithmetics_minimization.min m b g)))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ext :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S m) b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.S m) b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) (g i))))) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (g b)
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   x (g b)) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) f)
                    x)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) g)
                    (g b))))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min m
                 (matita_arithmetics_nat.S b) g)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_minimization.min m
                         (matita_arithmetics_nat.S b) g)) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b x (g b))
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) g)
                       (g b))))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    b
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) g)
                    (g b)))
              (matita_arithmetics_minimization.min m
                 (matita_arithmetics_nat.S b) f)
              (Hind (matita_arithmetics_nat.S b)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  ltib :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __)
                         (matita_arithmetics_nat.S b) i) =>
                  ltim :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         (matita_arithmetics_nat.plus m
                            (matita_arithmetics_nat.S b))) =>
                  ext i (matita_arithmetics_nat.lt_to_le b i ltib)
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.S b))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) i
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S m) b)))
                       ltim
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.S m))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i
                                      (matita_arithmetics_nat.plus m
                                         (matita_arithmetics_nat.S b))))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i x))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S m))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i x))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S m))))))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S m)))))
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.S b))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   (matita_arithmetics_nat.plus m b))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S m))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus b m)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S x)
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S m))))
                                   (matita_arithmetics_nat.plus_n_Sm b m)
                                   (matita_arithmetics_nat.plus m b)
                                   (matita_arithmetics_nat.commutative_plus b
                                      m))
                                (matita_arithmetics_nat.plus m
                                   (matita_arithmetics_nat.S b))
                                (matita_arithmetics_nat.plus_n_Sm m b)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S m) b)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.S m) b))))))
           (f b)
           (ext b (matita_arithmetics_nat.le_n b)
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) b
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.plus b
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.S m))))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) b
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S m) b)))
                 (matita_arithmetics_nat.lt_plus_Sn_r b
                    matita_arithmetics_nat.O m)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus b
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S m)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type cic.z)))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) b x))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) b
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S m) b)))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.S m))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) b
                                   (matita_arithmetics_nat.plus b
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.S m)))))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) b x))))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S m)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b
                                      (matita_arithmetics_nat.plus b x)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.S m))))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) b
                                   (matita_arithmetics_nat.plus b
                                      (matita_arithmetics_nat.S m)))))
                          (matita_arithmetics_nat.plus
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.plus_O_n
                             (matita_arithmetics_nat.S m)))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S m) b)
                       (matita_arithmetics_nat.commutative_plus
                          (matita_arithmetics_nat.S m) b))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.plus b
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.associative_plus b
                       matita_arithmetics_nat.O (matita_arithmetics_nat.S m))))))
        n.

def le_min_f_min_g :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (g :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (b :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) b i)
                             (__ :
                                cic.Term cic.prop
                                  ((_n :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n __) b i) =>
                              cic.prod cic.prop cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i
                                   (matita_arithmetics_nat.plus n b))
                                (__1 :
                                   cic.Term cic.prop
                                     ((__1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __1 __2) i
                                        (matita_arithmetics_nat.plus n b)) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __2 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __2)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (f i) matita_basics_bool.true)
                                   (__2 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __2 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __2)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (f i) matita_basics_bool.true) =>
                                    (A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __3 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __3)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (g i) matita_basics_bool.true)))))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               matita_arithmetics_nat.nat
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  ((_n :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n __) b i)
                                  (__ :
                                     cic.Term cic.prop
                                       ((_n :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.le _n __) b i) =>
                                   cic.prod cic.prop cic.prop
                                     ((__1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __1 __2) i
                                        (matita_arithmetics_nat.plus n b))
                                     (__1 :
                                        cic.Term cic.prop
                                          ((__1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __2 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __1 __2)
                                             i
                                             (matita_arithmetics_nat.plus n b)) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __2 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __2)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (f i) matita_basics_bool.true)
                                        (__2 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __2 :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __2)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   matita_basics_bool.bool)
                                                (f i) matita_basics_bool.true) =>
                                         (A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __3 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __3)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (g i) matita_basics_bool.true))))) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_minimization.min n b g)
                          (matita_arithmetics_minimization.min n b f)))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type cic.z) cic.prop
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __ :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __) b i)
                       (__ :
                          cic.Term cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i) =>
                        cic.prod cic.prop cic.prop
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2) i
                             (matita_arithmetics_nat.plus _x_365 b))
                          (__1 :
                             cic.Term cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b)) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true)
                             (__2 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __3 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __3)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (g i) matita_basics_bool.true)))))
                 (__ :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i)
                            (__ :
                               cic.Term cic.prop
                                 ((_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __ :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __) b i) =>
                             cic.prod cic.prop cic.prop
                               ((__1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __2 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __1 __2) i
                                  (matita_arithmetics_nat.plus _x_365 b))
                               (__1 :
                                  cic.Term cic.prop
                                    ((__1 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      __2 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.lt __1 __2) i
                                       (matita_arithmetics_nat.plus _x_365 b)) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true)
                                  (__2 :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __2 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __2)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (f i) matita_basics_bool.true) =>
                                   (A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __3 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __3)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (g i) matita_basics_bool.true))))) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_minimization.min _x_365 b g)
                    (matita_arithmetics_minimization.min _x_365 b f)))))
        (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            matita_arithmetics_nat.O b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 matita_arithmetics_nat.O b)) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)
                         (__2 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f i) matita_basics_bool.true) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __3 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __3)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (g i) matita_basics_bool.true))))) =>
         matita_arithmetics_minimization.le_min_l f matita_arithmetics_nat.O
           (matita_arithmetics_minimization.min matita_arithmetics_nat.O b g))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   (cic.prod (cic.type cic.z) cic.prop
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         (__ :
                            cic.Term cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i) =>
                          cic.prod cic.prop cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.plus m b))
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus m b)) =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (f i) matita_basics_bool.true)
                               (__2 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (f i) matita_basics_bool.true) =>
                                (A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __3 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __3)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (g i) matita_basics_bool.true)))))
                   (__ :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop
                           matita_arithmetics_nat.nat
                           (i :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            cic.prod cic.prop cic.prop
                              ((_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __) b i)
                              (__ :
                                 cic.Term cic.prop
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __) b i) =>
                               cic.prod cic.prop cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    (matita_arithmetics_nat.plus m b))
                                 (__1 :
                                    cic.Term cic.prop
                                      ((__1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __1 __2) i
                                         (matita_arithmetics_nat.plus m b)) =>
                                  cic.prod cic.prop cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (f i) matita_basics_bool.true)
                                    (__2 :
                                       cic.Term cic.prop
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (f i) matita_basics_bool.true) =>
                                     (A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __3 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __3)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (g i) matita_basics_bool.true))))) =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __1)
                      (matita_arithmetics_minimization.min m b g)
                      (matita_arithmetics_minimization.min m b f)))) =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         ext :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S m) b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.S m) b)) =>
                       cic.prod cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)
                         (__2 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z)))
                                    matita_basics_bool.bool)
                                 (f i) matita_basics_bool.true) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __3 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __3)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (g i) matita_basics_bool.true))))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 b
                 (matita_arithmetics_minimization.min m
                    (matita_arithmetics_nat.S b) g)
                 (g b))
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 b
                 (matita_arithmetics_minimization.min m
                    (matita_arithmetics_nat.S b) f)
                 (f b)))
           (Heq :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) g)
                       (g b))
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) f)
                       x)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          b
                          (matita_arithmetics_minimization.min m
                             (matita_arithmetics_nat.S b) g)
                          x)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          b
                          (matita_arithmetics_minimization.min m
                             (matita_arithmetics_nat.S b) f)
                          matita_basics_bool.true)))
                 (matita_arithmetics_nat.le_n
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) g)
                       matita_basics_bool.true))
                 (g b)
                 (ext b (matita_arithmetics_nat.le_n b)
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) b
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.plus b
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.S m))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((__ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __ __1) b
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S m) b)))
                       (matita_arithmetics_nat.lt_plus_Sn_r b
                          matita_arithmetics_nat.O m)
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.plus
                                matita_arithmetics_nat.O
                                (matita_arithmetics_nat.S m)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) b
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.S m) b)))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S m))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) b
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.plus
                                               matita_arithmetics_nat.O
                                               (matita_arithmetics_nat.S m)))))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) b x))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S m)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            b
                                            (matita_arithmetics_nat.plus b x)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            b
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.S m))))))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) b
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S m)))))
                                (matita_arithmetics_nat.plus
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.S m))
                                (matita_arithmetics_nat.plus_O_n
                                   (matita_arithmetics_nat.S m)))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S m) b)
                             (matita_arithmetics_nat.commutative_plus
                                (matita_arithmetics_nat.S m) b))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.plus b
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.associative_plus b
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.S m))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f b) Heq)))
              (f b) Heq)
           (Heq :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) g)
                       (g b))
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) f)
                       x)))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) g)
                       __)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       b
                       (matita_arithmetics_minimization.min m
                          (matita_arithmetics_nat.S b) f)
                       matita_basics_bool.false))
                 (matita_arithmetics_nat.lt_to_le b
                    (matita_arithmetics_minimization.min m
                       (matita_arithmetics_nat.S b) f)
                    (matita_arithmetics_minimization.le_min_l f m
                       (matita_arithmetics_nat.S b)))
                 (Hind (matita_arithmetics_nat.S b)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltb :
                       cic.Term cic.prop
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __)
                            (matita_arithmetics_nat.S b) i) =>
                     ltim :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.plus m
                               (matita_arithmetics_nat.S b))) =>
                     fi :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true) =>
                     ext i (matita_arithmetics_nat.lt_to_le b i ltb)
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.plus m
                                   (matita_arithmetics_nat.S b))))
                          (cic.lift cic.prop (cic.type cic.z)
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.S m) b)))
                          ltim
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.S m))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_nat.plus m
                                            (matita_arithmetics_nat.S b))))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i x))))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus b
                                   (matita_arithmetics_nat.S m))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.univ (cic.type cic.z)))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i x))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.S m))))))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type cic.z)))
                                   (cic.lift cic.prop (cic.type cic.z)
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S m)))))
                                (matita_arithmetics_nat.plus m
                                   (matita_arithmetics_nat.S b))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.plus m b))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.S m))))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus b m)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S x)
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.S m))))
                                      (matita_arithmetics_nat.plus_n_Sm b m)
                                      (matita_arithmetics_nat.plus m b)
                                      (matita_arithmetics_nat.commutative_plus
                                         b m))
                                   (matita_arithmetics_nat.plus m
                                      (matita_arithmetics_nat.S b))
                                   (matita_arithmetics_nat.plus_n_Sm m b)))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S m) b)
                             (matita_arithmetics_nat.commutative_plus
                                (matita_arithmetics_nat.S m) b)))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (f i) fi)))
                 (g b))
              (f b) Heq)
           (matita_basics_bool.true_or_false (f b)))
        n.

def f_min_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.And _A _B)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b i)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i
                                   (matita_arithmetics_nat.plus n b)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type cic.z) =>
                           _P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                  (__ : cic.Term (cic.type cic.z) A =>
                                   cic.univ cic.prop)) =>
                           matita_basics_logic.ex
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                             _P)
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               matita_arithmetics_nat.nat)
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.lift cic.prop cic.prop
                               ((_A : cic.Univ cic.prop =>
                                 _B : cic.Univ cic.prop =>
                                 matita_basics_logic.And _A _B)
                                  ((_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.And _A _B)
                                     ((_n :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.le _n __) b i)
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i
                                        (matita_arithmetics_nat.plus n b)))
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f (matita_arithmetics_minimization.min n b f))
                       matita_basics_bool.true)))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_minimization.match_min_spec cic.prop n b f
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               _f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat
                      (__1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_minimization.min_spec _n _b _f __1) n b f
                __) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 matita_arithmetics_nat.nat)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1) b i)
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i
                          (matita_arithmetics_nat.plus n b)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f i) matita_basics_bool.true))))
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__1 : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __1) b i)
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i
                               (matita_arithmetics_nat.plus n b)))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)))) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f __) matita_basics_bool.true))
        (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __) b m) =>
         auto' :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.lt __ __1) m
                (matita_arithmetics_nat.plus n b)) =>
         auto'' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (f m) matita_basics_bool.true) =>
         auto''' :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i m)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i m) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         auto'''' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.plus n b)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (f m) auto'')
        (Hall :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   (__ :
                      cic.Term cic.prop
                        ((_n :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.le _n __) b i) =>
                    cic.prod cic.prop cic.prop
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i
                         (matita_arithmetics_nat.plus n b))
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i
                              (matita_arithmetics_nat.plus n b)) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.false)))) =>
         _clearme :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.plus n b)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         matita_basics_logic.match_ex cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat)
           (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.lift cic.prop cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __) b i)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i
                       (matita_arithmetics_nat.plus n b)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true)))
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      matita_arithmetics_nat.nat)
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.lift cic.prop cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __) b i)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i
                               (matita_arithmetics_nat.plus n b)))
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f i) matita_basics_bool.true)))) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f (matita_arithmetics_nat.plus n b)) matita_basics_bool.true)
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            _clearme0 :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b x)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) x
                         (matita_arithmetics_nat.plus n b)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f x) matita_basics_bool.true)) =>
            matita_basics_logic.match_And cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b x)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) x
                    (matita_arithmetics_nat.plus n b)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f x) matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b x)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) x
                            (matita_arithmetics_nat.plus n b)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f x) matita_basics_bool.true)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f (matita_arithmetics_nat.plus n b))
                 matita_basics_bool.true)
              (_clearme1 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b x)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) x
                         (matita_arithmetics_nat.plus n b))) =>
               matita_basics_logic.match_And cic.prop
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b x)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) x
                    (matita_arithmetics_nat.plus n b))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b x)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) x
                            (matita_arithmetics_nat.plus n b))) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f x) matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (f x) matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f (matita_arithmetics_nat.plus n b))
                       matita_basics_bool.true))
                 (leb :
                    cic.Term cic.prop
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b x) =>
                  ltx :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) x
                         (matita_arithmetics_nat.plus n b)) =>
                  fx :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f x) matita_basics_bool.true) =>
                  matita_basics_logic.False_ind
                    (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f (matita_arithmetics_nat.plus n b))
                          matita_basics_bool.true))
                    (matita_basics_logic.absurd
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f x) matita_basics_bool.true)
                       fx
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.false
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  x0 matita_basics_bool.false) =>
                           cic.lift cic.prop cic.prop
                             ((_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x0 matita_basics_bool.true)))
                          (matita_basics_logic.sym_not_eq
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true matita_basics_bool.false
                             matita_basics_bool.not_eq_true_false)
                          (f x) (Hall x leb ltx))))
                 _clearme1)
              _clearme0)
           _clearme)
        (matita_arithmetics_minimization.min n b f)
        (matita_arithmetics_minimization.min_to_min_spec f n b
           (matita_arithmetics_minimization.min n b f)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_minimization.min n b f))).

def lt_min :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop
           (cic.prod (cic.type cic.z) (cic.type cic.z)
              matita_arithmetics_nat.nat
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.bool))
           (f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat
                   (__ :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.bool)) =>
            cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
              (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop matita_arithmetics_nat.nat
                 (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          matita_arithmetics_nat.nat)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop cic.prop
                          ((_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.And _A _B)
                             ((_A : cic.Univ cic.prop =>
                               _B : cic.Univ cic.prop =>
                               matita_basics_logic.And _A _B)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __) b i)
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i
                                   (matita_arithmetics_nat.plus n b)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (f i) matita_basics_bool.true))))
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type cic.z) =>
                           _P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                  (__ : cic.Term (cic.type cic.z) A =>
                                   cic.univ cic.prop)) =>
                           matita_basics_logic.ex
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                             _P)
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               matita_arithmetics_nat.nat)
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             cic.lift cic.prop cic.prop
                               ((_A : cic.Univ cic.prop =>
                                 _B : cic.Univ cic.prop =>
                                 matita_basics_logic.And _A _B)
                                  ((_A : cic.Univ cic.prop =>
                                    _B : cic.Univ cic.prop =>
                                    matita_basics_logic.And _A _B)
                                     ((_n :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.le _n __) b i)
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i
                                        (matita_arithmetics_nat.plus n b)))
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (f i) matita_basics_bool.true)))) =>
                     (__1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __1 __2)
                       (matita_arithmetics_minimization.min n b f)
                       (matita_arithmetics_nat.plus n b))))))
      :=
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type cic.z) =>
            _P :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                   (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
            matita_basics_logic.ex
              (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                matita_arithmetics_nat.nat)
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.lift cic.prop cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b i)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         (matita_arithmetics_nat.plus n b)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true)))) =>
      matita_basics_logic.match_ex cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           matita_arithmetics_nat.nat)
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __) b i)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) i
                    (matita_arithmetics_nat.plus n b)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f i) matita_basics_bool.true)))
        (__ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __) b i)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i
                            (matita_arithmetics_nat.plus n b)))
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true)))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2)
           (matita_arithmetics_minimization.min n b f)
           (matita_arithmetics_nat.plus n b))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.plus n b)))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f i) matita_basics_bool.true)) =>
         matita_basics_logic.match_And cic.prop
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) b i)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) i
                 (matita_arithmetics_nat.plus n b)))
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f i) matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b i)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         (matita_arithmetics_nat.plus n b)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true)) =>
            (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2)
              (matita_arithmetics_minimization.min n b f)
              (matita_arithmetics_nat.plus n b))
           (_clearme0 :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.plus n b))) =>
            matita_basics_logic.match_And cic.prop
              ((_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __) b i)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) i
                 (matita_arithmetics_nat.plus n b))
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __) b i)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i
                         (matita_arithmetics_nat.plus n b))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (f i) matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f i) matita_basics_bool.true) =>
                  (__2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __3 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __2 __3)
                    (matita_arithmetics_minimization.min n b f)
                    (matita_arithmetics_nat.plus n b)))
              (lebi :
                 cic.Term cic.prop
                   ((_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __) b i) =>
               ltin :
                 cic.Term cic.prop
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.plus n b)) =>
               fi_true :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f i) matita_basics_bool.true) =>
               matita_arithmetics_nat.le_to_lt_to_lt
                 (matita_arithmetics_minimization.min n b f) i
                 (matita_arithmetics_nat.plus n b)
                 (matita_arithmetics_minimization.true_to_le_min f n i b lebi
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f i) fi_true))
                 ltin)
              _clearme0)
           _clearme)
        H.


