(; This file was automatically generated from Matita. ;)

Sigma : cic.Univ (cic.type (cic.s (cic.s cic.z))).

mk_Sigma :
  cic.Term (cic.type (cic.s (cic.s cic.z)))
    (cic.prod (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) (cic.univ (cic.type (cic.s cic.z)))
       (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
        cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) p1
          (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
           matita_basics_jmeq.Sigma))).

def match_Sigma_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ cic.prop))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Prop return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (return_type :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type5 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (return_type :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type4 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type3 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type2 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type1 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def match_Sigma_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                    (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     return_type
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          __))))
              (case_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                         (__ : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          return_type
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               __)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ return_type, case_mk_Sigma, p1, __ ]
  match_Sigma_Type0 return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def filter_Sigma_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ cic.prop))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                      matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Prop return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (return_type :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type5 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (return_type :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type4 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type3 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type2 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type1 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def filter_Sigma_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (z :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (return_type :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (z :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z))
              (return :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type cic.z) matita_basics_jmeq.Sigma
                      (z :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       return_type z)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (z :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  return_type z)))).

[ p1, __, return_type, return ]
  filter_Sigma_Type0 return_type return (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def match_Sigma :
      return_sort : cic.Sort ->
      return_type :
        (z :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma ->
         cic.Univ return_sort) ->
      case_mk_Sigma :
        (p1 : cic.Univ (cic.type (cic.s cic.z)) ->
         __ : cic.Term (cic.type (cic.s cic.z)) p1 ->
         cic.Term return_sort
           (return_type
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1)
                 __))) ->
      z :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma ->
      cic.Term return_sort (return_type z).

[  ] match_Sigma cic.prop --> matita_basics_jmeq.match_Sigma_Prop.

[  ] match_Sigma (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_jmeq.match_Sigma_Type5.

[  ] match_Sigma (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_jmeq.match_Sigma_Type4.

[  ] match_Sigma (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_jmeq.match_Sigma_Type3.

[  ] match_Sigma (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_jmeq.match_Sigma_Type2.

[  ] match_Sigma (cic.type (cic.s cic.z)) -->
  matita_basics_jmeq.match_Sigma_Type1.

[  ] match_Sigma (cic.type cic.z) --> matita_basics_jmeq.match_Sigma_Type0.

[ return_sort, return_type, case_mk_Sigma, p1, __ ]
  match_Sigma return_sort return_type case_mk_Sigma
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  case_mk_Sigma
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __.

def filter_Sigma :
      return_sort : cic.Sort ->
      return_type :
        (z :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma ->
      cic.Term return_sort (return_type z).

[  ] filter_Sigma cic.prop --> matita_basics_jmeq.filter_Sigma_Prop.

[  ]
  filter_Sigma (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_jmeq.filter_Sigma_Type5.

[  ] filter_Sigma (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_jmeq.filter_Sigma_Type4.

[  ] filter_Sigma (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_jmeq.filter_Sigma_Type3.

[  ] filter_Sigma (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_jmeq.filter_Sigma_Type2.

[  ] filter_Sigma (cic.type (cic.s cic.z)) -->
  matita_basics_jmeq.filter_Sigma_Type1.

[  ] filter_Sigma (cic.type cic.z) --> matita_basics_jmeq.filter_Sigma_Type0.

[ return_sort1, p1, __, return_type, return ]
  filter_Sigma return_sort1 return_type return
    (matita_basics_jmeq.mk_Sigma p1 __) -->
  return
    (matita_basics_jmeq.mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) __).

def Sigma_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
              matita_basics_jmeq.Sigma
              (_x_1519 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ cic.prop))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                   matita_basics_jmeq.Sigma
                   (_x_1519 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                    (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1519 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1519)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1520))))
              (_H_mk_Sigma :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                         (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1519 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1519)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1520)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 matita_basics_jmeq.Sigma
                 (x_1519 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1519 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1519) x_1519)))).

def Sigma_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
              matita_basics_jmeq.Sigma
              (_x_1519 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ cic.prop))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                   matita_basics_jmeq.Sigma
                   (_x_1519 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ cic.prop)) =>
            cic.prod cic.prop cic.prop
              (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                    (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1519 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1519)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1520))))
              (_H_mk_Sigma :
                 cic.Term cic.prop
                   (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                         (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1519 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1519)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1520)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 matita_basics_jmeq.Sigma
                 (x_1519 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1519 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1519) x_1519)))).

[ Q_, _H_mk_Sigma, x_1519 ] Sigma_ind Q_ _H_mk_Sigma x_1519 -->
  matita_basics_jmeq.filter_Sigma cic.prop
    (x_1519 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1519 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1519) x_1519)
    (matita_basics_jmeq.Sigma_ind_body Q_ _H_mk_Sigma) x_1519.

[ Q_, _H_mk_Sigma, x_1519 ] Sigma_ind_body Q_ _H_mk_Sigma x_1519 -->
  matita_basics_jmeq.match_Sigma cic.prop
    (_x_1519 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1519)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1520)
    x_1519.

def Sigma_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (_x_1522 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (_x_1522 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                    (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1522 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1522)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1523))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                         (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1522 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1522)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1523)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (x_1522 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1522 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1522) x_1522)))).

def Sigma_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (_x_1522 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (_x_1522 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                    (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1522 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1522)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1523))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                         (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1522 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1522)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1523)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (x_1522 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1522 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1522) x_1522)))).

[ Q_, _H_mk_Sigma, x_1522 ] Sigma_rect_Type4 Q_ _H_mk_Sigma x_1522 -->
  matita_basics_jmeq.filter_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1522 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1522 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1522) x_1522)
    (matita_basics_jmeq.Sigma_rect_Type4_body Q_ _H_mk_Sigma) x_1522.

[ Q_, _H_mk_Sigma, x_1522 ] Sigma_rect_Type4_body Q_ _H_mk_Sigma x_1522 -->
  matita_basics_jmeq.match_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1522 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1522)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1523)
    x_1522.

def Sigma_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (_x_1525 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (_x_1525 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    p1
                    (x_1526 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1525 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1525)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1526))))
              (_H_mk_Sigma :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         p1
                         (x_1526 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1525 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1525)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1526)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (x_1525 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1525 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1525) x_1525)))).

def Sigma_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (_x_1525 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (_x_1525 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    p1
                    (x_1526 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1525 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1525)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1526))))
              (_H_mk_Sigma :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         p1
                         (x_1526 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1525 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1525)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1526)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (x_1525 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1525 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1525) x_1525)))).

[ Q_, _H_mk_Sigma, x_1525 ] Sigma_rect_Type5 Q_ _H_mk_Sigma x_1525 -->
  matita_basics_jmeq.filter_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1525 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1525 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1525) x_1525)
    (matita_basics_jmeq.Sigma_rect_Type5_body Q_ _H_mk_Sigma) x_1525.

[ Q_, _H_mk_Sigma, x_1525 ] Sigma_rect_Type5_body Q_ _H_mk_Sigma x_1525 -->
  matita_basics_jmeq.match_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1525 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1525)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1526 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1526)
    x_1525.

def Sigma_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (_x_1528 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (_x_1528 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                    (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1528 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1528)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1529))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                         (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1528 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1528)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1529)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (x_1528 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1528 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1528) x_1528)))).

def Sigma_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (_x_1528 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (_x_1528 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                    (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1528 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1528)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1529))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                         (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1528 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1528)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1529)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (x_1528 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1528 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1528) x_1528)))).

[ Q_, _H_mk_Sigma, x_1528 ] Sigma_rect_Type3 Q_ _H_mk_Sigma x_1528 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1528 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1528 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1528) x_1528)
    (matita_basics_jmeq.Sigma_rect_Type3_body Q_ _H_mk_Sigma) x_1528.

[ Q_, _H_mk_Sigma, x_1528 ] Sigma_rect_Type3_body Q_ _H_mk_Sigma x_1528 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1528 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1528)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1529)
    x_1528.

def Sigma_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (_x_1531 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (_x_1531 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) p1
                    (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1531 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1531)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1532))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) p1
                         (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1531 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1531)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1532)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (x_1531 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1531 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1531) x_1531)))).

def Sigma_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (_x_1531 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (_x_1531 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) p1
                    (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1531 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1531)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1532))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) p1
                         (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1531 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1531)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1532)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (x_1531 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1531 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1531) x_1531)))).

[ Q_, _H_mk_Sigma, x_1531 ] Sigma_rect_Type2 Q_ _H_mk_Sigma x_1531 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s (cic.s cic.z)))
    (x_1531 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1531 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1531) x_1531)
    (matita_basics_jmeq.Sigma_rect_Type2_body Q_ _H_mk_Sigma) x_1531.

[ Q_, _H_mk_Sigma, x_1531 ] Sigma_rect_Type2_body Q_ _H_mk_Sigma x_1531 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s (cic.s cic.z)))
    (_x_1531 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1531)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1532)
    x_1531.

def Sigma_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (_x_1534 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (_x_1534 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1
                    (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1534 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1534)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1535))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) p1
                         (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1534 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1534)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1535)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (x_1534 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1534 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1534) x_1534)))).

def Sigma_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (_x_1534 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (_x_1534 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1
                    (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1534 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1534)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1535))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) p1
                         (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1534 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1534)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1535)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (x_1534 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1534 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1534) x_1534)))).

[ Q_, _H_mk_Sigma, x_1534 ] Sigma_rect_Type1 Q_ _H_mk_Sigma x_1534 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s cic.z))
    (x_1534 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1534 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1534) x_1534)
    (matita_basics_jmeq.Sigma_rect_Type1_body Q_ _H_mk_Sigma) x_1534.

[ Q_, _H_mk_Sigma, x_1534 ] Sigma_rect_Type1_body Q_ _H_mk_Sigma x_1534 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s cic.z))
    (_x_1534 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1534)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1535)
    x_1534.

def Sigma_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (_x_1537 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (_x_1537 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                    (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1537 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1537)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1538))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                         (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1537 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1537)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1538)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (x_1537 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1537 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1537) x_1537)))).

def Sigma_rect_Type0_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (_x_1537 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (_x_1537 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                    (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1537 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1537)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1538))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                         (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1537 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1537)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1538)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (x_1537 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1537 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1537) x_1537)))).

[ Q_, _H_mk_Sigma, x_1537 ] Sigma_rect_Type0 Q_ _H_mk_Sigma x_1537 -->
  matita_basics_jmeq.filter_Sigma (cic.type cic.z)
    (x_1537 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1537 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1537) x_1537)
    (matita_basics_jmeq.Sigma_rect_Type0_body Q_ _H_mk_Sigma) x_1537.

[ Q_, _H_mk_Sigma, x_1537 ] Sigma_rect_Type0_body Q_ _H_mk_Sigma x_1537 -->
  matita_basics_jmeq.match_Sigma (cic.type cic.z)
    (_x_1537 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1537)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1538)
    x_1537.

def Sigma_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (_x_1540 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (_x_1540 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                    (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1540 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1540)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1541))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                         (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1540 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1540)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1541)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (x_1540 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1540 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1540) x_1540)))).

def Sigma_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              matita_basics_jmeq.Sigma
              (_x_1540 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   matita_basics_jmeq.Sigma
                   (_x_1540 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                    (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1540 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1540)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1541))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                         (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1540 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1540)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1541)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (x_1540 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1540 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1540) x_1540)))).

[ Q_, _H_mk_Sigma, x_1540 ] Sigma_rect_CProp4 Q_ _H_mk_Sigma x_1540 -->
  matita_basics_jmeq.filter_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_1540 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1540 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1540) x_1540)
    (matita_basics_jmeq.Sigma_rect_CProp4_body Q_ _H_mk_Sigma) x_1540.

[ Q_, _H_mk_Sigma, x_1540 ] Sigma_rect_CProp4_body Q_ _H_mk_Sigma x_1540 -->
  matita_basics_jmeq.match_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_1540 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1540)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1541)
    x_1540.

def Sigma_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (_x_1543 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (_x_1543 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    p1
                    (x_1544 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1543 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1543)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1544))))
              (_H_mk_Sigma :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         p1
                         (x_1544 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1543 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1543)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1544)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (x_1543 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1543 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1543) x_1543)))).

def Sigma_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              matita_basics_jmeq.Sigma
              (_x_1543 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   matita_basics_jmeq.Sigma
                   (_x_1543 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    p1
                    (x_1544 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1543 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1543)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1544))))
              (_H_mk_Sigma :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         p1
                         (x_1544 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1543 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1543)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1544)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (x_1543 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1543 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1543) x_1543)))).

[ Q_, _H_mk_Sigma, x_1543 ] Sigma_rect_CProp5 Q_ _H_mk_Sigma x_1543 -->
  matita_basics_jmeq.filter_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_1543 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1543 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1543) x_1543)
    (matita_basics_jmeq.Sigma_rect_CProp5_body Q_ _H_mk_Sigma) x_1543.

[ Q_, _H_mk_Sigma, x_1543 ] Sigma_rect_CProp5_body Q_ _H_mk_Sigma x_1543 -->
  matita_basics_jmeq.match_Sigma
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_1543 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1543)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1544 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1544)
    x_1543.

def Sigma_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (_x_1546 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (_x_1546 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                    (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1546 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1546)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1547))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                         (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1546 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1546)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1547)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (x_1546 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1546 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1546) x_1546)))).

def Sigma_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              matita_basics_jmeq.Sigma
              (_x_1546 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   matita_basics_jmeq.Sigma
                   (_x_1546 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                    (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1546 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1546)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1547))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                         (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1546 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1546)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1547)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (x_1546 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1546 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1546) x_1546)))).

[ Q_, _H_mk_Sigma, x_1546 ] Sigma_rect_CProp3 Q_ _H_mk_Sigma x_1546 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_1546 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1546 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1546) x_1546)
    (matita_basics_jmeq.Sigma_rect_CProp3_body Q_ _H_mk_Sigma) x_1546.

[ Q_, _H_mk_Sigma, x_1546 ] Sigma_rect_CProp3_body Q_ _H_mk_Sigma x_1546 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_1546 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1546)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1547)
    x_1546.

def Sigma_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (_x_1549 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (_x_1549 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) p1
                    (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1549 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1549)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1550))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) p1
                         (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1549 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1549)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1550)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (x_1549 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1549 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1549) x_1549)))).

def Sigma_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              matita_basics_jmeq.Sigma
              (_x_1549 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   matita_basics_jmeq.Sigma
                   (_x_1549 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) p1
                    (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1549 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1549)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1550))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) p1
                         (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1549 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1549)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1550)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (x_1549 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1549 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1549) x_1549)))).

[ Q_, _H_mk_Sigma, x_1549 ] Sigma_rect_CProp2 Q_ _H_mk_Sigma x_1549 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s (cic.s cic.z)))
    (x_1549 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1549 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1549) x_1549)
    (matita_basics_jmeq.Sigma_rect_CProp2_body Q_ _H_mk_Sigma) x_1549.

[ Q_, _H_mk_Sigma, x_1549 ] Sigma_rect_CProp2_body Q_ _H_mk_Sigma x_1549 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s (cic.s cic.z)))
    (_x_1549 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1549)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1550)
    x_1549.

def Sigma_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (_x_1552 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (_x_1552 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1
                    (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1552 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1552)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1553))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) p1
                         (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1552 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1552)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1553)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (x_1552 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1552 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1552) x_1552)))).

def Sigma_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
              (_x_1552 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type (cic.s cic.z))))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                   (_x_1552 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type (cic.s cic.z)))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    p1
                    (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1552 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1552)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1553))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) p1
                         (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1552 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1552)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1553)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (x_1552 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1552 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1552) x_1552)))).

[ Q_, _H_mk_Sigma, x_1552 ] Sigma_rect_CProp1 Q_ _H_mk_Sigma x_1552 -->
  matita_basics_jmeq.filter_Sigma (cic.type (cic.s cic.z))
    (x_1552 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1552 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1552) x_1552)
    (matita_basics_jmeq.Sigma_rect_CProp1_body Q_ _H_mk_Sigma) x_1552.

[ Q_, _H_mk_Sigma, x_1552 ] Sigma_rect_CProp1_body Q_ _H_mk_Sigma x_1552 -->
  matita_basics_jmeq.match_Sigma (cic.type (cic.s cic.z))
    (_x_1552 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1552)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1553)
    x_1552.

def Sigma_rect_CProp0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (_x_1555 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (_x_1555 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                    (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1555 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1555)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1556))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                         (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1555 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1555)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1556)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (x_1555 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1555 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1555) x_1555)))).

def Sigma_rect_CProp0_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
              (_x_1555 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.univ (cic.type cic.z)))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                   (_x_1555 :
                      cic.Term (cic.type (cic.s (cic.s cic.z)))
                        matita_basics_jmeq.Sigma =>
                    cic.univ (cic.type cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                    (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                     (_x_1555 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      Q_ _x_1555)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) p1)
                          x_1556))))
              (_H_mk_Sigma :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type (cic.s cic.z)))
                      (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                         (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                          (_x_1555 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           Q_ _x_1555)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) p1)
                               x_1556)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (x_1555 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  (_x_1555 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   Q_ _x_1555) x_1555)))).

[ Q_, _H_mk_Sigma, x_1555 ] Sigma_rect_CProp0 Q_ _H_mk_Sigma x_1555 -->
  matita_basics_jmeq.filter_Sigma (cic.type cic.z)
    (x_1555 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     (_x_1555 :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Q_ _x_1555) x_1555)
    (matita_basics_jmeq.Sigma_rect_CProp0_body Q_ _H_mk_Sigma) x_1555.

[ Q_, _H_mk_Sigma, x_1555 ] Sigma_rect_CProp0_body Q_ _H_mk_Sigma x_1555 -->
  matita_basics_jmeq.match_Sigma (cic.type cic.z)
    (_x_1555 :
       cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
     Q_ _x_1555)
    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
     _H_mk_Sigma
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1) x_1556)
    x_1555.

def Sigma_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
              (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 matita_basics_jmeq.Sigma
                 (_z2864 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ cic.prop))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type cic.z) matita_basics_jmeq.Sigma
                      (_z2864 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ cic.prop)) =>
               cic.prod cic.prop cic.prop
                 (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                       (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1520))
                          (_z2865 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1520)) =>
                           (_z2864 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2864)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1520)))))
                 (_H1 :
                    cic.Term cic.prop
                      (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                            (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1520))
                               (_z2865 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1520)) =>
                                (_z2864 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2864)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1520))))) =>
                  (_z2864 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2864) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
             matita_basics_jmeq.Sigma
             (_z2864 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ cic.prop)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) cic.prop p1
                (x_1520 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1520))
                   (_z2865 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1520)) =>
                    (_z2864 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2864)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1520))))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2865 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2864 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2864) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_ind
           (_x_1519 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1519)
                 (_z2865 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1519) =>
                  (_z2864 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2864) _x_1519)))
           H1 Hterm).

def Sigma_inv_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (_z2870 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_jmeq.Sigma
                      (_z2870 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                       (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1523))
                          (_z2871 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1523)) =>
                           (_z2870 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2870)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1523)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            p1
                            (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1523))
                               (_z2871 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1523)) =>
                                (_z2870 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2870)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1523))))) =>
                  (_z2870 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2870) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             matita_basics_jmeq.Sigma
             (_z2870 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                (x_1523 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1523))
                   (_z2871 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1523)) =>
                    (_z2870 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2870)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1523))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2871 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2870 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2870) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_Type4
           (_x_1522 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1522)
                 (_z2871 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1522) =>
                  (_z2870 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2870) _x_1522)))
           H1 Hterm).

def Sigma_inv_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (_z2876 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_jmeq.Sigma
                      (_z2876 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                       (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1529))
                          (_z2877 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1529)) =>
                           (_z2876 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2876)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1529)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                            (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1529))
                               (_z2877 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1529)) =>
                                (_z2876 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2876)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1529))))) =>
                  (_z2876 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2876) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_jmeq.Sigma
             (_z2876 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                (x_1529 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1529))
                   (_z2877 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1529)) =>
                    (_z2876 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2876)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1529))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2877 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2876 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2876) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_Type3
           (_x_1528 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1528)
                 (_z2877 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1528) =>
                  (_z2876 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2876) _x_1528)))
           H1 Hterm).

def Sigma_inv_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (_z2882 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_jmeq.Sigma
                      (_z2882 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) p1
                       (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1532))
                          (_z2883 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1532)) =>
                           (_z2882 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2882)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1532)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) p1
                            (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1532))
                               (_z2883 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1532)) =>
                                (_z2882 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2882)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1532))))) =>
                  (_z2882 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2882) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_jmeq.Sigma
             (_z2882 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) p1
                (x_1532 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1532))
                   (_z2883 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1532)) =>
                    (_z2882 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2882)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1532))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2883 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2882 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2882) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_Type2
           (_x_1531 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1531)
                 (_z2883 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1531) =>
                  (_z2882 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2882) _x_1531)))
           H1 Hterm).

def Sigma_inv_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (_z2888 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s cic.z))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma
                      (_z2888 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s cic.z)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) p1
                       (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1535))
                          (_z2889 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1535)) =>
                           (_z2888 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2888)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1535)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1
                            (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1535))
                               (_z2889 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1535)) =>
                                (_z2888 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2888)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1535))))) =>
                  (_z2888 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2888) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
             (_z2888 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s cic.z)))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1
                (x_1535 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1535))
                   (_z2889 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1535)) =>
                    (_z2888 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2888)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1535))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2889 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2888 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2888) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_Type1
           (_x_1534 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1534)
                 (_z2889 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1534) =>
                  (_z2888 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2888) _x_1534)))
           H1 Hterm).

def Sigma_inv_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (_z2894 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type cic.z)))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                      (_z2894 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type cic.z))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                       (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1538))
                          (_z2895 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1538)) =>
                           (_z2894 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2894)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1538)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                            p1
                            (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1538))
                               (_z2895 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1538)) =>
                                (_z2894 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2894)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1538))))) =>
                  (_z2894 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2894) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             matita_basics_jmeq.Sigma
             (_z2894 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type cic.z))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                (x_1538 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type cic.z)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1538))
                   (_z2895 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1538)) =>
                    (_z2894 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2894)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1538))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2895 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2894 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2894) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_Type0
           (_x_1537 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1537)
                 (_z2895 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1537) =>
                  (_z2894 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2894) _x_1537)))
           H1 Hterm).

def Sigma_inv_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 matita_basics_jmeq.Sigma
                 (_z2900 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      matita_basics_jmeq.Sigma
                      (_z2900 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                       (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1541))
                          (_z2901 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1541)) =>
                           (_z2900 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2900)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1541)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            p1
                            (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1541))
                               (_z2901 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1541)) =>
                                (_z2900 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2900)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1541))))) =>
                  (_z2900 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2900) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             matita_basics_jmeq.Sigma
             (_z2900 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) p1
                (x_1541 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1541))
                   (_z2901 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1541)) =>
                    (_z2900 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2900)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1541))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2901 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2900 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2900) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_CProp4
           (_x_1540 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1540)
                 (_z2901 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1540) =>
                  (_z2900 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2900) _x_1540)))
           H1 Hterm).

def Sigma_inv_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 matita_basics_jmeq.Sigma
                 (_z2906 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      matita_basics_jmeq.Sigma
                      (_z2906 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                       (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1547))
                          (_z2907 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1547)) =>
                           (_z2906 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2906)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1547)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                            (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1547))
                               (_z2907 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1547)) =>
                                (_z2906 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2906)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1547))))) =>
                  (_z2906 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2906) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             matita_basics_jmeq.Sigma
             (_z2906 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) p1
                (x_1547 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1547))
                   (_z2907 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1547)) =>
                    (_z2906 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2906)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1547))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2907 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2906 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2906) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_CProp3
           (_x_1546 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1546)
                 (_z2907 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1546) =>
                  (_z2906 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2906) _x_1546)))
           H1 Hterm).

def Sigma_inv_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 matita_basics_jmeq.Sigma
                 (_z2912 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      matita_basics_jmeq.Sigma
                      (_z2912 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) p1
                       (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1550))
                          (_z2913 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1550)) =>
                           (_z2912 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2912)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1550)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) p1
                            (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1550))
                               (_z2913 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1550)) =>
                                (_z2912 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2912)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1550))))) =>
                  (_z2912 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2912) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             matita_basics_jmeq.Sigma
             (_z2912 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) p1
                (x_1550 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1550))
                   (_z2913 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1550)) =>
                    (_z2912 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2912)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1550))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2913 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2912 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2912) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_CProp2
           (_x_1549 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1549)
                 (_z2913 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1549) =>
                  (_z2912 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2912) _x_1549)))
           H1 Hterm).

def Sigma_inv_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
                 (_z2918 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type (cic.s cic.z))))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma
                      (_z2918 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type (cic.s cic.z)))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) p1
                       (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1553))
                          (_z2919 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1553)) =>
                           (_z2918 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2918)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1553)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1
                            (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1553))
                               (_z2919 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1553)) =>
                                (_z2918 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2918)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1553))))) =>
                  (_z2918 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2918) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
             (_z2918 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type (cic.s cic.z)))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) p1
                (x_1553 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1553))
                   (_z2919 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1553)) =>
                    (_z2918 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2918)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1553))))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2919 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2918 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2918) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_CProp1
           (_x_1552 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1552)
                 (_z2919 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1552) =>
                  (_z2918 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2918) _x_1552)))
           H1 Hterm).

def Sigma_inv_rect_CProp0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
           (Hterm :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                 (_z2924 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma =>
                  cic.univ (cic.type cic.z)))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z)) matita_basics_jmeq.Sigma
                      (_z2924 :
                         cic.Term (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma =>
                       cic.univ (cic.type cic.z))) =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                       (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             Hterm
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1556))
                          (_z2925 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1556)) =>
                           (_z2924 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            P _z2924)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) p1)
                                x_1556)))))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                            p1
                            (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  Hterm
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1556))
                               (_z2925 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z))) A)
                                        _x __)
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_jmeq.Sigma)
                                       Hterm
                                       (matita_basics_jmeq.mk_Sigma
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) p1)
                                          x_1556)) =>
                                (_z2924 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma =>
                                 P _z2924)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) p1)
                                     x_1556))))) =>
                  (_z2924 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2924) Hterm))))
      :=
      Hterm :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             matita_basics_jmeq.Sigma
             (_z2924 :
                cic.Term (cic.type (cic.s (cic.s cic.z)))
                  matita_basics_jmeq.Sigma =>
              cic.univ (cic.type cic.z))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (p1 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) p1
                (x_1556 : cic.Term (cic.type (cic.s cic.z)) p1 =>
                 cic.prod cic.prop (cic.type cic.z)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1556))
                   (_z2925 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_jmeq.Sigma)
                           Hterm
                           (matita_basics_jmeq.mk_Sigma
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) p1)
                              x_1556)) =>
                    (_z2924 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     P _z2924)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) p1)
                         x_1556))))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 Hterm Hterm)
              (_z2925 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      Hterm Hterm) =>
               (_z2924 :
                  cic.Term (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_jmeq.Sigma =>
                P _z2924) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
            Hterm))
        (matita_basics_jmeq.Sigma_rect_CProp0
           (_x_1555 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Hterm _x_1555)
                 (_z2925 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Hterm _x_1555) =>
                  (_z2924 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   P _z2924) _x_1555)))
           H1 Hterm).

def p1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma
           (__ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.univ (cic.type (cic.s cic.z))))
      :=
      S :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      matita_basics_jmeq.match_Sigma (cic.type (cic.s (cic.s cic.z)))
        (__ :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
         cic.univ (cic.type (cic.s cic.z)))
        (Y : cic.Univ (cic.type (cic.s cic.z)) =>
         __ : cic.Term (cic.type (cic.s cic.z)) Y => Y)
        S.

def p2 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           matita_basics_jmeq.Sigma
           (S :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            (__ :
               cic.Term (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_jmeq.Sigma =>
             matita_basics_jmeq.p1 __) S))
      :=
      S :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      matita_basics_jmeq.match_Sigma (cic.type (cic.s cic.z))
        (__ :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
         (__1 :
            cic.Term (cic.type (cic.s (cic.s cic.z)))
              matita_basics_jmeq.Sigma =>
          matita_basics_jmeq.p1 __1) __)
        (Y : cic.Univ (cic.type (cic.s cic.z)) =>
         x : cic.Term (cic.type (cic.s cic.z)) Y => x)
        S.

jmeq :
  cic.Term (cic.type (cic.s (cic.s cic.z)))
    (cic.prod (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z))) (cic.univ (cic.type (cic.s cic.z)))
       (A : cic.Univ (cic.type (cic.s cic.z)) =>
        cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) A
          (_x : cic.Term (cic.type (cic.s cic.z)) A =>
           cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (B : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                 cic.univ cic.prop))))).

refl_jmeq :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
       (cic.univ (cic.type (cic.s cic.z)))
       (A : cic.Univ (cic.type (cic.s cic.z)) =>
        cic.prod (cic.type (cic.s cic.z)) cic.prop A
          (x : cic.Term (cic.type (cic.s cic.z)) A =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x))).

def match_jmeq_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type cic.z)
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ cic.prop))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                            B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type cic.z)
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ cic.prop)))) =>
                  cic.prod cic.prop cic.prop
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term cic.prop
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) cic.prop B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop cic.prop
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Prop A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))))
                 (return_type :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type5 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (return_type :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type4 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type3 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type2 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s cic.z))))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term (cic.type (cic.s cic.z))
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type1 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def match_jmeq_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B
                       (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type cic.z)))))
                 (return_type :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B
                            (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type cic.z))))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (return_type A _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (case_refl_jmeq :
                       cic.Term (cic.type cic.z)
                         (return_type A _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                          (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __ z)))))))).

[ A, _x, return_type, case_refl_jmeq ]
  match_jmeq_Type0 A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def filter_jmeq_Prop :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) cic.prop B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod (cic.type cic.z) cic.prop
                       (cic.prod cic.prop (cic.type cic.z)
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ cic.prop))
                       (return_type :
                          cic.Term (cic.type cic.z)
                            (cic.prod cic.prop (cic.type cic.z)
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ cic.prop)) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop cic.prop
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Prop (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                       (return_type :
                          cic.Term
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
                        cic.prod
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type5 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       (return_type :
                          cic.Term
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))) =>
                        cic.prod
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod cic.prop
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type4 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))
                       (return_type :
                          cic.Term
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type3 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))
                       (return_type :
                          cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod cic.prop
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type2 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type (cic.s cic.z))))
                       (return_type :
                          cic.Term (cic.type (cic.s (cic.s cic.z)))
                            (cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type (cic.s cic.z)))) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type (cic.s cic.z))
                               (cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type1 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def filter_jmeq_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
                 (B : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    B
                    (__ : cic.Term (cic.type (cic.s cic.z)) B =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                       (cic.prod cic.prop (cic.type (cic.s cic.z))
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                          (z :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __) =>
                           cic.univ (cic.type cic.z)))
                       (return_type :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z))
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  __)
                               (z :
                                  cic.Term cic.prop
                                    (matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __) =>
                                cic.univ (cic.type cic.z))) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.prod cic.prop (cic.type cic.z)
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z))
                          (return :
                             cic.Term (cic.type cic.z)
                               (cic.prod cic.prop (cic.type cic.z)
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                  (z :
                                     cic.Term cic.prop
                                       (matita_basics_jmeq.jmeq
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) A)
                                          _x
                                          (cic.lift (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z)) B)
                                          __) =>
                                   return_type z)) =>
                           cic.prod cic.prop (cic.type cic.z)
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                             (z :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __) =>
                              return_type z)))))))).

[ A, x, return_type, return ]
  filter_jmeq_Type0 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def match_jmeq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s cic.z)) ->
      _x : cic.Term (cic.type (cic.s cic.z)) A ->
      return_type :
        (B : cic.Univ (cic.type (cic.s cic.z)) ->
         __ : cic.Term (cic.type (cic.s cic.z)) B ->
         z :
           cic.Term cic.prop
             (matita_basics_jmeq.jmeq
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                _x
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
                __) ->
         cic.Univ return_sort) ->
      case_refl_jmeq :
        cic.Term return_sort
          (return_type A _x
             (matita_basics_jmeq.refl_jmeq
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                _x)) ->
      B : cic.Univ (cic.type (cic.s cic.z)) ->
      __ : cic.Term (cic.type (cic.s cic.z)) B ->
      z :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
             __) ->
      cic.Term return_sort
        (return_type
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) __
           z).

[  ] match_jmeq cic.prop --> matita_basics_jmeq.match_jmeq_Prop.

[  ] match_jmeq (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_jmeq.match_jmeq_Type5.

[  ] match_jmeq (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_jmeq.match_jmeq_Type4.

[  ] match_jmeq (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_jmeq.match_jmeq_Type3.

[  ] match_jmeq (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_jmeq.match_jmeq_Type2.

[  ] match_jmeq (cic.type (cic.s cic.z)) -->
  matita_basics_jmeq.match_jmeq_Type1.

[  ] match_jmeq (cic.type cic.z) --> matita_basics_jmeq.match_jmeq_Type0.

[ return_sort, A, _x, return_type, case_refl_jmeq ]
  match_jmeq return_sort A _x return_type case_refl_jmeq (A) (_x)
    (matita_basics_jmeq.refl_jmeq A _x) -->
  case_refl_jmeq.

def filter_jmeq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s cic.z)) ->
      _x : cic.Term (cic.type (cic.s cic.z)) A ->
      B : cic.Univ (cic.type (cic.s cic.z)) ->
      __ : cic.Term (cic.type (cic.s cic.z)) B ->
      return_type :
        (z :
           cic.Term cic.prop
             (matita_basics_jmeq.jmeq
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                _x
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
                __) ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term cic.prop
             (matita_basics_jmeq.jmeq
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                _x
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
                __) ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
             __) ->
      cic.Term return_sort (return_type z).

[  ] filter_jmeq cic.prop --> matita_basics_jmeq.filter_jmeq_Prop.

[  ] filter_jmeq (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) -->
  matita_basics_jmeq.filter_jmeq_Type5.

[  ] filter_jmeq (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) -->
  matita_basics_jmeq.filter_jmeq_Type4.

[  ] filter_jmeq (cic.type (cic.s (cic.s (cic.s cic.z)))) -->
  matita_basics_jmeq.filter_jmeq_Type3.

[  ] filter_jmeq (cic.type (cic.s (cic.s cic.z))) -->
  matita_basics_jmeq.filter_jmeq_Type2.

[  ] filter_jmeq (cic.type (cic.s cic.z)) -->
  matita_basics_jmeq.filter_jmeq_Type1.

[  ] filter_jmeq (cic.type cic.z) --> matita_basics_jmeq.filter_jmeq_Type0.

[ return_sort1, A, x, return_type, return ]
  filter_jmeq return_sort1 (A) (x) (A) (x) return_type return
    (matita_basics_jmeq.refl_jmeq A x) -->
  return
    (matita_basics_jmeq.refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x).

def jmeq_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                       (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558)
                          (_x_1559 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558) =>
                           cic.univ cic.prop))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                            B
                            (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558)
                               (_x_1559 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1558) =>
                                cic.univ cic.prop)))) =>
                  cic.prod cic.prop cic.prop
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1559 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1558 _x_1559)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term cic.prop
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1559 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558 _x_1559)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) cic.prop B
                          (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop cic.prop
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1558)
                             (x_1559 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1558) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15581 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1559 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15581) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15581 _x_1559)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1558 x_1559)))))))).

def jmeq_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                       (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558)
                          (_x_1559 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558) =>
                           cic.univ cic.prop))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                            B
                            (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type cic.z)
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558)
                               (_x_1559 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1558) =>
                                cic.univ cic.prop)))) =>
                  cic.prod cic.prop cic.prop
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1559 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1558 _x_1559)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term cic.prop
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1559 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1558) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1558 _x_1559)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) cic.prop B
                          (x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop cic.prop
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1558)
                             (x_1559 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1558) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15581 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1559 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15581) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15581 _x_1559)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1558 x_1559)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1558, x_1559 ]
  jmeq_ind A _x Q_ _H_refl_jmeq B x_1558 x_1559 -->
  matita_basics_jmeq.filter_jmeq cic.prop A _x B x_1558
    (x_1559 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1558) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15581 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1559 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15581) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15581 _x_1559)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1558
       x_1559)
    (matita_basics_jmeq.jmeq_ind_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1558)
    x_1559.

[ A, _x, Q_, _H_refl_jmeq, B, x_1558, x_1559 ]
  jmeq_ind_body A _x Q_ _H_refl_jmeq B x_1558 x_1559 -->
  matita_basics_jmeq.match_jmeq cic.prop
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15581 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1559 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15581) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15581 _x_1559)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1558
    x_1559.

def jmeq_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       B
                       (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561)
                          (_x_1562 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            B
                            (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561)
                               (_x_1562 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1561) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1562 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1561 _x_1562)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1562 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561 _x_1562)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                          (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1561)
                             (x_1562 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1561) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15611 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1562 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15611) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15611 _x_1562)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1561 x_1562)))))))).

def jmeq_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       B
                       (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561)
                          (_x_1562 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            B
                            (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561)
                               (_x_1562 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1561) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1562 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1561 _x_1562)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1562 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1561) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1561 _x_1562)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                          (x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1561)
                             (x_1562 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1561) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15611 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1562 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15611) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15611 _x_1562)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1561 x_1562)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1561, x_1562 ]
  jmeq_rect_Type4 A _x Q_ _H_refl_jmeq B x_1561 x_1562 -->
  matita_basics_jmeq.filter_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A _x B x_1561
    (x_1562 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1561) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15611 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1562 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15611) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15611 _x_1562)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1561
       x_1562)
    (matita_basics_jmeq.jmeq_rect_Type4_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1561)
    x_1562.

[ A, _x, Q_, _H_refl_jmeq, B, x_1561, x_1562 ]
  jmeq_rect_Type4_body A _x Q_ _H_refl_jmeq B x_1561 x_1562 -->
  matita_basics_jmeq.match_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15611 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1562 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15611) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15611 _x_1562)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1561
    x_1562.

def jmeq_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       B
                       (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564)
                          (_x_1565 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            B
                            (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564)
                               (_x_1565 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1564) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1565 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1564 _x_1565)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1565 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564 _x_1565)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          B
                          (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1564)
                             (x_1565 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1564) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15641 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1565 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15641) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15641 _x_1565)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1564 x_1565)))))))).

def jmeq_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       B
                       (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564)
                          (_x_1565 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            B
                            (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564)
                               (_x_1565 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1564) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1565 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1564 _x_1565)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1565 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1564) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1564 _x_1565)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          B
                          (x_1564 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1564)
                             (x_1565 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1564) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15641 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1565 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15641) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15641 _x_1565)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1564 x_1565)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1564, x_1565 ]
  jmeq_rect_Type5 A _x Q_ _H_refl_jmeq B x_1564 x_1565 -->
  matita_basics_jmeq.filter_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A _x B x_1564
    (x_1565 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1564) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15641 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1565 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15641) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15641 _x_1565)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1564
       x_1565)
    (matita_basics_jmeq.jmeq_rect_Type5_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1564)
    x_1565.

[ A, _x, Q_, _H_refl_jmeq, B, x_1564, x_1565 ]
  jmeq_rect_Type5_body A _x Q_ _H_refl_jmeq B x_1564 x_1565 -->
  matita_basics_jmeq.match_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15641 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1565 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15641) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15641 _x_1565)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1564
    x_1565.

def jmeq_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                       (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567)
                          (_x_1568 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            B
                            (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567)
                               (_x_1568 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1567) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1568 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1567 _x_1568)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1568 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567 _x_1568)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                          (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1567)
                             (x_1568 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1567) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15671 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1568 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15671) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15671 _x_1568)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1567 x_1568)))))))).

def jmeq_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                       (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567)
                          (_x_1568 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            B
                            (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567)
                               (_x_1568 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1567) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1568 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1567 _x_1568)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1568 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1567) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1567 _x_1568)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                          (x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1567)
                             (x_1568 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1567) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15671 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1568 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15671) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15671 _x_1568)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1567 x_1568)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1567, x_1568 ]
  jmeq_rect_Type3 A _x Q_ _H_refl_jmeq B x_1567 x_1568 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s (cic.s (cic.s cic.z)))) A
    _x B x_1567
    (x_1568 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1567) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15671 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1568 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15671) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15671 _x_1568)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1567
       x_1568)
    (matita_basics_jmeq.jmeq_rect_Type3_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1567)
    x_1568.

[ A, _x, Q_, _H_refl_jmeq, B, x_1567, x_1568 ]
  jmeq_rect_Type3_body A _x Q_ _H_refl_jmeq B x_1567 x_1568 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15671 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1568 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15671) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15671 _x_1568)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1567
    x_1568.

def jmeq_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                       (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570)
                          (_x_1571 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                            (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570)
                               (_x_1571 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1570) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1571 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1570 _x_1571)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1571 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570 _x_1571)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B
                          (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1570)
                             (x_1571 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1570) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15701 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1571 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15701) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15701 _x_1571)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1570 x_1571)))))))).

def jmeq_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                       (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570)
                          (_x_1571 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                            (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570)
                               (_x_1571 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1570) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1571 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1570 _x_1571)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1571 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1570) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1570 _x_1571)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B
                          (x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1570)
                             (x_1571 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1570) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15701 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1571 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15701) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15701 _x_1571)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1570 x_1571)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1570, x_1571 ]
  jmeq_rect_Type2 A _x Q_ _H_refl_jmeq B x_1570 x_1571 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s (cic.s cic.z))) A _x B
    x_1570
    (x_1571 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1570) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15701 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1571 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15701) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15701 _x_1571)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1570
       x_1571)
    (matita_basics_jmeq.jmeq_rect_Type2_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1570)
    x_1571.

[ A, _x, Q_, _H_refl_jmeq, B, x_1570, x_1571 ]
  jmeq_rect_Type2_body A _x Q_ _H_refl_jmeq B x_1570 x_1571 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s (cic.s cic.z)))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15701 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1571 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15701) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15701 _x_1571)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1570
    x_1571.

def jmeq_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) B
                       (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573)
                          (_x_1574 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573) =>
                           cic.univ (cic.type (cic.s cic.z))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) B
                            (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573)
                               (_x_1574 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1573) =>
                                cic.univ (cic.type (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1574 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1573 _x_1574)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s cic.z))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1574 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573 _x_1574)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B
                          (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1573)
                             (x_1574 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1573) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15731 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1574 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15731) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15731 _x_1574)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1573 x_1574)))))))).

def jmeq_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) B
                       (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573)
                          (_x_1574 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573) =>
                           cic.univ (cic.type (cic.s cic.z))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) B
                            (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573)
                               (_x_1574 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1573) =>
                                cic.univ (cic.type (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1574 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1573 _x_1574)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s cic.z))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1574 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1573) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1573 _x_1574)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B
                          (x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1573)
                             (x_1574 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1573) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15731 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1574 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15731) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15731 _x_1574)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1573 x_1574)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1573, x_1574 ]
  jmeq_rect_Type1 A _x Q_ _H_refl_jmeq B x_1573 x_1574 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s cic.z)) A _x B x_1573
    (x_1574 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1573) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15731 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1574 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15731) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15731 _x_1574)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1573
       x_1574)
    (matita_basics_jmeq.jmeq_rect_Type1_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1573)
    x_1574.

[ A, _x, Q_, _H_refl_jmeq, B, x_1573, x_1574 ]
  jmeq_rect_Type1_body A _x Q_ _H_refl_jmeq B x_1573 x_1574 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s cic.z))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15731 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1574 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15731) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15731 _x_1574)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1573
    x_1574.

def jmeq_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B
                       (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576)
                          (_x_1577 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576) =>
                           cic.univ (cic.type cic.z)))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B
                            (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576)
                               (_x_1577 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1576) =>
                                cic.univ (cic.type cic.z))))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1577 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1576 _x_1577)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type cic.z)
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1577 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576 _x_1577)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                          (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type cic.z)
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1576)
                             (x_1577 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1576) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15761 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1577 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15761) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15761 _x_1577)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1576 x_1577)))))))).

def jmeq_rect_Type0_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B
                       (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576)
                          (_x_1577 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576) =>
                           cic.univ (cic.type cic.z)))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B
                            (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576)
                               (_x_1577 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1576) =>
                                cic.univ (cic.type cic.z))))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1577 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1576 _x_1577)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type cic.z)
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1577 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1576) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1576 _x_1577)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                          (x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type cic.z)
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1576)
                             (x_1577 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1576) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15761 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1577 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15761) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15761 _x_1577)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1576 x_1577)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1576, x_1577 ]
  jmeq_rect_Type0 A _x Q_ _H_refl_jmeq B x_1576 x_1577 -->
  matita_basics_jmeq.filter_jmeq (cic.type cic.z) A _x B x_1576
    (x_1577 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1576) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15761 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1577 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15761) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15761 _x_1577)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1576
       x_1577)
    (matita_basics_jmeq.jmeq_rect_Type0_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1576)
    x_1577.

[ A, _x, Q_, _H_refl_jmeq, B, x_1576, x_1577 ]
  jmeq_rect_Type0_body A _x Q_ _H_refl_jmeq B x_1576 x_1577 -->
  matita_basics_jmeq.match_jmeq (cic.type cic.z)
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15761 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1577 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15761) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15761 _x_1577)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1576
    x_1577.

def jmeq_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       B
                       (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579)
                          (_x_1580 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            B
                            (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579)
                               (_x_1580 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1579) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1580 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1579 _x_1580)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1580 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579 _x_1580)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                          (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1579)
                             (x_1580 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1579) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15791 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1580 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15791) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15791 _x_1580)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1579 x_1580)))))))).

def jmeq_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       B
                       (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579)
                          (_x_1580 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579) =>
                           cic.univ
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))))
                 (Q_ :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                            B
                            (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579)
                               (_x_1580 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1579) =>
                                cic.univ
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1580 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1579 _x_1580)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1580 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1579) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1579 _x_1580)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                          (x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1579)
                             (x_1580 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1579) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15791 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1580 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15791) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15791 _x_1580)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1579 x_1580)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1579, x_1580 ]
  jmeq_rect_CProp4 A _x Q_ _H_refl_jmeq B x_1579 x_1580 -->
  matita_basics_jmeq.filter_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A _x B x_1579
    (x_1580 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1579) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15791 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1580 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15791) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15791 _x_1580)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1579
       x_1580)
    (matita_basics_jmeq.jmeq_rect_CProp4_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1579)
    x_1580.

[ A, _x, Q_, _H_refl_jmeq, B, x_1579, x_1580 ]
  jmeq_rect_CProp4_body A _x Q_ _H_refl_jmeq B x_1579 x_1580 -->
  matita_basics_jmeq.match_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15791 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1580 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15791) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15791 _x_1580)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1579
    x_1580.

def jmeq_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       B
                       (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582)
                          (_x_1583 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            B
                            (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582)
                               (_x_1583 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1582) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1583 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1582 _x_1583)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1583 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582 _x_1583)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          B
                          (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1582)
                             (x_1583 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1582) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15821 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1583 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15821) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15821 _x_1583)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1582 x_1583)))))))).

def jmeq_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type
                       (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type
                          (cic.s
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                       B
                       (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type
                             (cic.s
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582)
                          (_x_1583 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582) =>
                           cic.univ
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))))))
                 (Q_ :
                    cic.Term
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type
                            (cic.s
                               (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type
                               (cic.s
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                            B
                            (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582)
                               (_x_1583 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1582) =>
                                cic.univ
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))))))) =>
                  cic.prod
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1583 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1582 _x_1583)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1583 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1582) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1582 _x_1583)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          B
                          (x_1582 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1582)
                             (x_1583 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1582) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15821 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1583 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15821) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15821 _x_1583)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1582 x_1583)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1582, x_1583 ]
  jmeq_rect_CProp5 A _x Q_ _H_refl_jmeq B x_1582 x_1583 -->
  matita_basics_jmeq.filter_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) A _x B x_1582
    (x_1583 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1582) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15821 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1583 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15821) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15821 _x_1583)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1582
       x_1583)
    (matita_basics_jmeq.jmeq_rect_CProp5_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1582)
    x_1583.

[ A, _x, Q_, _H_refl_jmeq, B, x_1582, x_1583 ]
  jmeq_rect_CProp5_body A _x Q_ _H_refl_jmeq B x_1582 x_1583 -->
  matita_basics_jmeq.match_jmeq
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15821 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1583 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15821) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15821 _x_1583)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1582
    x_1583.

def jmeq_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                       (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585)
                          (_x_1586 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            B
                            (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585)
                               (_x_1586 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1585) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1586 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1585 _x_1586)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1586 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585 _x_1586)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                          (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1585)
                             (x_1586 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1585) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15851 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1586 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15851) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15851 _x_1586)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1585 x_1586)))))))).

def jmeq_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) B
                       (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585)
                          (_x_1586 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585) =>
                           cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            B
                            (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585)
                               (_x_1586 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1585) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s (cic.s cic.z)))))))) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1586 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1585 _x_1586)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1586 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1585) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1585 _x_1586)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                          (x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1585)
                             (x_1586 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1585) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15851 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1586 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15851) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15851 _x_1586)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1585 x_1586)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1585, x_1586 ]
  jmeq_rect_CProp3 A _x Q_ _H_refl_jmeq B x_1585 x_1586 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s (cic.s (cic.s cic.z)))) A
    _x B x_1585
    (x_1586 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1585) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15851 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1586 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15851) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15851 _x_1586)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1585
       x_1586)
    (matita_basics_jmeq.jmeq_rect_CProp3_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1585)
    x_1586.

[ A, _x, Q_, _H_refl_jmeq, B, x_1585, x_1586 ]
  jmeq_rect_CProp3_body A _x Q_ _H_refl_jmeq B x_1585 x_1586 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15851 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1586 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15851) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15851 _x_1586)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1585
    x_1586.

def jmeq_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                       (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588)
                          (_x_1589 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                            (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588)
                               (_x_1589 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1588) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1589 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1588 _x_1589)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1589 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588 _x_1589)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B
                          (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1588)
                             (x_1589 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1588) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15881 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1589 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15881) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15881 _x_1589)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1588 x_1589)))))))).

def jmeq_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                       (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588)
                          (_x_1589 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588) =>
                           cic.univ (cic.type (cic.s (cic.s cic.z)))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) B
                            (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588)
                               (_x_1589 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1588) =>
                                cic.univ (cic.type (cic.s (cic.s cic.z))))))) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1589 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1588 _x_1589)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1589 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1588) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1588 _x_1589)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B
                          (x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1588)
                             (x_1589 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1588) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15881 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1589 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15881) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15881 _x_1589)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1588 x_1589)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1588, x_1589 ]
  jmeq_rect_CProp2 A _x Q_ _H_refl_jmeq B x_1588 x_1589 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s (cic.s cic.z))) A _x B
    x_1588
    (x_1589 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1588) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15881 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1589 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15881) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15881 _x_1589)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1588
       x_1589)
    (matita_basics_jmeq.jmeq_rect_CProp2_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1588)
    x_1589.

[ A, _x, Q_, _H_refl_jmeq, B, x_1588, x_1589 ]
  jmeq_rect_CProp2_body A _x Q_ _H_refl_jmeq B x_1588 x_1589 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s (cic.s cic.z)))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15881 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1589 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15881) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15881 _x_1589)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1588
    x_1589.

def jmeq_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) B
                       (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591)
                          (_x_1592 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591) =>
                           cic.univ (cic.type (cic.s cic.z))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) B
                            (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591)
                               (_x_1592 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1591) =>
                                cic.univ (cic.type (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1592 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1591 _x_1592)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s cic.z))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1592 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591 _x_1592)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B
                          (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1591)
                             (x_1592 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1591) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15911 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1592 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15911) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15911 _x_1592)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1591 x_1592)))))))).

def jmeq_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) B
                       (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591)
                          (_x_1592 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591) =>
                           cic.univ (cic.type (cic.s cic.z))))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) B
                            (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop
                               (cic.type (cic.s (cic.s cic.z)))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591)
                               (_x_1592 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1591) =>
                                cic.univ (cic.type (cic.s cic.z)))))) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1592 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1591 _x_1592)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type (cic.s cic.z))
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1592 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1591) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1591 _x_1592)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B
                          (x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1591)
                             (x_1592 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1591) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15911 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1592 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15911) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15911 _x_1592)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1591 x_1592)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1591, x_1592 ]
  jmeq_rect_CProp1 A _x Q_ _H_refl_jmeq B x_1591 x_1592 -->
  matita_basics_jmeq.filter_jmeq (cic.type (cic.s cic.z)) A _x B x_1591
    (x_1592 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1591) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15911 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1592 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15911) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15911 _x_1592)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1591
       x_1592)
    (matita_basics_jmeq.jmeq_rect_CProp1_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1591)
    x_1592.

[ A, _x, Q_, _H_refl_jmeq, B, x_1591, x_1592 ]
  jmeq_rect_CProp1_body A _x Q_ _H_refl_jmeq B x_1591 x_1592 -->
  matita_basics_jmeq.match_jmeq (cic.type (cic.s cic.z))
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15911 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1592 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15911) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15911 _x_1592)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1591
    x_1592.

def jmeq_rect_CProp0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B
                       (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594)
                          (_x_1595 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594) =>
                           cic.univ (cic.type cic.z)))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B
                            (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594)
                               (_x_1595 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1594) =>
                                cic.univ (cic.type cic.z))))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1595 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1594 _x_1595)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type cic.z)
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1595 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594 _x_1595)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                          (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type cic.z)
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1594)
                             (x_1595 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1594) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15941 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1595 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15941) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15941 _x_1595)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1594 x_1595)))))))).

def jmeq_rect_CProp0_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A
              (_x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (B : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B
                       (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                        cic.prod cic.prop (cic.type (cic.s cic.z))
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x1
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B1)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594)
                          (_x_1595 :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594) =>
                           cic.univ (cic.type cic.z)))))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type (cic.s cic.z)))
                         (B : cic.Univ (cic.type (cic.s cic.z)) =>
                          cic.prod (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B
                            (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                             cic.prod cic.prop (cic.type (cic.s cic.z))
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x1 :
                                   cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x1
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B1)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594)
                               (_x_1595 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      _x1 :
                                        cic.Term (cic.type (cic.s cic.z)) A1 =>
                                      B1 :
                                        cic.Univ (cic.type (cic.s cic.z)) =>
                                      __ :
                                        cic.Term (cic.type (cic.s cic.z)) B1 =>
                                      matita_basics_jmeq.jmeq
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) A1)
                                        _x1
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) B1)
                                        __)
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       x_1594) =>
                                cic.univ (cic.type cic.z))))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                      x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                      _x_1595 :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594) =>
                      Q_
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        x_1594 _x_1595)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x))
                    (_H_refl_jmeq :
                       cic.Term (cic.type cic.z)
                         ((B : cic.Univ (cic.type (cic.s cic.z)) =>
                           x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                           _x_1595 :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  _x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) B)
                                  x_1594) =>
                           Q_
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             x_1594 _x_1595)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            _x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type (cic.s cic.z)))
                       (B : cic.Univ (cic.type (cic.s cic.z)) =>
                        cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) B
                          (x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
                           cic.prod cic.prop (cic.type cic.z)
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x1
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1594)
                             (x_1595 :
                                cic.Term cic.prop
                                  ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _x1 :
                                      cic.Term (cic.type (cic.s cic.z)) A1 =>
                                    B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                    __ :
                                      cic.Term (cic.type (cic.s cic.z)) B1 =>
                                    matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A1)
                                      _x1
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      __)
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     x_1594) =>
                              (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               x_15941 :
                                 cic.Term (cic.type (cic.s cic.z)) B1 =>
                               _x_1595 :
                                 cic.Term cic.prop
                                   (matita_basics_jmeq.jmeq
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      _x
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) B1)
                                      x_15941) =>
                               Q_
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B1)
                                 x_15941 _x_1595)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                x_1594 x_1595)))))))).

[ A, _x, Q_, _H_refl_jmeq, B, x_1594, x_1595 ]
  jmeq_rect_CProp0 A _x Q_ _H_refl_jmeq B x_1594 x_1595 -->
  matita_basics_jmeq.filter_jmeq (cic.type cic.z) A _x B x_1594
    (x_1595 :
       cic.Term cic.prop
         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
           _x1 : cic.Term (cic.type (cic.s cic.z)) A1 =>
           B1 : cic.Univ (cic.type (cic.s cic.z)) =>
           __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
           matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
             _x1
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             __)
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
            x_1594) =>
     (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x_15941 : cic.Term (cic.type (cic.s cic.z)) B1 =>
      _x_1595 :
        cic.Term cic.prop
          (matita_basics_jmeq.jmeq
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             _x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
             x_15941) =>
      Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
        x_15941 _x_1595)
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1594
       x_1595)
    (matita_basics_jmeq.jmeq_rect_CProp0_body
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x Q_
       _H_refl_jmeq
       (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1594)
    x_1595.

[ A, _x, Q_, _H_refl_jmeq, B, x_1594, x_1595 ]
  jmeq_rect_CProp0_body A _x Q_ _H_refl_jmeq B x_1594 x_1595 -->
  matita_basics_jmeq.match_jmeq (cic.type cic.z)
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
    (B1 : cic.Univ (cic.type (cic.s cic.z)) =>
     x_15941 : cic.Term (cic.type (cic.s cic.z)) B1 =>
     _x_1595 :
       cic.Term cic.prop
         (matita_basics_jmeq.jmeq
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) _x
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
            x_15941) =>
     Q_ (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B1)
       x_15941 _x_1595)
    _H_refl_jmeq
    (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) x_1594
    x_1595.

def jmeq_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z)) cic.prop x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type cic.z) z2939
                                (_z2938 :
                                   cic.Term (cic.type (cic.s cic.z)) z2939 =>
                                 cic.univ cic.prop)))
                          (P :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z2939 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type cic.z) z2939
                                     (_z2938 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z2939 =>
                                      cic.univ cic.prop))) =>
                           cic.prod cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z2941 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z2940 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z2939 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z2938 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z2939 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z2939)
                                       _z2938)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term cic.prop
                                  (cic.prod cic.prop cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z2941 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z2940 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z2939 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z2938 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z2939 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z2939)
                                            _z2938)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z2938 :
                                 cic.Term (cic.type (cic.s cic.z)) z2939 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z2939)
                                 _z2938)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) z2939
                (_z2938 : cic.Term (cic.type (cic.s cic.z)) z2939 =>
                 cic.univ cic.prop))) =>
      H1 :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z2941 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z2940 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z2938 : cic.Term (cic.type (cic.s cic.z)) z2939 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z2939)
                    _z2938)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z2941 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z2940 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z2938 : cic.Term (cic.type (cic.s cic.z)) z2939 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z2939)
                     _z2938)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_ind
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1558 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1559 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1558) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z2941 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1558 x_1558)
                    (_z2940 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1558 x_1558) =>
                     (z2939 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z2938 : cic.Term (cic.type (cic.s cic.z)) z2939 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z2939)
                        _z2938)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1558))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type
                                   (cic.s
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                z2956
                                (_z2955 :
                                   cic.Term (cic.type (cic.s cic.z)) z2956 =>
                                 cic.univ
                                   (cic.type
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                          (P :
                             cic.Term
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z2956 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type
                                        (cic.s
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z))))))
                                     z2956
                                     (_z2955 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z2956 =>
                                      cic.univ
                                        (cic.type
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z)))))))) =>
                           cic.prod
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z2958 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type
                                      (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z2957 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z2956 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z2955 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z2956 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z2956)
                                       _z2955)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z2958 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z)))))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z2957 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z2956 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z2955 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z2956 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z2956)
                                            _z2955)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z2955 :
                                 cic.Term (cic.type (cic.s cic.z)) z2956 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z2956)
                                 _z2955)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                z2956
                (_z2955 : cic.Term (cic.type (cic.s cic.z)) z2956 =>
                 cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z2958 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z2957 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z2955 : cic.Term (cic.type (cic.s cic.z)) z2956 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z2956)
                    _z2955)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z2958 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z2957 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z2955 : cic.Term (cic.type (cic.s cic.z)) z2956 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z2956)
                     _z2955)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_Type4
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1561 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1562 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1561) =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z2958 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1561 x_1561)
                    (_z2957 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1561 x_1561) =>
                     (z2956 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z2955 : cic.Term (cic.type (cic.s cic.z)) z2956 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z2956)
                        _z2955)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1561))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                z2973
                                (_z2972 :
                                   cic.Term (cic.type (cic.s cic.z)) z2973 =>
                                 cic.univ
                                   (cic.type (cic.s (cic.s (cic.s cic.z)))))))
                          (P :
                             cic.Term
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z2973 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     z2973
                                     (_z2972 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z2973 =>
                                      cic.univ
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))))) =>
                           cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z2975 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z2974 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z2973 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z2972 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z2973 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z2973)
                                       _z2972)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z2975 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z2974 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z2973 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z2972 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z2973 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z2973)
                                            _z2972)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z2972 :
                                 cic.Term (cic.type (cic.s cic.z)) z2973 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z2973)
                                 _z2972)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) z2973
                (_z2972 : cic.Term (cic.type (cic.s cic.z)) z2973 =>
                 cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z2975 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z2974 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z2972 : cic.Term (cic.type (cic.s cic.z)) z2973 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z2973)
                    _z2972)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z2975 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z2974 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z2972 : cic.Term (cic.type (cic.s cic.z)) z2973 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z2973)
                     _z2972)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_Type3
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1567 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1568 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1567) =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z2975 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1567 x_1567)
                    (_z2974 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1567 x_1567) =>
                     (z2973 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z2972 : cic.Term (cic.type (cic.s cic.z)) z2973 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z2973)
                        _z2972)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1567))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                z2990
                                (_z2989 :
                                   cic.Term (cic.type (cic.s cic.z)) z2990 =>
                                 cic.univ (cic.type (cic.s (cic.s cic.z))))))
                          (P :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z2990 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     z2990
                                     (_z2989 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z2990 =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))))) =>
                           cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z2992 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z2991 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z2990 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z2989 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z2990 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z2990)
                                       _z2989)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z)))
                                  (cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z2992 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z2991 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z2990 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z2989 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z2990 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z2990)
                                            _z2989)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z2989 :
                                 cic.Term (cic.type (cic.s cic.z)) z2990 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z2990)
                                 _z2989)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) z2990
                (_z2989 : cic.Term (cic.type (cic.s cic.z)) z2990 =>
                 cic.univ (cic.type (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z2992 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z2991 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z2989 : cic.Term (cic.type (cic.s cic.z)) z2990 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z2990)
                    _z2989)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z2992 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z2991 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z2989 : cic.Term (cic.type (cic.s cic.z)) z2990 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z2990)
                     _z2989)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_Type2
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1570 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1571 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1570) =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z2992 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1570 x_1570)
                    (_z2991 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1570 x_1570) =>
                     (z2990 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z2989 : cic.Term (cic.type (cic.s cic.z)) z2990 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z2990)
                        _z2989)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1570))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z))) z3007
                                (_z3006 :
                                   cic.Term (cic.type (cic.s cic.z)) z3007 =>
                                 cic.univ (cic.type (cic.s cic.z)))))
                          (P :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3007 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z))) z3007
                                     (_z3006 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3007 =>
                                      cic.univ (cic.type (cic.s cic.z))))) =>
                           cic.prod (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.prod cic.prop (cic.type (cic.s cic.z))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3009 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop (cic.type (cic.s cic.z))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3008 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3007 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3006 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3007 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3007)
                                       _z3006)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type (cic.s cic.z))
                                  (cic.prod cic.prop (cic.type (cic.s cic.z))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3009 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s cic.z))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3008 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3007 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3006 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3007 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3007)
                                            _z3006)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3006 :
                                 cic.Term (cic.type (cic.s cic.z)) z3007 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3007)
                                 _z3006)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) z3007
                (_z3006 : cic.Term (cic.type (cic.s cic.z)) z3007 =>
                 cic.univ (cic.type (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3009 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3008 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3006 : cic.Term (cic.type (cic.s cic.z)) z3007 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3007)
                    _z3006)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3009 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3008 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3006 : cic.Term (cic.type (cic.s cic.z)) z3007 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3007)
                     _z3006)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_Type1
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1573 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1574 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1573) =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3009 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1573 x_1573)
                    (_z3008 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1573 x_1573) =>
                     (z3007 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3006 : cic.Term (cic.type (cic.s cic.z)) z3007 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3007)
                        _z3006)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1573))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type cic.z)
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) z3024
                                (_z3023 :
                                   cic.Term (cic.type (cic.s cic.z)) z3024 =>
                                 cic.univ (cic.type cic.z))))
                          (P :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3024 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) z3024
                                     (_z3023 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3024 =>
                                      cic.univ (cic.type cic.z)))) =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.prod cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3026 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop (cic.type cic.z)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3025 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3024 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3023 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3024 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3024)
                                       _z3023)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod cic.prop (cic.type cic.z)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3026 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop (cic.type cic.z)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3025 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3024 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3023 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3024 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3024)
                                            _z3023)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3023 :
                                 cic.Term (cic.type (cic.s cic.z)) z3024 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3024)
                                 _z3023)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                z3024
                (_z3023 : cic.Term (cic.type (cic.s cic.z)) z3024 =>
                 cic.univ (cic.type cic.z)))) =>
      H1 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3026 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type cic.z)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3025 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3023 : cic.Term (cic.type (cic.s cic.z)) z3024 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3024)
                    _z3023)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3026 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3025 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3023 : cic.Term (cic.type (cic.s cic.z)) z3024 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3024)
                     _z3023)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_Type0
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1576 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1577 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1576) =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3026 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type cic.z)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1576 x_1576)
                    (_z3025 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1576 x_1576) =>
                     (z3024 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3023 : cic.Term (cic.type (cic.s cic.z)) z3024 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3024)
                        _z3023)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1576))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type
                          (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod
                          (cic.type
                             (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type
                                (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type
                                   (cic.s
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                z3041
                                (_z3040 :
                                   cic.Term (cic.type (cic.s cic.z)) z3041 =>
                                 cic.univ
                                   (cic.type
                                      (cic.s (cic.s (cic.s (cic.s cic.z))))))))
                          (P :
                             cic.Term
                               (cic.type
                                  (cic.s
                                     (cic.s (cic.s (cic.s (cic.s cic.z))))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type
                                     (cic.s
                                        (cic.s (cic.s (cic.s (cic.s cic.z))))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3041 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type
                                        (cic.s
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z))))))
                                     z3041
                                     (_z3040 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3041 =>
                                      cic.univ
                                        (cic.type
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z)))))))) =>
                           cic.prod
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.prod cic.prop
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3043 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type
                                      (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3042 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3041 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3040 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3041 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3041)
                                       _z3040)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.prod cic.prop
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3043 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s
                                              (cic.s (cic.s (cic.s cic.z)))))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3042 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3041 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3040 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3041 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3041)
                                            _z3040)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3040 :
                                 cic.Term (cic.type (cic.s cic.z)) z3041 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3041)
                                 _z3040)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                z3041
                (_z3040 : cic.Term (cic.type (cic.s cic.z)) z3041 =>
                 cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3043 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3042 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3040 : cic.Term (cic.type (cic.s cic.z)) z3041 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3041)
                    _z3040)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3043 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3042 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3040 : cic.Term (cic.type (cic.s cic.z)) z3041 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3041)
                     _z3040)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_CProp4
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1579 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1580 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1579) =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3043 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1579 x_1579)
                    (_z3042 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1579 x_1579) =>
                     (z3041 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3040 : cic.Term (cic.type (cic.s cic.z)) z3041 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3041)
                        _z3040)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1579))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod
                          (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type
                                   (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                z3058
                                (_z3057 :
                                   cic.Term (cic.type (cic.s cic.z)) z3058 =>
                                 cic.univ
                                   (cic.type (cic.s (cic.s (cic.s cic.z)))))))
                          (P :
                             cic.Term
                               (cic.type
                                  (cic.s (cic.s (cic.s (cic.s cic.z)))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type
                                     (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3058 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type
                                        (cic.s (cic.s (cic.s (cic.s cic.z)))))
                                     z3058
                                     (_z3057 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3058 =>
                                      cic.univ
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))))) =>
                           cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod cic.prop
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3060 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3059 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3058 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3057 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3058 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3058)
                                       _z3057)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod cic.prop
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3060 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3059 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3058 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3057 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3058 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3058)
                                            _z3057)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3057 :
                                 cic.Term (cic.type (cic.s cic.z)) z3058 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3058)
                                 _z3057)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) z3058
                (_z3057 : cic.Term (cic.type (cic.s cic.z)) z3058 =>
                 cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3060 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3059 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3057 : cic.Term (cic.type (cic.s cic.z)) z3058 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3058)
                    _z3057)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3060 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3059 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3057 : cic.Term (cic.type (cic.s cic.z)) z3058 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3058)
                     _z3057)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_CProp3
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1585 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1586 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1585) =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3060 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1585 x_1585)
                    (_z3059 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1585 x_1585) =>
                     (z3058 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3057 : cic.Term (cic.type (cic.s cic.z)) z3058 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3058)
                        _z3057)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1585))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                z3075
                                (_z3074 :
                                   cic.Term (cic.type (cic.s cic.z)) z3075 =>
                                 cic.univ (cic.type (cic.s (cic.s cic.z))))))
                          (P :
                             cic.Term
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3075 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     z3075
                                     (_z3074 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3075 =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))))) =>
                           cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.prod cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3077 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3076 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3075 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3074 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3075 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3075)
                                       _z3074)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z)))
                                  (cic.prod cic.prop
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3077 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3076 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3075 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3074 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3075 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3075)
                                            _z3074)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3074 :
                                 cic.Term (cic.type (cic.s cic.z)) z3075 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3075)
                                 _z3074)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) z3075
                (_z3074 : cic.Term (cic.type (cic.s cic.z)) z3075 =>
                 cic.univ (cic.type (cic.s (cic.s cic.z)))))) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3077 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3076 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3074 : cic.Term (cic.type (cic.s cic.z)) z3075 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3075)
                    _z3074)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3077 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3076 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3074 : cic.Term (cic.type (cic.s cic.z)) z3075 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3075)
                     _z3074)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_CProp2
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1588 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1589 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1588) =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3077 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1588 x_1588)
                    (_z3076 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1588 x_1588) =>
                     (z3075 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3074 : cic.Term (cic.type (cic.s cic.z)) z3075 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3075)
                        _z3074)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1588))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z))) z3092
                                (_z3091 :
                                   cic.Term (cic.type (cic.s cic.z)) z3092 =>
                                 cic.univ (cic.type (cic.s cic.z)))))
                          (P :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3092 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z))) z3092
                                     (_z3091 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3092 =>
                                      cic.univ (cic.type (cic.s cic.z))))) =>
                           cic.prod (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.prod cic.prop (cic.type (cic.s cic.z))
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3094 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop (cic.type (cic.s cic.z))
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3093 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3092 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3091 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3092 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3092)
                                       _z3091)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type (cic.s cic.z))
                                  (cic.prod cic.prop (cic.type (cic.s cic.z))
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3094 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s cic.z))
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3093 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3092 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3091 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3092 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3092)
                                            _z3091)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3091 :
                                 cic.Term (cic.type (cic.s cic.z)) z3092 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3092)
                                 _z3091)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) z3092
                (_z3091 : cic.Term (cic.type (cic.s cic.z)) z3092 =>
                 cic.univ (cic.type (cic.s cic.z))))) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3094 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3093 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3091 : cic.Term (cic.type (cic.s cic.z)) z3092 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3092)
                    _z3091)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3094 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3093 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3091 : cic.Term (cic.type (cic.s cic.z)) z3092 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3092)
                     _z3091)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_CProp1
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1591 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1592 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1591) =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3094 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1591 x_1591)
                    (_z3093 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1591 x_1591) =>
                     (z3092 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3091 : cic.Term (cic.type (cic.s cic.z)) z3092 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3092)
                        _z3091)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1591))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_inv_rect_CProp0 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (x1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) x1
              (x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (x3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) x3
                    (x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x1)
                          x2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) x3)
                          x4)
                       (_Hterm :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x1)
                               x2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) x3)
                               x4) =>
                        cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type cic.z)
                          (cic.prod (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type (cic.s cic.z)))
                             (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
                              cic.prod (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) z3109
                                (_z3108 :
                                   cic.Term (cic.type (cic.s cic.z)) z3109 =>
                                 cic.univ (cic.type cic.z))))
                          (P :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type (cic.s cic.z)))
                                  (z3109 :
                                     cic.Univ (cic.type (cic.s cic.z)) =>
                                   cic.prod (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) z3109
                                     (_z3108 :
                                        cic.Term (cic.type (cic.s cic.z))
                                          z3109 =>
                                      cic.univ (cic.type cic.z)))) =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.prod cic.prop (cic.type cic.z)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.univ (cic.type (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) x1))
                                (_z3111 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)) =>
                                 cic.prod cic.prop (cic.type cic.z)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z))) x1)
                                      x2 x2)
                                   (_z3110 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2) =>
                                    (z3109 :
                                       cic.Univ (cic.type (cic.s cic.z)) =>
                                     _z3108 :
                                       cic.Term (cic.type (cic.s cic.z))
                                         z3109 =>
                                     P
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) z3109)
                                       _z3108)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) x1)
                                      x2)))
                             (_H1 :
                                cic.Term (cic.type cic.z)
                                  (cic.prod cic.prop (cic.type cic.z)
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.univ (cic.type (cic.s cic.z))))
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) x1))
                                     (_z3111 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __)
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.univ
                                                   (cic.type (cic.s cic.z))))
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)
                                             (cic.lift
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z)) x1)) =>
                                      cic.prod cic.prop (cic.type cic.z)
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              x1)
                                           x2 x2)
                                        (_z3110 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A)
                                                 _x __)
                                                (cic.lift
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   x1)
                                                x2 x2) =>
                                         (z3109 :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _z3108 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              z3109 =>
                                          P
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) z3109)
                                            _z3108)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) x1)
                                           x2))) =>
                              (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _z3108 :
                                 cic.Term (cic.type (cic.s cic.z)) z3109 =>
                               P
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) z3109)
                                 _z3108)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) x3)
                                x4))))))))
      :=
      x1 : cic.Univ (cic.type (cic.s cic.z)) =>
      x2 : cic.Term (cic.type (cic.s cic.z)) x1 =>
      x3 : cic.Univ (cic.type (cic.s cic.z)) =>
      x4 : cic.Term (cic.type (cic.s cic.z)) x3 =>
      Hterm :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1)
             x2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
             x4) =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
             (cic.univ (cic.type (cic.s cic.z)))
             (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
              cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                z3109
                (_z3108 : cic.Term (cic.type (cic.s cic.z)) z3109 =>
                 cic.univ (cic.type cic.z)))) =>
      H1 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z)
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   x1))
             (_z3111 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.univ (cic.type (cic.s cic.z))))
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) x1)) =>
              cic.prod cic.prop (cic.type cic.z)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) x1)
                   x2 x2)
                (_z3110 :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s cic.z))) x1)
                        x2 x2) =>
                 (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _z3108 : cic.Term (cic.type (cic.s cic.z)) z3109 =>
                  P
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) z3109)
                    _z3108)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2))) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    x3))
              (_z3111 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) x3)) =>
               cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) x3)
                    x4 x4)
                 (_z3110 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z))) x3)
                         x4 x4) =>
                  (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _z3108 : cic.Term (cic.type (cic.s cic.z)) z3109 =>
                   P
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) z3109)
                     _z3108)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) x3)
                    x4))) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z)))
               (cic.univ (cic.type (cic.s cic.z))))
            (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3))
         (matita_basics_logic.refl
            (cic.lift (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s cic.z))) x3)
            x4))
        (matita_basics_jmeq.jmeq_rect_CProp0
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x1) x2
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            x_1594 : cic.Term (cic.type (cic.s cic.z)) B =>
            _x_1595 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B1 =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B1)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) x1)
                   x2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) B)
                   x_1594) =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              (cic.prod cic.prop (cic.type cic.z)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_z3111 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod cic.prop (cic.type cic.z)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) B)
                       x_1594 x_1594)
                    (_z3110 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) B)
                            x_1594 x_1594) =>
                     (z3109 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _z3108 : cic.Term (cic.type (cic.s cic.z)) z3109 =>
                      P
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) z3109)
                        _z3108)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       x_1594))))
           H1 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) x3)
           x4 Hterm).

def jmeq_discr :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (a1 : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) a1
              (a2 : cic.Term (cic.type (cic.s cic.z)) a1 =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z)))
                 (a3 : cic.Univ (cic.type (cic.s cic.z)) =>
                  cic.prod (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) a3
                    (a4 : cic.Term (cic.type (cic.s cic.z)) a3 =>
                     cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) a1)
                          a2
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) a3)
                          a4)
                       (x :
                          cic.Term cic.prop
                            ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) a1)
                               a2
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) a3)
                               a4) =>
                        cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x : cic.Term (cic.type (cic.s cic.z)) A =>
                            B : cic.Univ (cic.type (cic.s cic.z)) =>
                            __ : cic.Term (cic.type (cic.s cic.z)) B =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A)
                              _x
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B)
                              __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) a1)
                             a2
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) a3)
                             a4)
                          (y :
                             cic.Term cic.prop
                               ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x : cic.Term (cic.type (cic.s cic.z)) A =>
                                 B : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __ : cic.Term (cic.type (cic.s cic.z)) B =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A)
                                   _x
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B)
                                   __)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) a1)
                                  a2
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) a3)
                                  a4) =>
                           cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                                     _x :
                                       cic.Term (cic.type (cic.s cic.z)) A =>
                                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                                     __ :
                                       cic.Term (cic.type (cic.s cic.z)) B =>
                                     matita_basics_jmeq.jmeq
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       _x
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) B)
                                       __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) a1)
                                      a2
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) a3)
                                      a4))
                                x y)
                             (_e :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift cic.prop
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((A :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _x :
                                            cic.Term (cic.type (cic.s cic.z))
                                              A =>
                                          B :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          __ :
                                            cic.Term (cic.type (cic.s cic.z))
                                              B =>
                                          matita_basics_jmeq.jmeq
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) A)
                                            _x
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) B)
                                            __)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) a1)
                                           a2
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) a3)
                                           a4))
                                     x y) =>
                              matita_basics_jmeq.match_jmeq
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) a1)
                                a2
                                (__ : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _0 : cic.Term (cic.type (cic.s cic.z)) __ =>
                                 _1 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ (cic.type (cic.s cic.z)) =>
                                       _x :
                                         cic.Term (cic.type (cic.s cic.z)) A =>
                                       B :
                                         cic.Univ (cic.type (cic.s cic.z)) =>
                                       __1 :
                                         cic.Term (cic.type (cic.s cic.z)) B =>
                                       matita_basics_jmeq.jmeq
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z)) A)
                                         _x
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z)) B)
                                         __1)
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) a1)
                                        a2
                                        (cic.lift (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z)) __)
                                        _0) =>
                                 cic.univ (cic.type (cic.s (cic.s cic.z))))
                                (matita_basics_jmeq.match_jmeq
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) a1)
                                   a2
                                   (__ : cic.Univ (cic.type (cic.s cic.z)) =>
                                    _0 :
                                      cic.Term (cic.type (cic.s cic.z)) __ =>
                                    _1 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          _x :
                                            cic.Term (cic.type (cic.s cic.z))
                                              A =>
                                          B :
                                            cic.Univ (cic.type (cic.s cic.z)) =>
                                          __1 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              B =>
                                          matita_basics_jmeq.jmeq
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) A)
                                            _x
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) B)
                                            __1)
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) a1)
                                           a2
                                           (cic.lift (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z)) __)
                                           _0) =>
                                    cic.univ (cic.type (cic.s (cic.s cic.z))))
                                   (cic.prod (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type (cic.s cic.z)))
                                      (P :
                                         cic.Univ (cic.type (cic.s cic.z)) =>
                                       cic.prod (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) P
                                         (_z87 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              P =>
                                          P)))
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) a3)
                                   a4 y)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) a3)
                                a4 x))))))))
      :=
      a1 : cic.Univ (cic.type (cic.s cic.z)) =>
      a2 : cic.Term (cic.type (cic.s cic.z)) a1 =>
      a3 : cic.Univ (cic.type (cic.s cic.z)) =>
      a4 : cic.Term (cic.type (cic.s cic.z)) a3 =>
      x :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1)
             a2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a3)
             a4) =>
      y :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1)
             a2
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a3)
             a4) =>
      Deq :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) a1)
                   a2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) a3)
                   a4))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A : cic.Univ (cic.type (cic.s cic.z)) =>
             _x : cic.Term (cic.type (cic.s cic.z)) A =>
             B : cic.Univ (cic.type (cic.s cic.z)) =>
             __ : cic.Term (cic.type (cic.s cic.z)) B =>
             matita_basics_jmeq.jmeq
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
               _x
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
               __)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1)
              a2
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a3)
              a4))
        x
        (x_13 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s cic.z)) =>
               _x : cic.Term (cic.type (cic.s cic.z)) A =>
               B : cic.Univ (cic.type (cic.s cic.z)) =>
               __ : cic.Term (cic.type (cic.s cic.z)) B =>
               matita_basics_jmeq.jmeq
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 _x
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    B)
                 __)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   a1)
                a2
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   a3)
                a4) =>
         _x_14 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                     _x : cic.Term (cic.type (cic.s cic.z)) A =>
                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                     __ : cic.Term (cic.type (cic.s cic.z)) B =>
                     matita_basics_jmeq.jmeq
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) a1)
                      a2
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) a3)
                      a4))
                x x_13) =>
         cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (matita_basics_jmeq.match_jmeq
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1)
              a2
              (__ : cic.Univ (cic.type (cic.s cic.z)) =>
               _0 : cic.Term (cic.type (cic.s cic.z)) __ =>
               _1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                     _x : cic.Term (cic.type (cic.s cic.z)) A =>
                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                     __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                     matita_basics_jmeq.jmeq
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       __1)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) a1)
                      a2
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) __)
                      _0) =>
               cic.univ (cic.type (cic.s (cic.s cic.z))))
              (matita_basics_jmeq.match_jmeq
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    a1)
                 a2
                 (__ : cic.Univ (cic.type (cic.s cic.z)) =>
                  _0 : cic.Term (cic.type (cic.s cic.z)) __ =>
                  _1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                        _x : cic.Term (cic.type (cic.s cic.z)) A =>
                        B : cic.Univ (cic.type (cic.s cic.z)) =>
                        __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                        matita_basics_jmeq.jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) B)
                          __1)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) a1)
                         a2
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) __)
                         _0) =>
                  cic.univ (cic.type (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) P
                       (_z87 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    a3)
                 a4 x_13)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a3)
              a4 x))
        (matita_basics_jmeq.match_jmeq (cic.type (cic.s (cic.s cic.z)))
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1) a2
           (__ : cic.Univ (cic.type (cic.s cic.z)) =>
            _0 : cic.Term (cic.type (cic.s cic.z)) __ =>
            _1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A =>
                  B : cic.Univ (cic.type (cic.s cic.z)) =>
                  __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    __1)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) a1)
                   a2
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) __)
                   _0) =>
            matita_basics_jmeq.match_jmeq
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a1)
              a2
              (_2 : cic.Univ (cic.type (cic.s cic.z)) =>
               _00 : cic.Term (cic.type (cic.s cic.z)) _2 =>
               _10 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                     _x : cic.Term (cic.type (cic.s cic.z)) A =>
                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                     __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                     matita_basics_jmeq.jmeq
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       _x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       __1)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) a1)
                      a2
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) _2)
                      _00) =>
               cic.univ (cic.type (cic.s (cic.s cic.z))))
              (matita_basics_jmeq.match_jmeq
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    a1)
                 a2
                 (_2 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _00 : cic.Term (cic.type (cic.s cic.z)) _2 =>
                  _10 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s cic.z)) =>
                        _x : cic.Term (cic.type (cic.s cic.z)) A =>
                        B : cic.Univ (cic.type (cic.s cic.z)) =>
                        __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                        matita_basics_jmeq.jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          _x
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) B)
                          __1)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) a1)
                         a2
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) _2)
                         _00) =>
                  cic.univ (cic.type (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type (cic.s cic.z)))
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) P
                       (_z87 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    __)
                 _0 _1)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) __)
              _0 _1)
           (P : cic.Univ (cic.type (cic.s cic.z)) =>
            DH : cic.Term (cic.type (cic.s cic.z)) P => DH)
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) a3) a4
           x)
        y Deq.

def eqProp :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.univ cic.prop)
           (A : cic.Univ cic.prop =>
            cic.prod cic.prop (cic.type cic.z) A
              (_x : cic.Term cic.prop A =>
               cic.prod cic.prop (cic.type cic.z) A
                 (__ : cic.Term cic.prop A => cic.univ cic.prop))))
      :=
      A : cic.Univ cic.prop =>
      _x : cic.Term cic.prop A =>
      __ : cic.Term cic.prop A =>
      (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
       _x1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
       __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
       matita_basics_logic.eq
         (cic.lift (cic.type (cic.s (cic.s cic.z)))
            (cic.type (cic.s (cic.s cic.z))) A1)
         _x1 __1)
        (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) A) _x __.

K :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop
       (cic.univ (cic.type (cic.s (cic.s cic.z))))
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop A
          (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           cic.prod cic.prop cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) A)
                x x)
             (h :
                cic.Term cic.prop
                  ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) A1)
                      _x __)
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     x x) =>
              (A1 : cic.Univ cic.prop =>
               _x : cic.Term cic.prop A1 =>
               __ : cic.Term cic.prop A1 =>
               matita_basics_jmeq.eqProp A1 _x __)
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) A)
                   x x)
                h
                (matita_basics_logic.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) A)
                   x))))).

def cast :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.univ (cic.type (cic.s cic.z)))
              (B : cic.Univ (cic.type (cic.s cic.z)) =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B))
                 (_E :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.univ (cic.type (cic.s cic.z))))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A (__ : cic.Term (cic.type (cic.s cic.z)) A => B)))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      B : cic.Univ (cic.type (cic.s cic.z)) =>
      E :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z)))
                (cic.univ (cic.type (cic.s cic.z))))
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)) =>
      matita_basics_logic.match_eq (cic.type (cic.s cic.z))
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.univ (cic.type (cic.s cic.z))))
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
        (__ : cic.Univ (cic.type (cic.s cic.z)) =>
         _0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __1)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   __)) =>
         cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
           (__1 : cic.Term (cic.type (cic.s cic.z)) A => __))
        (X : cic.Term (cic.type (cic.s cic.z)) A => X)
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B) E.

def tech1 :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           matita_basics_jmeq.Sigma
           (Aa :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
              matita_basics_jmeq.Sigma
              (Bb :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Aa Bb)
                 (_E :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         Aa Bb) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z)))
                       ((__ :
                           cic.Term (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma =>
                         matita_basics_jmeq.p1 __) Bb))
                    (matita_basics_jmeq.cast
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          ((__ :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            matita_basics_jmeq.p1 __) Aa))
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          ((__ :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            matita_basics_jmeq.p1 __) Bb))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma)
                          Bb
                          (x :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  x Bb) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type (cic.s cic.z))))
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   ((__1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_jmeq.Sigma =>
                                     matita_basics_jmeq.p1 __1) x))
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   ((__1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_jmeq.Sigma =>
                                     matita_basics_jmeq.p1 __1) Bb))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type (cic.s cic.z))))
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                ((__ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_jmeq.Sigma =>
                                  matita_basics_jmeq.p1 __) Bb)))
                          Aa _E)
                       (matita_basics_jmeq.p2 Aa))
                    (matita_basics_jmeq.p2 Bb)))))
      :=
      Aa :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      Bb :
        cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
      E :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
             Aa Bb) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
        Bb
        (x :
           cic.Term (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                x Bb) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 ((__1 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   matita_basics_jmeq.p1 __1) Bb))
              (matita_basics_jmeq.cast
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1) x))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1) Bb))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    Bb
                    (x0 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     _0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma)
                            x0 Bb) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type (cic.s cic.z))))
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             ((__1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_jmeq.Sigma =>
                               matita_basics_jmeq.p1 __1) x0))
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             ((__1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_jmeq.Sigma =>
                               matita_basics_jmeq.p1 __1) Bb))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type (cic.s cic.z))))
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          ((__1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            matita_basics_jmeq.p1 __1) Bb)))
                    x __)
                 (matita_basics_jmeq.p2 x))
              (matita_basics_jmeq.p2 Bb)))
        (matita_basics_jmeq.match_Sigma cic.prop
           (__ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z)))
                 ((__1 :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   matita_basics_jmeq.p1 __1) __))
              (matita_basics_jmeq.cast
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1) __))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1) __))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    __
                    (x :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma =>
                     _0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma)
                            x __) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.univ (cic.type (cic.s cic.z))))
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             ((__1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_jmeq.Sigma =>
                               matita_basics_jmeq.p1 __1) x))
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             ((__1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_jmeq.Sigma =>
                               matita_basics_jmeq.p1 __1) __))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.univ (cic.type (cic.s cic.z))))
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          ((__1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma =>
                            matita_basics_jmeq.p1 __1) __)))
                    __
                    (matita_basics_logic.refl
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma)
                       __))
                 (matita_basics_jmeq.p2 __))
              (matita_basics_jmeq.p2 __))
           (B : cic.Univ (cic.type (cic.s cic.z)) =>
            b : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_logic.refl
              (cic.lift (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) B)
              b)
           Bb)
        Aa E.

def gral :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop A
                 (y : cic.Term (cic.type (cic.s cic.z)) A =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y))
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y)) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       x y)))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      E :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                x)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                y)) =>
      matita_basics_logic.eq_ind_r
        (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __)
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z))))
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)))
        (matita_basics_logic.refl
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.univ (cic.type (cic.s cic.z))))
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A))
        (x0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.univ (cic.type (cic.s cic.z))))
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)) =>
         __ :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.univ (cic.type (cic.s cic.z))))
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)))
                x0
                (matita_basics_logic.refl
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.univ (cic.type (cic.s cic.z))))
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y)))
                 (matita_basics_jmeq.cast
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       ((__1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma =>
                         matita_basics_jmeq.p1 __1)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x)))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       ((__1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma =>
                         matita_basics_jmeq.p1 __1)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y)))
                    x0
                    (matita_basics_jmeq.p2
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x)))
                 (matita_basics_jmeq.p2
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y)))
              (__1 :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __1)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z)))
                         ((__1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_jmeq.Sigma =>
                           matita_basics_jmeq.p1 __1)
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y)))
                      (matita_basics_jmeq.cast
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            ((__1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma =>
                              matita_basics_jmeq.p1 __1)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x)))
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            ((__1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma =>
                              matita_basics_jmeq.p1 __1)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y)))
                         x0
                         (matita_basics_jmeq.p2
                            (matita_basics_jmeq.mk_Sigma
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x)))
                      (matita_basics_jmeq.p2
                         (matita_basics_jmeq.mk_Sigma
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            y))) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __2)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 x y)))
        (H :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z))) A)
                x y) =>
         H)
        (matita_basics_logic.eq_ind_r
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              y)
           (x0 :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                matita_basics_jmeq.Sigma =>
            __ :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma)
                   x0
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      y)) =>
            cic.lift cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1) x0))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__1 :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __1)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y)))))
           (matita_basics_logic.refl
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.univ (cic.type (cic.s cic.z))))
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 ((__ :
                     cic.Term (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma =>
                   matita_basics_jmeq.p1 __)
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y))))
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x)
           E)
        (matita_basics_jmeq.K
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.univ (cic.type (cic.s cic.z))))
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 y)
              (x0 :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_jmeq.Sigma =>
               __ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      x0
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A)
                         y)) =>
               cic.lift cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __1)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.univ (cic.type (cic.s cic.z))))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       ((__1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma =>
                         matita_basics_jmeq.p1 __1) x0))
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       ((__1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma =>
                         matita_basics_jmeq.p1 __1)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y)))))
              (matita_basics_logic.refl
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type (cic.s cic.z))))
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    ((__ :
                        cic.Term (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma =>
                      matita_basics_jmeq.p1 __)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y))))
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 x)
              E))
        (matita_basics_jmeq.tech1
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x)
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              y)
           E).

def jm_to_eq_sigma :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop A
                 (y : cic.Term (cic.type (cic.s cic.z)) A =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                      B : cic.Univ (cic.type (cic.s cic.z)) =>
                      __ : cic.Term (cic.type (cic.s cic.z)) B =>
                      matita_basics_jmeq.jmeq
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A1)
                        _x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                           _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                           B : cic.Univ (cic.type (cic.s cic.z)) =>
                           __ : cic.Term (cic.type (cic.s cic.z)) B =>
                           matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A1)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            y) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y))))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      E :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) y) =>
      matita_basics_jmeq.match_jmeq cic.prop
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x
        (__ : cic.Univ (cic.type (cic.s cic.z)) =>
         _0 : cic.Term (cic.type (cic.s cic.z)) __ =>
         _1 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
               _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
               B : cic.Univ (cic.type (cic.s cic.z)) =>
               __1 : cic.Term (cic.type (cic.s cic.z)) B =>
               matita_basics_jmeq.jmeq
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A1)
                 _x
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    B)
                 __1)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                x
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   __)
                _0) =>
         (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A1)
            _x __1)
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x)
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) __)
              _0))
        (matita_basics_logic.refl
           (cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
           (matita_basics_jmeq.mk_Sigma
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x))
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) y E.

def curry :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A
                    (y : cic.Term (cic.type (cic.s cic.z)) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A1)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y)
                       (__ :
                          cic.Term cic.prop
                            ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A1)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y) =>
                        cic.univ (cic.type cic.z))))
                 (__ :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A
                         (y : cic.Term (cic.type (cic.s cic.z)) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A1)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                   _x :
                                     cic.Term (cic.type (cic.s cic.z)) A1 =>
                                   B : cic.Univ (cic.type (cic.s cic.z)) =>
                                   __ :
                                     cic.Term (cic.type (cic.s cic.z)) B =>
                                   matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A1)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    x
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    y) =>
                             cic.univ (cic.type cic.z)))) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A
                    (y : cic.Term (cic.type (cic.s cic.z)) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y))
                       (__1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y)) =>
                        cic.univ (cic.type cic.z)))))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      f :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
             (y : cic.Term (cic.type (cic.s cic.z)) A =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                  _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                  B : cic.Univ (cic.type (cic.s cic.z)) =>
                  __ : cic.Term (cic.type (cic.s cic.z)) B =>
                  matita_basics_jmeq.jmeq
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A1)
                    _x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) B)
                    __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A)
                   x
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A)
                   y)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                       _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                       B : cic.Univ (cic.type (cic.s cic.z)) =>
                       __ : cic.Term (cic.type (cic.s cic.z)) B =>
                       matita_basics_jmeq.jmeq
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A1)
                         _x
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) B)
                         __)
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A)
                        x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A)
                        y) =>
                 cic.univ (cic.type cic.z)))) =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      E :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                x)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                y)) =>
      (y1 : cic.Term (cic.type (cic.s cic.z)) A =>
       __ :
         cic.Term cic.prop
           (matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              y1) =>
       f y1 __) y
        (matita_basics_logic.eq_ind_r
           (cic.lift (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A)
           y
           (x0 : cic.Term (cic.type (cic.s cic.z)) A =>
            __ :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) A)
                   x0 y) =>
            cic.lift cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                B : cic.Univ (cic.type (cic.s cic.z)) =>
                __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                matita_basics_jmeq.jmeq
                  (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                     A1)
                  _x
                  (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                     B)
                  __1)
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 x0
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 y))
           (matita_basics_jmeq.refl_jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              y)
           x
           (matita_basics_jmeq.gral
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x y E)).

def G :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A
                    (y : cic.Term (cic.type (cic.s cic.z)) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y))
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y)) =>
                        cic.univ (cic.type cic.z))))
                 (P :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A
                         (y : cic.Term (cic.type (cic.s cic.z)) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y))
                            (__ :
                               cic.Term cic.prop
                                 ((A1 :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A1 =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z))) A1)
                                     _x __)
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z)))
                                       matita_basics_jmeq.Sigma)
                                    (matita_basics_jmeq.mk_Sigma
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       x)
                                    (matita_basics_jmeq.mk_Sigma
                                       (cic.lift (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) A)
                                       y)) =>
                             cic.univ (cic.type cic.z)))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                      __ :
                        cic.Term cic.prop
                          (matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                x)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                y)) =>
                      P y __) x
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_jmeq.Sigma)
                          (matita_basics_jmeq.mk_Sigma
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x)))
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     x)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     y)) =>
                           P y __) x
                            (matita_basics_logic.refl
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_jmeq.Sigma)
                               (matita_basics_jmeq.mk_Sigma
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x))) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) A
                       (y : cic.Term (cic.type (cic.s cic.z)) A =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_jmeq.Sigma)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                x)
                             (matita_basics_jmeq.mk_Sigma
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                y))
                          (h :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __1)
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_jmeq.Sigma)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     x)
                                  (matita_basics_jmeq.mk_Sigma
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     y)) =>
                           (y1 : cic.Term (cic.type (cic.s cic.z)) A =>
                            __1 :
                              cic.Term cic.prop
                                (matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_jmeq.Sigma)
                                   (matita_basics_jmeq.mk_Sigma
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      x)
                                   (matita_basics_jmeq.mk_Sigma
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z)) A)
                                      y1)) =>
                            P y1 __1) y h)))))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
             (y : cic.Term (cic.type (cic.s cic.z)) A =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      y))
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A1)
                         _x __)
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_jmeq.Sigma)
                        (matita_basics_jmeq.mk_Sigma
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x)
                        (matita_basics_jmeq.mk_Sigma
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           y)) =>
                 cic.univ (cic.type cic.z)))) =>
      H :
        cic.Term (cic.type cic.z)
          ((y : cic.Term (cic.type (cic.s cic.z)) A =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      y)) =>
            P y __) x
             (matita_basics_logic.refl
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                (matita_basics_jmeq.mk_Sigma
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A)
                   x))) =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      E :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                x)
             (matita_basics_jmeq.mk_Sigma
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                y)) =>
      matita_basics_logic.match_eq (cic.type cic.z)
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) A)
        x
        (y0 : cic.Term (cic.type (cic.s cic.z)) A =>
         __ :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s cic.z))) A)
                x y0) =>
         cic.prod cic.prop (cic.type cic.z)
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __1)
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 x)
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 y0))
           (e :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __1)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      y0)) =>
            (y1 : cic.Term (cic.type (cic.s cic.z)) A =>
             __1 :
               cic.Term cic.prop
                 (matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x)
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y1)) =>
             P y1 __1) y0 e))
        (E0 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                (matita_basics_jmeq.mk_Sigma
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A)
                   x)
                (matita_basics_jmeq.mk_Sigma
                   (cic.lift (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) A)
                   x)) =>
         matita_basics_logic.eq_rect_Type0
           (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 (matita_basics_jmeq.mk_Sigma
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x)
                 (matita_basics_jmeq.mk_Sigma
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x)))
           (matita_basics_logic.refl
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
              (matita_basics_jmeq.mk_Sigma
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A)
                 x))
           (x_19 :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_jmeq.Sigma)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)
                   (matita_basics_jmeq.mk_Sigma
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)) =>
            _x_20 :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_jmeq.Sigma)
                         (matita_basics_jmeq.mk_Sigma
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            x)
                         (matita_basics_jmeq.mk_Sigma
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            x)))
                   (matita_basics_logic.refl
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_jmeq.Sigma)
                      (matita_basics_jmeq.mk_Sigma
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A)
                         x))
                   x_19) =>
            cic.lift (cic.type cic.z) (cic.type cic.z)
              ((y1 : cic.Term (cic.type (cic.s cic.z)) A =>
                __ :
                  cic.Term cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_jmeq.Sigma)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x)
                       (matita_basics_jmeq.mk_Sigma
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y1)) =>
                P y1 __) x x_19))
           H E0
           (matita_basics_logic.sym_eq
              (cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_jmeq.Sigma)
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x)
                    (matita_basics_jmeq.mk_Sigma
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x)))
              E0
              (matita_basics_logic.refl
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 (matita_basics_jmeq.mk_Sigma
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x))
              (matita_basics_jmeq.K
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) matita_basics_jmeq.Sigma)
                 (matita_basics_jmeq.mk_Sigma
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x)
                 E0)))
        y
        (matita_basics_jmeq.gral
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x y
           E)
        E.

def PP :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           (cic.univ cic.prop)
           (A : cic.Univ cic.prop =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod cic.prop (cic.type (cic.s cic.z)) A
                 (__ : cic.Term cic.prop A => cic.univ (cic.type cic.z)))
              (_P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod cic.prop (cic.type (cic.s cic.z)) A
                      (__ : cic.Term cic.prop A => cic.univ (cic.type cic.z))) =>
               cic.prod cic.prop (cic.type (cic.s cic.z)) A
                 (__ : cic.Term cic.prop A => cic.univ (cic.type cic.z)))))
      :=
      A : cic.Univ cic.prop =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z)) A
             (__ : cic.Term cic.prop A => cic.univ (cic.type cic.z))) =>
      a : cic.Term cic.prop A => (__ : cic.Term cic.prop A => P __) a.

E :
  cic.Term (cic.type (cic.s (cic.s cic.z)))
    (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
       (cic.univ (cic.type (cic.s cic.z)))
       (A : cic.Univ (cic.type (cic.s cic.z)) =>
        cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
          (x : cic.Term (cic.type (cic.s cic.z)) A =>
           cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
             (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
                (y : cic.Term (cic.type (cic.s cic.z)) A =>
                 cic.prod cic.prop (cic.type (cic.s cic.z))
                   ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                     __ : cic.Term (cic.type (cic.s cic.z)) B =>
                     matita_basics_jmeq.jmeq
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A1)
                       _x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      y)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                          B : cic.Univ (cic.type (cic.s cic.z)) =>
                          __ : cic.Term (cic.type (cic.s cic.z)) B =>
                          matita_basics_jmeq.jmeq
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A1)
                            _x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) B)
                            __)
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           y) =>
                    cic.univ (cic.type cic.z))))
             (P :
                cic.Term (cic.type (cic.s cic.z))
                  (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                     A
                     (y : cic.Term (cic.type (cic.s cic.z)) A =>
                      cic.prod cic.prop (cic.type (cic.s cic.z))
                        ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                          B : cic.Univ (cic.type (cic.s cic.z)) =>
                          __ : cic.Term (cic.type (cic.s cic.z)) B =>
                          matita_basics_jmeq.jmeq
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A1)
                            _x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) B)
                            __)
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           y)
                        (__ :
                           cic.Term cic.prop
                             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                               _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                               B : cic.Univ (cic.type (cic.s cic.z)) =>
                               __ : cic.Term (cic.type (cic.s cic.z)) B =>
                               matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A1)
                                 _x
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) B)
                                 __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                y) =>
                         cic.univ (cic.type cic.z)))) =>
              cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                ((A1 : cic.Univ cic.prop =>
                  _P :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod cic.prop (cic.type (cic.s cic.z)) A1
                         (__ : cic.Term cic.prop A1 =>
                          cic.univ (cic.type cic.z))) =>
                  __ : cic.Term cic.prop A1 => matita_basics_jmeq.PP A1 _P __)
                   ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                     _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                     B : cic.Univ (cic.type (cic.s cic.z)) =>
                     __ : cic.Term (cic.type (cic.s cic.z)) B =>
                     matita_basics_jmeq.jmeq
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A1)
                       _x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) B)
                       __)
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x)
                   (__ :
                      cic.Term cic.prop
                        (matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x) =>
                    cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                        __1 :
                          cic.Term cic.prop
                            (matita_basics_jmeq.jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y) =>
                        P y __1) x __))
                   (matita_basics_jmeq.refl_jmeq
                      (cic.lift (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A)
                      x))
                (__ :
                   cic.Term (cic.type cic.z)
                     ((A1 : cic.Univ cic.prop =>
                       _P :
                         cic.Term (cic.type (cic.s cic.z))
                           (cic.prod cic.prop (cic.type (cic.s cic.z)) A1
                              (__ : cic.Term cic.prop A1 =>
                               cic.univ (cic.type cic.z))) =>
                       __ : cic.Term cic.prop A1 =>
                       matita_basics_jmeq.PP A1 _P __)
                        ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                          _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                          B : cic.Univ (cic.type (cic.s cic.z)) =>
                          __ : cic.Term (cic.type (cic.s cic.z)) B =>
                          matita_basics_jmeq.jmeq
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A1)
                            _x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) B)
                            __)
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x)
                        (__ :
                           cic.Term cic.prop
                             (matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A)
                                x) =>
                         cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                             __1 :
                               cic.Term cic.prop
                                 (matita_basics_jmeq.jmeq
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    x
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    y) =>
                             P y __1) x __))
                        (matita_basics_jmeq.refl_jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A)
                           x)) =>
                 cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) A
                   (y : cic.Term (cic.type (cic.s cic.z)) A =>
                    cic.prod cic.prop (cic.type cic.z)
                      ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                        _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                        B : cic.Univ (cic.type (cic.s cic.z)) =>
                        __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                        matita_basics_jmeq.jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A1)
                          _x
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) B)
                          __1)
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A)
                         x
                         (cic.lift (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) A)
                         y)
                      (h :
                         cic.Term cic.prop
                           ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                             _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                             B : cic.Univ (cic.type (cic.s cic.z)) =>
                             __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                             matita_basics_jmeq.jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A1)
                               _x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) B)
                               __1)
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A)
                              x
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A)
                              y) =>
                       (A1 : cic.Univ cic.prop =>
                        _P :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod cic.prop (cic.type (cic.s cic.z)) A1
                               (__1 : cic.Term cic.prop A1 =>
                                cic.univ (cic.type cic.z))) =>
                        __1 : cic.Term cic.prop A1 =>
                        matita_basics_jmeq.PP A1 _P __1)
                         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                           _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                           B : cic.Univ (cic.type (cic.s cic.z)) =>
                           __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                           matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A1)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __1)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            y)
                         (__1 :
                            cic.Term cic.prop
                              (matita_basics_jmeq.jmeq
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A)
                                 x
                                 (cic.lift (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z)) A)
                                 y) =>
                          cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((y1 : cic.Term (cic.type (cic.s cic.z)) A =>
                              __2 :
                                cic.Term cic.prop
                                  (matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A)
                                     y1) =>
                              P y1 __2) y __1))
                         h))))))).

def jmeq_elim :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A
                    (y : cic.Term (cic.type (cic.s cic.z)) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                         _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                         B : cic.Univ (cic.type (cic.s cic.z)) =>
                         __ : cic.Term (cic.type (cic.s cic.z)) B =>
                         matita_basics_jmeq.jmeq
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) A1)
                           _x
                           (cic.lift (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z)) B)
                           __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          y)
                       (__ :
                          cic.Term cic.prop
                            ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A1)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y) =>
                        cic.univ (cic.type cic.z))))
                 (P :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) A
                         (y : cic.Term (cic.type (cic.s cic.z)) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                              _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                              B : cic.Univ (cic.type (cic.s cic.z)) =>
                              __ : cic.Term (cic.type (cic.s cic.z)) B =>
                              matita_basics_jmeq.jmeq
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) A1)
                                _x
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) B)
                                __)
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               y)
                            (__ :
                               cic.Term cic.prop
                                 ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                   _x :
                                     cic.Term (cic.type (cic.s cic.z)) A1 =>
                                   B : cic.Univ (cic.type (cic.s cic.z)) =>
                                   __ :
                                     cic.Term (cic.type (cic.s cic.z)) B =>
                                   matita_basics_jmeq.jmeq
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) A1)
                                     _x
                                     (cic.lift (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) B)
                                     __)
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    x
                                    (cic.lift (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) A)
                                    y) =>
                             cic.univ (cic.type cic.z)))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                      __ :
                        cic.Term cic.prop
                          (matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y) =>
                      P y __) x
                       (matita_basics_jmeq.refl_jmeq
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) A)
                          x))
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((y : cic.Term (cic.type (cic.s cic.z)) A =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_jmeq.jmeq
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y) =>
                           P y __) x
                            (matita_basics_jmeq.refl_jmeq
                               (cic.lift (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) A)
                               x)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z) A
                       (y : cic.Term (cic.type (cic.s cic.z)) A =>
                        cic.prod cic.prop (cic.type cic.z)
                          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                            _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                            B : cic.Univ (cic.type (cic.s cic.z)) =>
                            __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                            matita_basics_jmeq.jmeq
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) A1)
                              _x
                              (cic.lift (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z)) B)
                              __1)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A)
                             y)
                          (h :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                                 _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                                 B : cic.Univ (cic.type (cic.s cic.z)) =>
                                 __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                                 matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A1)
                                   _x
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) B)
                                   __1)
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  x
                                  (cic.lift (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) A)
                                  y) =>
                           (y1 : cic.Term (cic.type (cic.s cic.z)) A =>
                            __1 :
                              cic.Term cic.prop
                                (matita_basics_jmeq.jmeq
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A)
                                   x
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z)) A)
                                   y1) =>
                            P y1 __1) y h)))))))
      := matita_basics_jmeq.E.

def jmeq_to_eq :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop A
                 (y : cic.Term (cic.type (cic.s cic.z)) A =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                      B : cic.Univ (cic.type (cic.s cic.z)) =>
                      __ : cic.Term (cic.type (cic.s cic.z)) B =>
                      matita_basics_jmeq.jmeq
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A1)
                        _x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                           _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                           B : cic.Univ (cic.type (cic.s cic.z)) =>
                           __ : cic.Term (cic.type (cic.s cic.z)) B =>
                           matita_basics_jmeq.jmeq
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) A1)
                             _x
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) B)
                             __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            x
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) A)
                            y) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       x y)))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      JMEQ :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
            _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
            B : cic.Univ (cic.type (cic.s cic.z)) =>
            __ : cic.Term (cic.type (cic.s cic.z)) B =>
            matita_basics_jmeq.jmeq
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
              _x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
              __)
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x
             (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) y) =>
      matita_basics_jmeq.jmeq_elim
        (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x
        (y0 : cic.Term (cic.type (cic.s cic.z)) A =>
         __ :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
               _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
               B : cic.Univ (cic.type (cic.s cic.z)) =>
               __ : cic.Term (cic.type (cic.s cic.z)) B =>
               matita_basics_jmeq.jmeq
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    A1)
                 _x
                 (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    B)
                 __)
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                x
                (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
                y0) =>
         cic.lift cic.prop (cic.type cic.z)
           ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __1)
              (cic.lift (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) A)
              x y0))
        (matita_basics_logic.refl
           (cic.lift (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A)
           x)
        y JMEQ.

def eq_to_jmeq :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop
           (cic.univ (cic.type (cic.s cic.z)))
           (A : cic.Univ (cic.type (cic.s cic.z)) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop A
              (x : cic.Term (cic.type (cic.s cic.z)) A =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop A
                 (y : cic.Term (cic.type (cic.s cic.z)) A =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       x y)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            x y) =>
                     (A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                      B : cic.Univ (cic.type (cic.s cic.z)) =>
                      __1 : cic.Term (cic.type (cic.s cic.z)) B =>
                      matita_basics_jmeq.jmeq
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A1)
                        _x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        __1)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       y)))))
      :=
      A : cic.Univ (cic.type (cic.s cic.z)) =>
      x : cic.Term (cic.type (cic.s cic.z)) A =>
      y : cic.Term (cic.type (cic.s cic.z)) A =>
      auto :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A1)
              _x __)
             (cic.lift (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) A)
             x y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop (cic.type cic.z)
           ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
             _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
             B : cic.Univ (cic.type (cic.s cic.z)) =>
             __ : cic.Term (cic.type (cic.s cic.z)) B =>
             matita_basics_jmeq.jmeq
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
               _x
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
               __)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x))
        (cic.lift cic.prop (cic.type cic.z)
           ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
             _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
             B : cic.Univ (cic.type (cic.s cic.z)) =>
             __ : cic.Term (cic.type (cic.s cic.z)) B =>
             matita_basics_jmeq.jmeq
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A1)
               _x
               (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) B)
               __)
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              x
              (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A)
              y))
        (matita_basics_jmeq.refl_jmeq
           (cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) A) x)
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s cic.z))) A)
           x
           (x0 : cic.Term (cic.type (cic.s cic.z)) A =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.univ (cic.type cic.z)))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                      B : cic.Univ (cic.type (cic.s cic.z)) =>
                      __ : cic.Term (cic.type (cic.s cic.z)) B =>
                      matita_basics_jmeq.jmeq
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A1)
                        _x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x))
                 (cic.lift cic.prop (cic.type cic.z)
                    ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                      _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                      B : cic.Univ (cic.type (cic.s cic.z)) =>
                      __ : cic.Term (cic.type (cic.s cic.z)) B =>
                      matita_basics_jmeq.jmeq
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) A1)
                        _x
                        (cic.lift (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z)) B)
                        __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) A)
                       x0))))
           (matita_basics_logic.refl
              (cic.lift (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) (cic.univ (cic.type cic.z)))
              (cic.lift cic.prop (cic.type cic.z)
                 ((A1 : cic.Univ (cic.type (cic.s cic.z)) =>
                   _x : cic.Term (cic.type (cic.s cic.z)) A1 =>
                   B : cic.Univ (cic.type (cic.s cic.z)) =>
                   __ : cic.Term (cic.type (cic.s cic.z)) B =>
                   matita_basics_jmeq.jmeq
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) A1)
                     _x
                     (cic.lift (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z)) B)
                     __)
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) A)
                    x)))
           y auto).


